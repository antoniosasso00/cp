"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/zod";
exports.ids = ["vendor-chunks/zod"];
exports.modules = {

/***/ "(ssr)/./node_modules/zod/lib/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/zod/lib/index.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: () => (/* binding */ BRAND),\n/* harmony export */   DIRTY: () => (/* binding */ DIRTY),\n/* harmony export */   EMPTY_PATH: () => (/* binding */ EMPTY_PATH),\n/* harmony export */   INVALID: () => (/* binding */ INVALID),\n/* harmony export */   NEVER: () => (/* binding */ NEVER),\n/* harmony export */   OK: () => (/* binding */ OK),\n/* harmony export */   ParseStatus: () => (/* binding */ ParseStatus),\n/* harmony export */   Schema: () => (/* binding */ ZodType),\n/* harmony export */   ZodAny: () => (/* binding */ ZodAny),\n/* harmony export */   ZodArray: () => (/* binding */ ZodArray),\n/* harmony export */   ZodBigInt: () => (/* binding */ ZodBigInt),\n/* harmony export */   ZodBoolean: () => (/* binding */ ZodBoolean),\n/* harmony export */   ZodBranded: () => (/* binding */ ZodBranded),\n/* harmony export */   ZodCatch: () => (/* binding */ ZodCatch),\n/* harmony export */   ZodDate: () => (/* binding */ ZodDate),\n/* harmony export */   ZodDefault: () => (/* binding */ ZodDefault),\n/* harmony export */   ZodDiscriminatedUnion: () => (/* binding */ ZodDiscriminatedUnion),\n/* harmony export */   ZodEffects: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodEnum: () => (/* binding */ ZodEnum),\n/* harmony export */   ZodError: () => (/* binding */ ZodError),\n/* harmony export */   ZodFirstPartyTypeKind: () => (/* binding */ ZodFirstPartyTypeKind),\n/* harmony export */   ZodFunction: () => (/* binding */ ZodFunction),\n/* harmony export */   ZodIntersection: () => (/* binding */ ZodIntersection),\n/* harmony export */   ZodIssueCode: () => (/* binding */ ZodIssueCode),\n/* harmony export */   ZodLazy: () => (/* binding */ ZodLazy),\n/* harmony export */   ZodLiteral: () => (/* binding */ ZodLiteral),\n/* harmony export */   ZodMap: () => (/* binding */ ZodMap),\n/* harmony export */   ZodNaN: () => (/* binding */ ZodNaN),\n/* harmony export */   ZodNativeEnum: () => (/* binding */ ZodNativeEnum),\n/* harmony export */   ZodNever: () => (/* binding */ ZodNever),\n/* harmony export */   ZodNull: () => (/* binding */ ZodNull),\n/* harmony export */   ZodNullable: () => (/* binding */ ZodNullable),\n/* harmony export */   ZodNumber: () => (/* binding */ ZodNumber),\n/* harmony export */   ZodObject: () => (/* binding */ ZodObject),\n/* harmony export */   ZodOptional: () => (/* binding */ ZodOptional),\n/* harmony export */   ZodParsedType: () => (/* binding */ ZodParsedType),\n/* harmony export */   ZodPipeline: () => (/* binding */ ZodPipeline),\n/* harmony export */   ZodPromise: () => (/* binding */ ZodPromise),\n/* harmony export */   ZodReadonly: () => (/* binding */ ZodReadonly),\n/* harmony export */   ZodRecord: () => (/* binding */ ZodRecord),\n/* harmony export */   ZodSchema: () => (/* binding */ ZodType),\n/* harmony export */   ZodSet: () => (/* binding */ ZodSet),\n/* harmony export */   ZodString: () => (/* binding */ ZodString),\n/* harmony export */   ZodSymbol: () => (/* binding */ ZodSymbol),\n/* harmony export */   ZodTransformer: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodTuple: () => (/* binding */ ZodTuple),\n/* harmony export */   ZodType: () => (/* binding */ ZodType),\n/* harmony export */   ZodUndefined: () => (/* binding */ ZodUndefined),\n/* harmony export */   ZodUnion: () => (/* binding */ ZodUnion),\n/* harmony export */   ZodUnknown: () => (/* binding */ ZodUnknown),\n/* harmony export */   ZodVoid: () => (/* binding */ ZodVoid),\n/* harmony export */   addIssueToContext: () => (/* binding */ addIssueToContext),\n/* harmony export */   any: () => (/* binding */ anyType),\n/* harmony export */   array: () => (/* binding */ arrayType),\n/* harmony export */   bigint: () => (/* binding */ bigIntType),\n/* harmony export */   boolean: () => (/* binding */ booleanType),\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   custom: () => (/* binding */ custom),\n/* harmony export */   date: () => (/* binding */ dateType),\n/* harmony export */   \"default\": () => (/* binding */ z),\n/* harmony export */   defaultErrorMap: () => (/* binding */ errorMap),\n/* harmony export */   discriminatedUnion: () => (/* binding */ discriminatedUnionType),\n/* harmony export */   effect: () => (/* binding */ effectsType),\n/* harmony export */   \"enum\": () => (/* binding */ enumType),\n/* harmony export */   \"function\": () => (/* binding */ functionType),\n/* harmony export */   getErrorMap: () => (/* binding */ getErrorMap),\n/* harmony export */   getParsedType: () => (/* binding */ getParsedType),\n/* harmony export */   \"instanceof\": () => (/* binding */ instanceOfType),\n/* harmony export */   intersection: () => (/* binding */ intersectionType),\n/* harmony export */   isAborted: () => (/* binding */ isAborted),\n/* harmony export */   isAsync: () => (/* binding */ isAsync),\n/* harmony export */   isDirty: () => (/* binding */ isDirty),\n/* harmony export */   isValid: () => (/* binding */ isValid),\n/* harmony export */   late: () => (/* binding */ late),\n/* harmony export */   lazy: () => (/* binding */ lazyType),\n/* harmony export */   literal: () => (/* binding */ literalType),\n/* harmony export */   makeIssue: () => (/* binding */ makeIssue),\n/* harmony export */   map: () => (/* binding */ mapType),\n/* harmony export */   nan: () => (/* binding */ nanType),\n/* harmony export */   nativeEnum: () => (/* binding */ nativeEnumType),\n/* harmony export */   never: () => (/* binding */ neverType),\n/* harmony export */   \"null\": () => (/* binding */ nullType),\n/* harmony export */   nullable: () => (/* binding */ nullableType),\n/* harmony export */   number: () => (/* binding */ numberType),\n/* harmony export */   object: () => (/* binding */ objectType),\n/* harmony export */   objectUtil: () => (/* binding */ objectUtil),\n/* harmony export */   oboolean: () => (/* binding */ oboolean),\n/* harmony export */   onumber: () => (/* binding */ onumber),\n/* harmony export */   optional: () => (/* binding */ optionalType),\n/* harmony export */   ostring: () => (/* binding */ ostring),\n/* harmony export */   pipeline: () => (/* binding */ pipelineType),\n/* harmony export */   preprocess: () => (/* binding */ preprocessType),\n/* harmony export */   promise: () => (/* binding */ promiseType),\n/* harmony export */   quotelessJson: () => (/* binding */ quotelessJson),\n/* harmony export */   record: () => (/* binding */ recordType),\n/* harmony export */   set: () => (/* binding */ setType),\n/* harmony export */   setErrorMap: () => (/* binding */ setErrorMap),\n/* harmony export */   strictObject: () => (/* binding */ strictObjectType),\n/* harmony export */   string: () => (/* binding */ stringType),\n/* harmony export */   symbol: () => (/* binding */ symbolType),\n/* harmony export */   transformer: () => (/* binding */ effectsType),\n/* harmony export */   tuple: () => (/* binding */ tupleType),\n/* harmony export */   undefined: () => (/* binding */ undefinedType),\n/* harmony export */   union: () => (/* binding */ unionType),\n/* harmony export */   unknown: () => (/* binding */ unknownType),\n/* harmony export */   util: () => (/* binding */ util),\n/* harmony export */   \"void\": () => (/* binding */ voidType),\n/* harmony export */   z: () => (/* binding */ z)\n/* harmony export */ });\nvar util;\n(function(util) {\n    util.assertEqual = (val)=>val;\n    function assertIs(_arg) {}\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items)=>{\n        const obj = {};\n        for (const item of items){\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj)=>{\n        const validKeys = util.objectKeys(obj).filter((k)=>typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys){\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj)=>{\n        return util.objectKeys(obj).map(function(e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n     ? (obj)=>Object.keys(obj) // eslint-disable-line ban/ban\n     : (object)=>{\n        const keys = [];\n        for(const key in object){\n            if (Object.prototype.hasOwnProperty.call(object, key)) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    };\n    util.find = (arr, checker)=>{\n        for (const item of arr){\n            if (checker(item)) return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\" ? (val)=>Number.isInteger(val) // eslint-disable-line ban/ban\n     : (val)=>typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array.map((val)=>typeof val === \"string\" ? `'${val}'` : val).join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value)=>{\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function(objectUtil) {\n    objectUtil.mergeShapes = (first, second)=>{\n        return {\n            ...first,\n            ...second\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\"\n]);\nconst getParsedType = (data)=>{\n    const t = typeof data;\n    switch(t){\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\"\n]);\nconst quotelessJson = (obj)=>{\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    constructor(issues){\n        super();\n        this.issues = [];\n        this.addIssue = (sub)=>{\n            this.issues = [\n                ...this.issues,\n                sub\n            ];\n        };\n        this.addIssues = (subs = [])=>{\n            this.issues = [\n                ...this.issues,\n                ...subs\n            ];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        } else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    get errors() {\n        return this.issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper || function(issue) {\n            return issue.message;\n        };\n        const fieldErrors = {\n            _errors: []\n        };\n        const processError = (error)=>{\n            for (const issue of error.issues){\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                } else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                } else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                } else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                } else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while(i < issue.path.length){\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || {\n                                _errors: []\n                            };\n                        // if (typeof el === \"string\") {\n                        //   curr[el] = curr[el] || { _errors: [] };\n                        // } else if (typeof el === \"number\") {\n                        //   const errorArray: any = [];\n                        //   errorArray._errors = [];\n                        //   curr[el] = curr[el] || errorArray;\n                        // }\n                        } else {\n                            curr[el] = curr[el] || {\n                                _errors: []\n                            };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue)=>issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues){\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            } else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return {\n            formErrors,\n            fieldErrors\n        };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues)=>{\n    const error = new ZodError(issues);\n    return error;\n};\nconst errorMap = (issue, _ctx)=>{\n    let message;\n    switch(issue.code){\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            } else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                } else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                } else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                } else {\n                    util.assertNever(issue.validation);\n                }\n            } else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            } else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\") message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\") message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\") message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\") message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n            else message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\") message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\") message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\") message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\") message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\") message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return {\n        message\n    };\n};\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\nconst makeIssue = (params)=>{\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [\n        ...path,\n        ...issueData.path || []\n    ];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath\n    };\n    let errorMessage = \"\";\n    const maps = errorMaps.filter((m)=>!!m).slice().reverse();\n    for (const map of maps){\n        errorMessage = map(fullIssue, {\n            data,\n            defaultError: errorMessage\n        }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: issueData.message || errorMessage\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap,\n            ctx.schemaErrorMap,\n            getErrorMap(),\n            errorMap\n        ].filter((x)=>!!x)\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor(){\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\") this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\") this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results){\n            if (s.status === \"aborted\") return INVALID;\n            if (s.status === \"dirty\") status.dirty();\n            arrayValue.push(s.value);\n        }\n        return {\n            status: status.value,\n            value: arrayValue\n        };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs){\n            syncPairs.push({\n                key: await pair.key,\n                value: await pair.value\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs){\n            const { key, value } = pair;\n            if (key.status === \"aborted\") return INVALID;\n            if (value.status === \"aborted\") return INVALID;\n            if (key.status === \"dirty\") status.dirty();\n            if (value.status === \"dirty\") status.dirty();\n            if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return {\n            status: status.value,\n            value: finalObject\n        };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\"\n});\nconst DIRTY = (value)=>({\n        status: \"dirty\",\n        value\n    });\nconst OK = (value)=>({\n        status: \"valid\",\n        value\n    });\nconst isAborted = (x)=>x.status === \"aborted\";\nconst isDirty = (x)=>x.status === \"dirty\";\nconst isValid = (x)=>x.status === \"valid\";\nconst isAsync = (x)=>typeof Promise !== \"undefined\" && x instanceof Promise;\nvar errorUtil;\n(function(errorUtil) {\n    errorUtil.errToObj = (message)=>typeof message === \"string\" ? {\n            message\n        } : message || {};\n    errorUtil.toString = (message)=>typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key){\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            } else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result)=>{\n    if (isValid(result)) {\n        return {\n            success: true,\n            data: result.value\n        };\n    } else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error () {\n                if (this._error) return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            }\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params) return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap) return {\n        errorMap: errorMap,\n        description\n    };\n    const customMap = (iss, ctx)=>{\n        if (iss.code !== \"invalid_type\") return {\n            message: ctx.defaultError\n        };\n        if (typeof ctx.data === \"undefined\") {\n            return {\n                message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError\n            };\n        }\n        return {\n            message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError\n        };\n    };\n    return {\n        errorMap: customMap,\n        description\n    };\n}\nclass ZodType {\n    constructor(def){\n        /** Alias of safeParseAsync */ this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n    }\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent\n        };\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent\n            }\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success) return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data)\n        };\n        const result = this._parseSync({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n        return handleResult(ctx, result);\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success) return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data)\n        };\n        const maybeAsyncResult = this._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val)=>{\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return {\n                    message\n                };\n            } else if (typeof message === \"function\") {\n                return message(val);\n            } else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx)=>{\n            const result = check(val);\n            const setError = ()=>ctx.addIssue({\n                    code: ZodIssueCode.custom,\n                    ...getIssueProperties(val)\n                });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data)=>{\n                    if (!data) {\n                        setError();\n                        return false;\n                    } else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            } else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx)=>{\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n                return false;\n            } else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: {\n                type: \"refinement\",\n                refinement\n            }\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this, this._def);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([\n            this,\n            option\n        ], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: {\n                type: \"transform\",\n                transform\n            }\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : ()=>def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def)\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : ()=>def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[a-z][a-z0-9]*$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\nconst ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;\nconst ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\n// Adapted from https://stackoverflow.com/a/3143231\nconst datetimeRegex = (args)=>{\n    if (args.precision) {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        } else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}Z$`);\n        }\n    } else if (args.precision === 0) {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        } else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z$`);\n        }\n    } else {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        } else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?Z$`);\n        }\n    }\n};\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks){\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message\n                        });\n                    } else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message\n                        });\n                    }\n                    status.dirty();\n                }\n            } else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                } catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            } else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: {\n                            includes: check.value,\n                            position: check.position\n                        },\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            } else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            } else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: {\n                            startsWith: check.value\n                        },\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: {\n                            endsWith: check.value\n                        },\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: input.data\n        };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data)=>regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    email(message) {\n        return this._addCheck({\n            kind: \"email\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    url(message) {\n        return this._addCheck({\n            kind: \"url\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    emoji(message) {\n        return this._addCheck({\n            kind: \"emoji\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    uuid(message) {\n        return this._addCheck({\n            kind: \"uuid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    cuid(message) {\n        return this._addCheck({\n            kind: \"cuid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    cuid2(message) {\n        return this._addCheck({\n            kind: \"cuid2\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    ulid(message) {\n        return this._addCheck({\n            kind: \"ulid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    ip(options) {\n        return this._addCheck({\n            kind: \"ip\",\n            ...errorUtil.errToObj(options)\n        });\n    }\n    datetime(options) {\n        var _a;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                message: options\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n        });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    /**\r\n     * @deprecated Use z.string().min(1) instead.\r\n     * @see {@link ZodString.min}\r\n     */ nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind: \"trim\"\n                }\n            ]\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind: \"toLowerCase\"\n                }\n            ]\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind: \"toUpperCase\"\n                }\n            ]\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"datetime\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"uuid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"ip\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params)=>{\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params)\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return valInt % stepInt / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor(){\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks){\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: input.data\n        };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message)\n                }\n            ]\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message)\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message)\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message)\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message)\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message)\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"int\" || ch.kind === \"multipleOf\" && util.isInteger(ch.value));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n                return true;\n            } else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            } else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params)=>{\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params)\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor(){\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = BigInt(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.bigint,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks){\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: input.data\n        };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message)\n                }\n            ]\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message)\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params)=>{\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params)\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params)=>{\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params)\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks){\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\"\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\"\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime())\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message)\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message)\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params)=>{\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params)\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params)=>{\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params)\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params)=>{\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params)=>{\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params)\n    });\n};\nclass ZodAny extends ZodType {\n    constructor(){\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params)=>{\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params)\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor(){\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params)=>{\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params)=>{\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params)\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params)=>{\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params)\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: tooSmall ? def.exactLength.value : undefined,\n                    maximum: tooBig ? def.exactLength.value : undefined,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([\n                ...ctx.data\n            ].map((item, i)=>{\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result)=>{\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [\n            ...ctx.data\n        ].map((item, i)=>{\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: {\n                value: minLength,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: {\n                value: maxLength,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: {\n                value: len,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params)=>{\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params)\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for(const key in schema.shape){\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: ()=>newShape\n        });\n    } else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element)\n        });\n    } else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    } else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    } else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item)=>deepPartialify(item)));\n    } else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor(){\n        super(...arguments);\n        this._cached = null;\n        /**\r\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\r\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\r\n         */ this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\r\n         * @deprecated Use `.extend` instead\r\n         *  */ this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null) return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return this._cached = {\n            shape,\n            keys\n        };\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n            for(const key in ctx.data){\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys){\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: {\n                    status: \"valid\",\n                    value: key\n                },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys){\n                    pairs.push({\n                        key: {\n                            status: \"valid\",\n                            value: key\n                        },\n                        value: {\n                            status: \"valid\",\n                            value: ctx.data[key]\n                        }\n                    });\n                }\n            } else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys\n                    });\n                    status.dirty();\n                }\n            } else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        } else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys){\n                const value = ctx.data[key];\n                pairs.push({\n                    key: {\n                        status: \"valid\",\n                        value: key\n                    },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve().then(async ()=>{\n                const syncPairs = [];\n                for (const pair of pairs){\n                    const key = await pair.key;\n                    syncPairs.push({\n                        key,\n                        value: await pair.value,\n                        alwaysSet: pair.alwaysSet\n                    });\n                }\n                return syncPairs;\n            }).then((syncPairs)=>{\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        } else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...message !== undefined ? {\n                errorMap: (issue, ctx)=>{\n                    var _a, _b, _c, _d;\n                    const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                    if (issue.code === \"unrecognized_keys\") return {\n                        message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError\n                    };\n                    return {\n                        message: defaultError\n                    };\n                }\n            } : {}\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\"\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\"\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>({\n                    ...this._def.shape(),\n                    ...augmentation\n                })\n        });\n    }\n    /**\r\n     * Prior to zod@1.0.12 there was a bug in the\r\n     * inferred type of merged objects. Please\r\n     * upgrade if you are experiencing issues.\r\n     */ merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: ()=>({\n                    ...this._def.shape(),\n                    ...merging._def.shape()\n                }),\n            typeName: ZodFirstPartyTypeKind.ZodObject\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({\n            [key]: schema\n        });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key)=>{\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>shape\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key)=>{\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>shape\n        });\n    }\n    /**\r\n     * @deprecated\r\n     */ deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key)=>{\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            } else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>newShape\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key)=>{\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            } else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while(newField instanceof ZodOptional){\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>newShape\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params)=>{\n    return new ZodObject({\n        shape: ()=>shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params)\n    });\n};\nZodObject.strictCreate = (shape, params)=>{\n    return new ZodObject({\n        shape: ()=>shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params)\n    });\n};\nZodObject.lazycreate = (shape, params)=>{\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params)\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results){\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results){\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result)=>new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option)=>{\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: []\n                    },\n                    parent: null\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx\n                    }),\n                    ctx: childCtx\n                };\n            })).then(handleResults);\n        } else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options){\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: []\n                    },\n                    parent: null\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                } else if (result.status === \"dirty\" && !dirty) {\n                    dirty = {\n                        result,\n                        ctx: childCtx\n                    };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues)=>new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params)=>{\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params)\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type)=>{\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    } else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    } else if (type instanceof ZodLiteral) {\n        return [\n            type.value\n        ];\n    } else if (type instanceof ZodEnum) {\n        return type.options;\n    } else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return Object.keys(type.enum);\n    } else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    } else if (type instanceof ZodUndefined) {\n        return [\n            undefined\n        ];\n    } else if (type instanceof ZodNull) {\n        return [\n            null\n        ];\n    } else {\n        return null;\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [\n                    discriminator\n                ]\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            });\n        } else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\r\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\r\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\r\n     * have a different value for each object in the union.\r\n     * @param discriminator the name of the discriminator property\r\n     * @param types an array of object schemas\r\n     * @param params\r\n     */ static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options){\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues){\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params)\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return {\n            valid: true,\n            data: a\n        };\n    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util.objectKeys(a).filter((key)=>bKeys.indexOf(key) !== -1);\n        const newObj = {\n            ...a,\n            ...b\n        };\n        for (const key of sharedKeys){\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return {\n                    valid: false\n                };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return {\n            valid: true,\n            data: newObj\n        };\n    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return {\n                valid: false\n            };\n        }\n        const newArray = [];\n        for(let index = 0; index < a.length; index++){\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return {\n                    valid: false\n                };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return {\n            valid: true,\n            data: newArray\n        };\n    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {\n        return {\n            valid: true,\n            data: a\n        };\n    } else {\n        return {\n            valid: false\n        };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight)=>{\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return {\n                status: status.value,\n                value: merged.data\n            };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                })\n            ]).then(([left, right])=>handleParsed(left, right));\n        } else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params)=>{\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params)\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\"\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\"\n            });\n            status.dirty();\n        }\n        const items = [\n            ...ctx.data\n        ].map((item, itemIndex)=>{\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema) return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        }).filter((x)=>!!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results)=>{\n                return ParseStatus.mergeArray(status, results);\n            });\n        } else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest\n        });\n    }\n}\nZodTuple.create = (schemas, params)=>{\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params)\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for(const key in ctx.data){\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        } else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third)\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second)\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [\n            ...ctx.data.entries()\n        ].map(([key, value], index)=>{\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [\n                    index,\n                    \"key\"\n                ])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [\n                    index,\n                    \"value\"\n                ]))\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async ()=>{\n                for (const pair of pairs){\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return {\n                    status: status.value,\n                    value: finalMap\n                };\n            });\n        } else {\n            const finalMap = new Map();\n            for (const pair of pairs){\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return {\n                status: status.value,\n                value: finalMap\n            };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params)=>{\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params)\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements){\n                if (element.status === \"aborted\") return INVALID;\n                if (element.status === \"dirty\") status.dirty();\n                parsedSet.add(element.value);\n            }\n            return {\n                status: status.value,\n                value: parsedSet\n            };\n        }\n        const elements = [\n            ...ctx.data.values()\n        ].map((item, i)=>valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements)=>finalizeSet(elements));\n        } else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: {\n                value: minSize,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: {\n                value: maxSize,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params)=>{\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params)\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor(){\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap\n                ].filter((x)=>!!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error\n                }\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap\n                ].filter((x)=>!!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error\n                }\n            });\n        }\n        const params = {\n            errorMap: ctx.common.contextualErrorMap\n        };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function(...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e)=>{\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e)=>{\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        } else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function(...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([\n                        makeArgsIssue(args, parsedArgs.error)\n                    ]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([\n                        makeReturnsIssue(result, parsedReturns.error)\n                    ]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create())\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params)\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({\n            data: ctx.data,\n            path: ctx.path,\n            parent: ctx\n        });\n    }\n}\nZodLazy.create = (getter, params)=>{\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params)\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value\n            });\n            return INVALID;\n        }\n        return {\n            status: \"valid\",\n            value: input.data\n        };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params)=>{\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params)\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params)\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type\n            });\n            return INVALID;\n        }\n        if (this._def.values.indexOf(input.data) === -1) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values){\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values){\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values){\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values) {\n        return ZodEnum.create(values);\n    }\n    exclude(values) {\n        return ZodEnum.create(this.options.filter((opt)=>!values.includes(opt)));\n    }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type\n            });\n            return INVALID;\n        }\n        if (nativeEnumValues.indexOf(input.data) === -1) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params)=>{\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params)\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n        return OK(promisified.then((data)=>{\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params)=>{\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params)\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg)=>{\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                } else {\n                    status.dirty();\n                }\n            },\n            get path () {\n                return ctx.path;\n            }\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.issues.length) {\n                return {\n                    status: \"dirty\",\n                    value: ctx.data\n                };\n            }\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then((processed)=>{\n                    return this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx\n                    });\n                });\n            } else {\n                return this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx\n                });\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc)=>{\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (inner.status === \"aborted\") return INVALID;\n                if (inner.status === \"dirty\") status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return {\n                    status: status.value,\n                    value: inner.value\n                };\n            } else {\n                return this._def.schema._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                }).then((inner)=>{\n                    if (inner.status === \"aborted\") return INVALID;\n                    if (inner.status === \"dirty\") status.dirty();\n                    return executeRefinement(inner.value).then(()=>{\n                        return {\n                            status: status.value,\n                            value: inner.value\n                        };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (!isValid(base)) return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return {\n                    status: status.value,\n                    value: result\n                };\n            } else {\n                return this._def.schema._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                }).then((base)=>{\n                    if (!isValid(base)) return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result)=>({\n                            status: status.value,\n                            value: result\n                        }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params)=>{\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params)\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params)=>{\n    return new ZodEffects({\n        schema,\n        effect: {\n            type: \"preprocess\",\n            transform: preprocess\n        },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params)\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params)=>{\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params)=>{\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params)\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params)=>{\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\" ? params.default : ()=>params.default,\n        ...processCreateParams(params)\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: []\n            }\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx\n            }\n        });\n        if (isAsync(result)) {\n            return result.then((result)=>{\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\" ? result.value : this._def.catchValue({\n                        get error () {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data\n                    })\n                };\n            });\n        } else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\" ? result.value : this._def.catchValue({\n                    get error () {\n                        return new ZodError(newCtx.common.issues);\n                    },\n                    input: newCtx.data\n                })\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params)=>{\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : ()=>params.catch,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return {\n            status: \"valid\",\n            value: input.data\n        };\n    }\n}\nZodNaN.create = (params)=>{\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params)\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async ()=>{\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (inResult.status === \"aborted\") return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                } else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx\n                    });\n                }\n            };\n            return handleAsync();\n        } else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            });\n            if (inResult.status === \"aborted\") return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value\n                };\n            } else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        if (isValid(result)) {\n            result.value = Object.freeze(result.value);\n        }\n        return result;\n    }\n}\nZodReadonly.create = (type, params)=>{\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params)\n    });\n};\nconst custom = (check, params = {}, /**\r\n * @deprecated\r\n *\r\n * Pass `fatal` into the params object instead:\r\n *\r\n * ```ts\r\n * z.string().custom((val) => val.length > 5, { fatal: false })\r\n * ```\r\n *\r\n */ fatal)=>{\n    if (check) return ZodAny.create().superRefine((data, ctx)=>{\n        var _a, _b;\n        if (!check(data)) {\n            const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? {\n                message: params\n            } : params;\n            const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n            const p2 = typeof p === \"string\" ? {\n                message: p\n            } : p;\n            ctx.addIssue({\n                code: \"custom\",\n                ...p2,\n                fatal: _fatal\n            });\n        }\n    });\n    return ZodAny.create();\n};\nconst late = {\n    object: ZodObject.lazycreate\n};\nvar ZodFirstPartyTypeKind;\n(function(ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`\n})=>custom((data)=>data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = ()=>stringType().optional();\nconst onumber = ()=>numberType().optional();\nconst oboolean = ()=>booleanType().optional();\nconst coerce = {\n    string: (arg)=>ZodString.create({\n            ...arg,\n            coerce: true\n        }),\n    number: (arg)=>ZodNumber.create({\n            ...arg,\n            coerce: true\n        }),\n    boolean: (arg)=>ZodBoolean.create({\n            ...arg,\n            coerce: true\n        }),\n    bigint: (arg)=>ZodBigInt.create({\n            ...arg,\n            coerce: true\n        }),\n    date: (arg)=>ZodDate.create({\n            ...arg,\n            coerce: true\n        })\n};\nconst NEVER = INVALID;\nvar z = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () {\n        return util;\n    },\n    get objectUtil () {\n        return objectUtil;\n    },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () {\n        return ZodFirstPartyTypeKind;\n    },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    \"enum\": enumType,\n    \"function\": functionType,\n    \"instanceof\": instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    \"null\": nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    \"undefined\": undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    \"void\": voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvem9kL2xpYi9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUE7QUFDSCxVQUFVQSxJQUFJO0lBQ1hBLEtBQUtDLFdBQVcsR0FBRyxDQUFDQyxNQUFRQTtJQUM1QixTQUFTQyxTQUFTQyxJQUFJLEdBQUk7SUFDMUJKLEtBQUtHLFFBQVEsR0FBR0E7SUFDaEIsU0FBU0UsWUFBWUMsRUFBRTtRQUNuQixNQUFNLElBQUlDO0lBQ2Q7SUFDQVAsS0FBS0ssV0FBVyxHQUFHQTtJQUNuQkwsS0FBS1EsV0FBVyxHQUFHLENBQUNDO1FBQ2hCLE1BQU1DLE1BQU0sQ0FBQztRQUNiLEtBQUssTUFBTUMsUUFBUUYsTUFBTztZQUN0QkMsR0FBRyxDQUFDQyxLQUFLLEdBQUdBO1FBQ2hCO1FBQ0EsT0FBT0Q7SUFDWDtJQUNBVixLQUFLWSxrQkFBa0IsR0FBRyxDQUFDRjtRQUN2QixNQUFNRyxZQUFZYixLQUFLYyxVQUFVLENBQUNKLEtBQUtLLE1BQU0sQ0FBQyxDQUFDQyxJQUFNLE9BQU9OLEdBQUcsQ0FBQ0EsR0FBRyxDQUFDTSxFQUFFLENBQUMsS0FBSztRQUM1RSxNQUFNQyxXQUFXLENBQUM7UUFDbEIsS0FBSyxNQUFNRCxLQUFLSCxVQUFXO1lBQ3ZCSSxRQUFRLENBQUNELEVBQUUsR0FBR04sR0FBRyxDQUFDTSxFQUFFO1FBQ3hCO1FBQ0EsT0FBT2hCLEtBQUtrQixZQUFZLENBQUNEO0lBQzdCO0lBQ0FqQixLQUFLa0IsWUFBWSxHQUFHLENBQUNSO1FBQ2pCLE9BQU9WLEtBQUtjLFVBQVUsQ0FBQ0osS0FBS1MsR0FBRyxDQUFDLFNBQVVDLENBQUM7WUFDdkMsT0FBT1YsR0FBRyxDQUFDVSxFQUFFO1FBQ2pCO0lBQ0o7SUFDQXBCLEtB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QUNMOEMsWUFBWXJCO0lBQ1oxTCxPQUFPMEs7SUFDUCxRQUFRSDtJQUNSclUsVUFBVTRWO0lBQ1ZsZ0IsUUFBUW9lO0lBQ1J0Z0IsUUFBUW1oQjtJQUNSc0IsVUFBVUE7SUFDVkQsU0FBU0E7SUFDVGpXLFVBQVU0VjtJQUNWSSxTQUFTQTtJQUNUZSxVQUFVaEI7SUFDVmxELFlBQVlpRDtJQUNaemYsU0FBU3FmO0lBQ1RzQixRQUFROUI7SUFDUjFlLEtBQUs0ZTtJQUNMNkIsY0FBY3BDO0lBQ2RyZixRQUFRc2U7SUFDUi9kLFFBQVFxZTtJQUNSOEMsYUFBYXZCO0lBQ2J3QixPQUFPbEM7SUFDUCxhQUFhWjtJQUNiK0MsT0FBT3RDO0lBQ1BuZSxTQUFTNmQ7SUFDVCxRQUFRRTtJQUNSeUIsT0FBT0E7SUFDUHZmLGNBQWNBO0lBQ2RDLGVBQWVBO0lBQ2ZLLFVBQVVBO0FBQ2Q7QUFFNnFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyYm9ucGlsb3QtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvem9kL2xpYi9pbmRleC5tanM/NzdkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdXRpbDtcclxuKGZ1bmN0aW9uICh1dGlsKSB7XHJcbiAgICB1dGlsLmFzc2VydEVxdWFsID0gKHZhbCkgPT4gdmFsO1xyXG4gICAgZnVuY3Rpb24gYXNzZXJ0SXMoX2FyZykgeyB9XHJcbiAgICB1dGlsLmFzc2VydElzID0gYXNzZXJ0SXM7XHJcbiAgICBmdW5jdGlvbiBhc3NlcnROZXZlcihfeCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xyXG4gICAgfVxyXG4gICAgdXRpbC5hc3NlcnROZXZlciA9IGFzc2VydE5ldmVyO1xyXG4gICAgdXRpbC5hcnJheVRvRW51bSA9IChpdGVtcykgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xyXG4gICAgICAgICAgICBvYmpbaXRlbV0gPSBpdGVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfTtcclxuICAgIHV0aWwuZ2V0VmFsaWRFbnVtVmFsdWVzID0gKG9iaikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZhbGlkS2V5cyA9IHV0aWwub2JqZWN0S2V5cyhvYmopLmZpbHRlcigoaykgPT4gdHlwZW9mIG9ialtvYmpba11dICE9PSBcIm51bWJlclwiKTtcclxuICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3QgayBvZiB2YWxpZEtleXMpIHtcclxuICAgICAgICAgICAgZmlsdGVyZWRba10gPSBvYmpba107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1dGlsLm9iamVjdFZhbHVlcyhmaWx0ZXJlZCk7XHJcbiAgICB9O1xyXG4gICAgdXRpbC5vYmplY3RWYWx1ZXMgPSAob2JqKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHV0aWwub2JqZWN0S2V5cyhvYmopLm1hcChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqW2VdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHV0aWwub2JqZWN0S2V5cyA9IHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gXCJmdW5jdGlvblwiIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFuL2JhblxyXG4gICAgICAgID8gKG9iaikgPT4gT2JqZWN0LmtleXMob2JqKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJhbi9iYW5cclxuICAgICAgICA6IChvYmplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qga2V5cyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGtleXM7XHJcbiAgICAgICAgfTtcclxuICAgIHV0aWwuZmluZCA9IChhcnIsIGNoZWNrZXIpID0+IHtcclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGVja2VyKGl0ZW0pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9O1xyXG4gICAgdXRpbC5pc0ludGVnZXIgPSB0eXBlb2YgTnVtYmVyLmlzSW50ZWdlciA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgPyAodmFsKSA9PiBOdW1iZXIuaXNJbnRlZ2VyKHZhbCkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBiYW4vYmFuXHJcbiAgICAgICAgOiAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICYmIGlzRmluaXRlKHZhbCkgJiYgTWF0aC5mbG9vcih2YWwpID09PSB2YWw7XHJcbiAgICBmdW5jdGlvbiBqb2luVmFsdWVzKGFycmF5LCBzZXBhcmF0b3IgPSBcIiB8IFwiKSB7XHJcbiAgICAgICAgcmV0dXJuIGFycmF5XHJcbiAgICAgICAgICAgIC5tYXAoKHZhbCkgPT4gKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgPyBgJyR7dmFsfSdgIDogdmFsKSlcclxuICAgICAgICAgICAgLmpvaW4oc2VwYXJhdG9yKTtcclxuICAgIH1cclxuICAgIHV0aWwuam9pblZhbHVlcyA9IGpvaW5WYWx1ZXM7XHJcbiAgICB1dGlsLmpzb25TdHJpbmdpZnlSZXBsYWNlciA9IChfLCB2YWx1ZSkgPT4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYmlnaW50XCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcbn0pKHV0aWwgfHwgKHV0aWwgPSB7fSkpO1xyXG52YXIgb2JqZWN0VXRpbDtcclxuKGZ1bmN0aW9uIChvYmplY3RVdGlsKSB7XHJcbiAgICBvYmplY3RVdGlsLm1lcmdlU2hhcGVzID0gKGZpcnN0LCBzZWNvbmQpID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAuLi5maXJzdCxcclxuICAgICAgICAgICAgLi4uc2Vjb25kLCAvLyBzZWNvbmQgb3ZlcndyaXRlcyBmaXJzdFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG59KShvYmplY3RVdGlsIHx8IChvYmplY3RVdGlsID0ge30pKTtcclxuY29uc3QgWm9kUGFyc2VkVHlwZSA9IHV0aWwuYXJyYXlUb0VudW0oW1xyXG4gICAgXCJzdHJpbmdcIixcclxuICAgIFwibmFuXCIsXHJcbiAgICBcIm51bWJlclwiLFxyXG4gICAgXCJpbnRlZ2VyXCIsXHJcbiAgICBcImZsb2F0XCIsXHJcbiAgICBcImJvb2xlYW5cIixcclxuICAgIFwiZGF0ZVwiLFxyXG4gICAgXCJiaWdpbnRcIixcclxuICAgIFwic3ltYm9sXCIsXHJcbiAgICBcImZ1bmN0aW9uXCIsXHJcbiAgICBcInVuZGVmaW5lZFwiLFxyXG4gICAgXCJudWxsXCIsXHJcbiAgICBcImFycmF5XCIsXHJcbiAgICBcIm9iamVjdFwiLFxyXG4gICAgXCJ1bmtub3duXCIsXHJcbiAgICBcInByb21pc2VcIixcclxuICAgIFwidm9pZFwiLFxyXG4gICAgXCJuZXZlclwiLFxyXG4gICAgXCJtYXBcIixcclxuICAgIFwic2V0XCIsXHJcbl0pO1xyXG5jb25zdCBnZXRQYXJzZWRUeXBlID0gKGRhdGEpID0+IHtcclxuICAgIGNvbnN0IHQgPSB0eXBlb2YgZGF0YTtcclxuICAgIHN3aXRjaCAodCkge1xyXG4gICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcclxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkO1xyXG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcclxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuc3RyaW5nO1xyXG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcclxuICAgICAgICAgICAgcmV0dXJuIGlzTmFOKGRhdGEpID8gWm9kUGFyc2VkVHlwZS5uYW4gOiBab2RQYXJzZWRUeXBlLm51bWJlcjtcclxuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxyXG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5ib29sZWFuO1xyXG4gICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxyXG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5mdW5jdGlvbjtcclxuICAgICAgICBjYXNlIFwiYmlnaW50XCI6XHJcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmJpZ2ludDtcclxuICAgICAgICBjYXNlIFwic3ltYm9sXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnN5bWJvbDtcclxuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5hcnJheTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUubnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGF0YS50aGVuICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgZGF0YS50aGVuID09PSBcImZ1bmN0aW9uXCIgJiZcclxuICAgICAgICAgICAgICAgIGRhdGEuY2F0Y2ggJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBkYXRhLmNhdGNoID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnByb21pc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBNYXAgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIE1hcCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUubWFwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgU2V0ICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBTZXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnNldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIERhdGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmRhdGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUub2JqZWN0O1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnVua25vd247XHJcbiAgICB9XHJcbn07XHJcblxyXG5jb25zdCBab2RJc3N1ZUNvZGUgPSB1dGlsLmFycmF5VG9FbnVtKFtcclxuICAgIFwiaW52YWxpZF90eXBlXCIsXHJcbiAgICBcImludmFsaWRfbGl0ZXJhbFwiLFxyXG4gICAgXCJjdXN0b21cIixcclxuICAgIFwiaW52YWxpZF91bmlvblwiLFxyXG4gICAgXCJpbnZhbGlkX3VuaW9uX2Rpc2NyaW1pbmF0b3JcIixcclxuICAgIFwiaW52YWxpZF9lbnVtX3ZhbHVlXCIsXHJcbiAgICBcInVucmVjb2duaXplZF9rZXlzXCIsXHJcbiAgICBcImludmFsaWRfYXJndW1lbnRzXCIsXHJcbiAgICBcImludmFsaWRfcmV0dXJuX3R5cGVcIixcclxuICAgIFwiaW52YWxpZF9kYXRlXCIsXHJcbiAgICBcImludmFsaWRfc3RyaW5nXCIsXHJcbiAgICBcInRvb19zbWFsbFwiLFxyXG4gICAgXCJ0b29fYmlnXCIsXHJcbiAgICBcImludmFsaWRfaW50ZXJzZWN0aW9uX3R5cGVzXCIsXHJcbiAgICBcIm5vdF9tdWx0aXBsZV9vZlwiLFxyXG4gICAgXCJub3RfZmluaXRlXCIsXHJcbl0pO1xyXG5jb25zdCBxdW90ZWxlc3NKc29uID0gKG9iaikgPT4ge1xyXG4gICAgY29uc3QganNvbiA9IEpTT04uc3RyaW5naWZ5KG9iaiwgbnVsbCwgMik7XHJcbiAgICByZXR1cm4ganNvbi5yZXBsYWNlKC9cIihbXlwiXSspXCI6L2csIFwiJDE6XCIpO1xyXG59O1xyXG5jbGFzcyBab2RFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGlzc3Vlcykge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5pc3N1ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmFkZElzc3VlID0gKHN1YikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3Vlcywgc3ViXTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuYWRkSXNzdWVzID0gKHN1YnMgPSBbXSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3VlcywgLi4uc3Vic107XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBhY3R1YWxQcm90byA9IG5ldy50YXJnZXQucHJvdG90eXBlO1xyXG4gICAgICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGJhbi9iYW5cclxuICAgICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIGFjdHVhbFByb3RvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX19wcm90b19fID0gYWN0dWFsUHJvdG87XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiWm9kRXJyb3JcIjtcclxuICAgICAgICB0aGlzLmlzc3VlcyA9IGlzc3VlcztcclxuICAgIH1cclxuICAgIGdldCBlcnJvcnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNzdWVzO1xyXG4gICAgfVxyXG4gICAgZm9ybWF0KF9tYXBwZXIpIHtcclxuICAgICAgICBjb25zdCBtYXBwZXIgPSBfbWFwcGVyIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChpc3N1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzc3VlLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgZmllbGRFcnJvcnMgPSB7IF9lcnJvcnM6IFtdIH07XHJcbiAgICAgICAgY29uc3QgcHJvY2Vzc0Vycm9yID0gKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXNzdWUgb2YgZXJyb3IuaXNzdWVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX3VuaW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc3N1ZS51bmlvbkVycm9ycy5tYXAocHJvY2Vzc0Vycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF9yZXR1cm5fdHlwZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0Vycm9yKGlzc3VlLnJldHVyblR5cGVFcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfYXJndW1lbnRzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRXJyb3IoaXNzdWUuYXJndW1lbnRzRXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUucGF0aC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZEVycm9ycy5fZXJyb3JzLnB1c2gobWFwcGVyKGlzc3VlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyciA9IGZpZWxkRXJyb3JzO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaSA8IGlzc3VlLnBhdGgubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gaXNzdWUucGF0aFtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVybWluYWwgPSBpID09PSBpc3N1ZS5wYXRoLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVybWluYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJbZWxdID0gY3VycltlbF0gfHwgeyBfZXJyb3JzOiBbXSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHR5cGVvZiBlbCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IHsgX2Vycm9yczogW10gfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0gZWxzZSBpZiAodHlwZW9mIGVsID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGNvbnN0IGVycm9yQXJyYXk6IGFueSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBlcnJvckFycmF5Ll9lcnJvcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCBlcnJvckFycmF5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyW2VsXS5fZXJyb3JzLnB1c2gobWFwcGVyKGlzc3VlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IGN1cnJbZWxdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBwcm9jZXNzRXJyb3IodGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIGZpZWxkRXJyb3JzO1xyXG4gICAgfVxyXG4gICAgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxuICAgIGdldCBtZXNzYWdlKCkge1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmlzc3VlcywgdXRpbC5qc29uU3RyaW5naWZ5UmVwbGFjZXIsIDIpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlzRW1wdHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNzdWVzLmxlbmd0aCA9PT0gMDtcclxuICAgIH1cclxuICAgIGZsYXR0ZW4obWFwcGVyID0gKGlzc3VlKSA9PiBpc3N1ZS5tZXNzYWdlKSB7XHJcbiAgICAgICAgY29uc3QgZmllbGRFcnJvcnMgPSB7fTtcclxuICAgICAgICBjb25zdCBmb3JtRXJyb3JzID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBzdWIgb2YgdGhpcy5pc3N1ZXMpIHtcclxuICAgICAgICAgICAgaWYgKHN1Yi5wYXRoLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkRXJyb3JzW3N1Yi5wYXRoWzBdXSA9IGZpZWxkRXJyb3JzW3N1Yi5wYXRoWzBdXSB8fCBbXTtcclxuICAgICAgICAgICAgICAgIGZpZWxkRXJyb3JzW3N1Yi5wYXRoWzBdXS5wdXNoKG1hcHBlcihzdWIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvcm1FcnJvcnMucHVzaChtYXBwZXIoc3ViKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgZm9ybUVycm9ycywgZmllbGRFcnJvcnMgfTtcclxuICAgIH1cclxuICAgIGdldCBmb3JtRXJyb3JzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZsYXR0ZW4oKTtcclxuICAgIH1cclxufVxyXG5ab2RFcnJvci5jcmVhdGUgPSAoaXNzdWVzKSA9PiB7XHJcbiAgICBjb25zdCBlcnJvciA9IG5ldyBab2RFcnJvcihpc3N1ZXMpO1xyXG4gICAgcmV0dXJuIGVycm9yO1xyXG59O1xyXG5cclxuY29uc3QgZXJyb3JNYXAgPSAoaXNzdWUsIF9jdHgpID0+IHtcclxuICAgIGxldCBtZXNzYWdlO1xyXG4gICAgc3dpdGNoIChpc3N1ZS5jb2RlKSB7XHJcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlOlxyXG4gICAgICAgICAgICBpZiAoaXNzdWUucmVjZWl2ZWQgPT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJSZXF1aXJlZFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBFeHBlY3RlZCAke2lzc3VlLmV4cGVjdGVkfSwgcmVjZWl2ZWQgJHtpc3N1ZS5yZWNlaXZlZH1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLmludmFsaWRfbGl0ZXJhbDpcclxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGxpdGVyYWwgdmFsdWUsIGV4cGVjdGVkICR7SlNPTi5zdHJpbmdpZnkoaXNzdWUuZXhwZWN0ZWQsIHV0aWwuanNvblN0cmluZ2lmeVJlcGxhY2VyKX1gO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS51bnJlY29nbml6ZWRfa2V5czpcclxuICAgICAgICAgICAgbWVzc2FnZSA9IGBVbnJlY29nbml6ZWQga2V5KHMpIGluIG9iamVjdDogJHt1dGlsLmpvaW5WYWx1ZXMoaXNzdWUua2V5cywgXCIsIFwiKX1gO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3VuaW9uOlxyXG4gICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgaW5wdXRgO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3VuaW9uX2Rpc2NyaW1pbmF0b3I6XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBkaXNjcmltaW5hdG9yIHZhbHVlLiBFeHBlY3RlZCAke3V0aWwuam9pblZhbHVlcyhpc3N1ZS5vcHRpb25zKX1gO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2VudW1fdmFsdWU6XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBlbnVtIHZhbHVlLiBFeHBlY3RlZCAke3V0aWwuam9pblZhbHVlcyhpc3N1ZS5vcHRpb25zKX0sIHJlY2VpdmVkICcke2lzc3VlLnJlY2VpdmVkfSdgO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2FyZ3VtZW50czpcclxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGZ1bmN0aW9uIGFyZ3VtZW50c2A7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLmludmFsaWRfcmV0dXJuX3R5cGU6XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBmdW5jdGlvbiByZXR1cm4gdHlwZWA7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLmludmFsaWRfZGF0ZTpcclxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGRhdGVgO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZzpcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpc3N1ZS52YWxpZGF0aW9uID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXCJpbmNsdWRlc1wiIGluIGlzc3VlLnZhbGlkYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgaW5wdXQ6IG11c3QgaW5jbHVkZSBcIiR7aXNzdWUudmFsaWRhdGlvbi5pbmNsdWRlc31cImA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpc3N1ZS52YWxpZGF0aW9uLnBvc2l0aW9uID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfSBhdCBvbmUgb3IgbW9yZSBwb3NpdGlvbnMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICR7aXNzdWUudmFsaWRhdGlvbi5wb3NpdGlvbn1gO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFwic3RhcnRzV2l0aFwiIGluIGlzc3VlLnZhbGlkYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgaW5wdXQ6IG11c3Qgc3RhcnQgd2l0aCBcIiR7aXNzdWUudmFsaWRhdGlvbi5zdGFydHNXaXRofVwiYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFwiZW5kc1dpdGhcIiBpbiBpc3N1ZS52YWxpZGF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0OiBtdXN0IGVuZCB3aXRoIFwiJHtpc3N1ZS52YWxpZGF0aW9uLmVuZHNXaXRofVwiYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoaXNzdWUudmFsaWRhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUudmFsaWRhdGlvbiAhPT0gXCJyZWdleFwiKSB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgJHtpc3N1ZS52YWxpZGF0aW9ufWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJJbnZhbGlkXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUudG9vX3NtYWxsOlxyXG4gICAgICAgICAgICBpZiAoaXNzdWUudHlwZSA9PT0gXCJhcnJheVwiKVxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBBcnJheSBtdXN0IGNvbnRhaW4gJHtpc3N1ZS5leGFjdCA/IFwiZXhhY3RseVwiIDogaXNzdWUuaW5jbHVzaXZlID8gYGF0IGxlYXN0YCA6IGBtb3JlIHRoYW5gfSAke2lzc3VlLm1pbmltdW19IGVsZW1lbnQocylgO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS50eXBlID09PSBcInN0cmluZ1wiKVxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBTdHJpbmcgbXVzdCBjb250YWluICR7aXNzdWUuZXhhY3QgPyBcImV4YWN0bHlcIiA6IGlzc3VlLmluY2x1c2l2ZSA/IGBhdCBsZWFzdGAgOiBgb3ZlcmB9ICR7aXNzdWUubWluaW11bX0gY2hhcmFjdGVyKHMpYDtcclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJudW1iZXJcIilcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgTnVtYmVyIG11c3QgYmUgJHtpc3N1ZS5leGFjdFxyXG4gICAgICAgICAgICAgICAgICAgID8gYGV4YWN0bHkgZXF1YWwgdG8gYFxyXG4gICAgICAgICAgICAgICAgICAgIDogaXNzdWUuaW5jbHVzaXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYGdyZWF0ZXIgdGhhbiBgfSR7aXNzdWUubWluaW11bX1gO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS50eXBlID09PSBcImRhdGVcIilcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRGF0ZSBtdXN0IGJlICR7aXNzdWUuZXhhY3RcclxuICAgICAgICAgICAgICAgICAgICA/IGBleGFjdGx5IGVxdWFsIHRvIGBcclxuICAgICAgICAgICAgICAgICAgICA6IGlzc3VlLmluY2x1c2l2ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGBncmVhdGVyIHRoYW4gYH0ke25ldyBEYXRlKE51bWJlcihpc3N1ZS5taW5pbXVtKSl9YDtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dFwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS50b29fYmlnOlxyXG4gICAgICAgICAgICBpZiAoaXNzdWUudHlwZSA9PT0gXCJhcnJheVwiKVxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBBcnJheSBtdXN0IGNvbnRhaW4gJHtpc3N1ZS5leGFjdCA/IGBleGFjdGx5YCA6IGlzc3VlLmluY2x1c2l2ZSA/IGBhdCBtb3N0YCA6IGBsZXNzIHRoYW5gfSAke2lzc3VlLm1heGltdW19IGVsZW1lbnQocylgO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS50eXBlID09PSBcInN0cmluZ1wiKVxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBTdHJpbmcgbXVzdCBjb250YWluICR7aXNzdWUuZXhhY3QgPyBgZXhhY3RseWAgOiBpc3N1ZS5pbmNsdXNpdmUgPyBgYXQgbW9zdGAgOiBgdW5kZXJgfSAke2lzc3VlLm1heGltdW19IGNoYXJhY3RlcihzKWA7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwibnVtYmVyXCIpXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gYE51bWJlciBtdXN0IGJlICR7aXNzdWUuZXhhY3RcclxuICAgICAgICAgICAgICAgICAgICA/IGBleGFjdGx5YFxyXG4gICAgICAgICAgICAgICAgICAgIDogaXNzdWUuaW5jbHVzaXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYGxlc3MgdGhhbiBvciBlcXVhbCB0b2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBgbGVzcyB0aGFuYH0gJHtpc3N1ZS5tYXhpbXVtfWA7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwiYmlnaW50XCIpXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gYEJpZ0ludCBtdXN0IGJlICR7aXNzdWUuZXhhY3RcclxuICAgICAgICAgICAgICAgICAgICA/IGBleGFjdGx5YFxyXG4gICAgICAgICAgICAgICAgICAgIDogaXNzdWUuaW5jbHVzaXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYGxlc3MgdGhhbiBvciBlcXVhbCB0b2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBgbGVzcyB0aGFuYH0gJHtpc3N1ZS5tYXhpbXVtfWA7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwiZGF0ZVwiKVxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBEYXRlIG11c3QgYmUgJHtpc3N1ZS5leGFjdFxyXG4gICAgICAgICAgICAgICAgICAgID8gYGV4YWN0bHlgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBpc3N1ZS5pbmNsdXNpdmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBgc21hbGxlciB0aGFuIG9yIGVxdWFsIHRvYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGBzbWFsbGVyIHRoYW5gfSAke25ldyBEYXRlKE51bWJlcihpc3N1ZS5tYXhpbXVtKSl9YDtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dFwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5jdXN0b206XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dGA7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLmludmFsaWRfaW50ZXJzZWN0aW9uX3R5cGVzOlxyXG4gICAgICAgICAgICBtZXNzYWdlID0gYEludGVyc2VjdGlvbiByZXN1bHRzIGNvdWxkIG5vdCBiZSBtZXJnZWRgO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5ub3RfbXVsdGlwbGVfb2Y6XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgTnVtYmVyIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAke2lzc3VlLm11bHRpcGxlT2Z9YDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUubm90X2Zpbml0ZTpcclxuICAgICAgICAgICAgbWVzc2FnZSA9IFwiTnVtYmVyIG11c3QgYmUgZmluaXRlXCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBfY3R4LmRlZmF1bHRFcnJvcjtcclxuICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihpc3N1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBtZXNzYWdlIH07XHJcbn07XHJcblxyXG5sZXQgb3ZlcnJpZGVFcnJvck1hcCA9IGVycm9yTWFwO1xyXG5mdW5jdGlvbiBzZXRFcnJvck1hcChtYXApIHtcclxuICAgIG92ZXJyaWRlRXJyb3JNYXAgPSBtYXA7XHJcbn1cclxuZnVuY3Rpb24gZ2V0RXJyb3JNYXAoKSB7XHJcbiAgICByZXR1cm4gb3ZlcnJpZGVFcnJvck1hcDtcclxufVxyXG5cclxuY29uc3QgbWFrZUlzc3VlID0gKHBhcmFtcykgPT4ge1xyXG4gICAgY29uc3QgeyBkYXRhLCBwYXRoLCBlcnJvck1hcHMsIGlzc3VlRGF0YSB9ID0gcGFyYW1zO1xyXG4gICAgY29uc3QgZnVsbFBhdGggPSBbLi4ucGF0aCwgLi4uKGlzc3VlRGF0YS5wYXRoIHx8IFtdKV07XHJcbiAgICBjb25zdCBmdWxsSXNzdWUgPSB7XHJcbiAgICAgICAgLi4uaXNzdWVEYXRhLFxyXG4gICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxyXG4gICAgfTtcclxuICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlwiO1xyXG4gICAgY29uc3QgbWFwcyA9IGVycm9yTWFwc1xyXG4gICAgICAgIC5maWx0ZXIoKG0pID0+ICEhbSlcclxuICAgICAgICAuc2xpY2UoKVxyXG4gICAgICAgIC5yZXZlcnNlKCk7XHJcbiAgICBmb3IgKGNvbnN0IG1hcCBvZiBtYXBzKSB7XHJcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gbWFwKGZ1bGxJc3N1ZSwgeyBkYXRhLCBkZWZhdWx0RXJyb3I6IGVycm9yTWVzc2FnZSB9KS5tZXNzYWdlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5pc3N1ZURhdGEsXHJcbiAgICAgICAgcGF0aDogZnVsbFBhdGgsXHJcbiAgICAgICAgbWVzc2FnZTogaXNzdWVEYXRhLm1lc3NhZ2UgfHwgZXJyb3JNZXNzYWdlLFxyXG4gICAgfTtcclxufTtcclxuY29uc3QgRU1QVFlfUEFUSCA9IFtdO1xyXG5mdW5jdGlvbiBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIGlzc3VlRGF0YSkge1xyXG4gICAgY29uc3QgaXNzdWUgPSBtYWtlSXNzdWUoe1xyXG4gICAgICAgIGlzc3VlRGF0YTogaXNzdWVEYXRhLFxyXG4gICAgICAgIGRhdGE6IGN0eC5kYXRhLFxyXG4gICAgICAgIHBhdGg6IGN0eC5wYXRoLFxyXG4gICAgICAgIGVycm9yTWFwczogW1xyXG4gICAgICAgICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCxcclxuICAgICAgICAgICAgY3R4LnNjaGVtYUVycm9yTWFwLFxyXG4gICAgICAgICAgICBnZXRFcnJvck1hcCgpLFxyXG4gICAgICAgICAgICBlcnJvck1hcCwgLy8gdGhlbiBnbG9iYWwgZGVmYXVsdCBtYXBcclxuICAgICAgICBdLmZpbHRlcigoeCkgPT4gISF4KSxcclxuICAgIH0pO1xyXG4gICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaChpc3N1ZSk7XHJcbn1cclxuY2xhc3MgUGFyc2VTdGF0dXMge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IFwidmFsaWRcIjtcclxuICAgIH1cclxuICAgIGRpcnR5KCkge1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlID09PSBcInZhbGlkXCIpXHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBcImRpcnR5XCI7XHJcbiAgICB9XHJcbiAgICBhYm9ydCgpIHtcclxuICAgICAgICBpZiAodGhpcy52YWx1ZSAhPT0gXCJhYm9ydGVkXCIpXHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBcImFib3J0ZWRcIjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBtZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0cykge1xyXG4gICAgICAgIGNvbnN0IGFycmF5VmFsdWUgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IHMgb2YgcmVzdWx0cykge1xyXG4gICAgICAgICAgICBpZiAocy5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XHJcbiAgICAgICAgICAgIGlmIChzLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxyXG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgIGFycmF5VmFsdWUucHVzaChzLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBhcnJheVZhbHVlIH07XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYXN5bmMgbWVyZ2VPYmplY3RBc3luYyhzdGF0dXMsIHBhaXJzKSB7XHJcbiAgICAgICAgY29uc3Qgc3luY1BhaXJzID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XHJcbiAgICAgICAgICAgIHN5bmNQYWlycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGtleTogYXdhaXQgcGFpci5rZXksXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogYXdhaXQgcGFpci52YWx1ZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBzeW5jUGFpcnMpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIG1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHBhaXJzKSB7XHJcbiAgICAgICAgY29uc3QgZmluYWxPYmplY3QgPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcclxuICAgICAgICAgICAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSBwYWlyO1xyXG4gICAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICAgICAgaWYgKHZhbHVlLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiZGlydHlcIilcclxuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpXHJcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgaWYgKGtleS52YWx1ZSAhPT0gXCJfX3Byb3RvX19cIiAmJlxyXG4gICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZS52YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiB8fCBwYWlyLmFsd2F5c1NldCkpIHtcclxuICAgICAgICAgICAgICAgIGZpbmFsT2JqZWN0W2tleS52YWx1ZV0gPSB2YWx1ZS52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGZpbmFsT2JqZWN0IH07XHJcbiAgICB9XHJcbn1cclxuY29uc3QgSU5WQUxJRCA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgc3RhdHVzOiBcImFib3J0ZWRcIixcclxufSk7XHJcbmNvbnN0IERJUlRZID0gKHZhbHVlKSA9PiAoeyBzdGF0dXM6IFwiZGlydHlcIiwgdmFsdWUgfSk7XHJcbmNvbnN0IE9LID0gKHZhbHVlKSA9PiAoeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWUgfSk7XHJcbmNvbnN0IGlzQWJvcnRlZCA9ICh4KSA9PiB4LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCI7XHJcbmNvbnN0IGlzRGlydHkgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiZGlydHlcIjtcclxuY29uc3QgaXNWYWxpZCA9ICh4KSA9PiB4LnN0YXR1cyA9PT0gXCJ2YWxpZFwiO1xyXG5jb25zdCBpc0FzeW5jID0gKHgpID0+IHR5cGVvZiBQcm9taXNlICE9PSBcInVuZGVmaW5lZFwiICYmIHggaW5zdGFuY2VvZiBQcm9taXNlO1xyXG5cclxudmFyIGVycm9yVXRpbDtcclxuKGZ1bmN0aW9uIChlcnJvclV0aWwpIHtcclxuICAgIGVycm9yVXRpbC5lcnJUb09iaiA9IChtZXNzYWdlKSA9PiB0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIiA/IHsgbWVzc2FnZSB9IDogbWVzc2FnZSB8fCB7fTtcclxuICAgIGVycm9yVXRpbC50b1N0cmluZyA9IChtZXNzYWdlKSA9PiB0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIiA/IG1lc3NhZ2UgOiBtZXNzYWdlID09PSBudWxsIHx8IG1lc3NhZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1lc3NhZ2UubWVzc2FnZTtcclxufSkoZXJyb3JVdGlsIHx8IChlcnJvclV0aWwgPSB7fSkpO1xyXG5cclxuY2xhc3MgUGFyc2VJbnB1dExhenlQYXRoIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgdmFsdWUsIHBhdGgsIGtleSkge1xyXG4gICAgICAgIHRoaXMuX2NhY2hlZFBhdGggPSBbXTtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICAgICAgICB0aGlzLmRhdGEgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9wYXRoID0gcGF0aDtcclxuICAgICAgICB0aGlzLl9rZXkgPSBrZXk7XHJcbiAgICB9XHJcbiAgICBnZXQgcGF0aCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2NhY2hlZFBhdGgubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9rZXkgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkUGF0aC5wdXNoKC4uLnRoaXMuX3BhdGgsIC4uLnRoaXMuX2tleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRQYXRoLnB1c2goLi4udGhpcy5fcGF0aCwgdGhpcy5fa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkUGF0aDtcclxuICAgIH1cclxufVxyXG5jb25zdCBoYW5kbGVSZXN1bHQgPSAoY3R4LCByZXN1bHQpID0+IHtcclxuICAgIGlmIChpc1ZhbGlkKHJlc3VsdCkpIHtcclxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBkYXRhOiByZXN1bHQudmFsdWUgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmICghY3R4LmNvbW1vbi5pc3N1ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbGlkYXRpb24gZmFpbGVkIGJ1dCBubyBpc3N1ZXMgZGV0ZWN0ZWQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgZ2V0IGVycm9yKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lcnJvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFpvZEVycm9yKGN0eC5jb21tb24uaXNzdWVzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXJyb3I7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gcHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpIHtcclxuICAgIGlmICghcGFyYW1zKVxyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgIGNvbnN0IHsgZXJyb3JNYXAsIGludmFsaWRfdHlwZV9lcnJvciwgcmVxdWlyZWRfZXJyb3IsIGRlc2NyaXB0aW9uIH0gPSBwYXJhbXM7XHJcbiAgICBpZiAoZXJyb3JNYXAgJiYgKGludmFsaWRfdHlwZV9lcnJvciB8fCByZXF1aXJlZF9lcnJvcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IHVzZSBcImludmFsaWRfdHlwZV9lcnJvclwiIG9yIFwicmVxdWlyZWRfZXJyb3JcIiBpbiBjb25qdW5jdGlvbiB3aXRoIGN1c3RvbSBlcnJvciBtYXAuYCk7XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3JNYXApXHJcbiAgICAgICAgcmV0dXJuIHsgZXJyb3JNYXA6IGVycm9yTWFwLCBkZXNjcmlwdGlvbiB9O1xyXG4gICAgY29uc3QgY3VzdG9tTWFwID0gKGlzcywgY3R4KSA9PiB7XHJcbiAgICAgICAgaWYgKGlzcy5jb2RlICE9PSBcImludmFsaWRfdHlwZVwiKVxyXG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBjdHguZGVmYXVsdEVycm9yIH07XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjdHguZGF0YSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiByZXF1aXJlZF9lcnJvciAhPT0gbnVsbCAmJiByZXF1aXJlZF9lcnJvciAhPT0gdm9pZCAwID8gcmVxdWlyZWRfZXJyb3IgOiBjdHguZGVmYXVsdEVycm9yIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IGludmFsaWRfdHlwZV9lcnJvciAhPT0gbnVsbCAmJiBpbnZhbGlkX3R5cGVfZXJyb3IgIT09IHZvaWQgMCA/IGludmFsaWRfdHlwZV9lcnJvciA6IGN0eC5kZWZhdWx0RXJyb3IgfTtcclxuICAgIH07XHJcbiAgICByZXR1cm4geyBlcnJvck1hcDogY3VzdG9tTWFwLCBkZXNjcmlwdGlvbiB9O1xyXG59XHJcbmNsYXNzIFpvZFR5cGUge1xyXG4gICAgY29uc3RydWN0b3IoZGVmKSB7XHJcbiAgICAgICAgLyoqIEFsaWFzIG9mIHNhZmVQYXJzZUFzeW5jICovXHJcbiAgICAgICAgdGhpcy5zcGEgPSB0aGlzLnNhZmVQYXJzZUFzeW5jO1xyXG4gICAgICAgIHRoaXMuX2RlZiA9IGRlZjtcclxuICAgICAgICB0aGlzLnBhcnNlID0gdGhpcy5wYXJzZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuc2FmZVBhcnNlID0gdGhpcy5zYWZlUGFyc2UuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnBhcnNlQXN5bmMgPSB0aGlzLnBhcnNlQXN5bmMuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnNhZmVQYXJzZUFzeW5jID0gdGhpcy5zYWZlUGFyc2VBc3luYy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuc3BhID0gdGhpcy5zcGEuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnJlZmluZSA9IHRoaXMucmVmaW5lLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5yZWZpbmVtZW50ID0gdGhpcy5yZWZpbmVtZW50LmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5zdXBlclJlZmluZSA9IHRoaXMuc3VwZXJSZWZpbmUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm9wdGlvbmFsID0gdGhpcy5vcHRpb25hbC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMubnVsbGFibGUgPSB0aGlzLm51bGxhYmxlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5udWxsaXNoID0gdGhpcy5udWxsaXNoLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5hcnJheSA9IHRoaXMuYXJyYXkuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnByb21pc2UgPSB0aGlzLnByb21pc2UuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm9yID0gdGhpcy5vci5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuYW5kID0gdGhpcy5hbmQuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5icmFuZCA9IHRoaXMuYnJhbmQuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmRlZmF1bHQgPSB0aGlzLmRlZmF1bHQuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmNhdGNoID0gdGhpcy5jYXRjaC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpYmUgPSB0aGlzLmRlc2NyaWJlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5waXBlID0gdGhpcy5waXBlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5yZWFkb25seSA9IHRoaXMucmVhZG9ubHkuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmlzTnVsbGFibGUgPSB0aGlzLmlzTnVsbGFibGUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmlzT3B0aW9uYWwgPSB0aGlzLmlzT3B0aW9uYWwuYmluZCh0aGlzKTtcclxuICAgIH1cclxuICAgIGdldCBkZXNjcmlwdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmRlc2NyaXB0aW9uO1xyXG4gICAgfVxyXG4gICAgX2dldFR5cGUoaW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gZ2V0UGFyc2VkVHlwZShpbnB1dC5kYXRhKTtcclxuICAgIH1cclxuICAgIF9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KSB7XHJcbiAgICAgICAgcmV0dXJuIChjdHggfHwge1xyXG4gICAgICAgICAgICBjb21tb246IGlucHV0LnBhcmVudC5jb21tb24sXHJcbiAgICAgICAgICAgIGRhdGE6IGlucHV0LmRhdGEsXHJcbiAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoaW5wdXQuZGF0YSksXHJcbiAgICAgICAgICAgIHNjaGVtYUVycm9yTWFwOiB0aGlzLl9kZWYuZXJyb3JNYXAsXHJcbiAgICAgICAgICAgIHBhdGg6IGlucHV0LnBhdGgsXHJcbiAgICAgICAgICAgIHBhcmVudDogaW5wdXQucGFyZW50LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXR1czogbmV3IFBhcnNlU3RhdHVzKCksXHJcbiAgICAgICAgICAgIGN0eDoge1xyXG4gICAgICAgICAgICAgICAgY29tbW9uOiBpbnB1dC5wYXJlbnQuY29tbW9uLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogaW5wdXQuZGF0YSxcclxuICAgICAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoaW5wdXQuZGF0YSksXHJcbiAgICAgICAgICAgICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxyXG4gICAgICAgICAgICAgICAgcGF0aDogaW5wdXQucGF0aCxcclxuICAgICAgICAgICAgICAgIHBhcmVudDogaW5wdXQucGFyZW50LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBfcGFyc2VTeW5jKGlucHV0KSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fcGFyc2UoaW5wdXQpO1xyXG4gICAgICAgIGlmIChpc0FzeW5jKHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3luY2hyb25vdXMgcGFyc2UgZW5jb3VudGVyZWQgcHJvbWlzZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBfcGFyc2VBc3luYyhpbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlKGlucHV0KTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XHJcbiAgICB9XHJcbiAgICBwYXJzZShkYXRhLCBwYXJhbXMpIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnNhZmVQYXJzZShkYXRhLCBwYXJhbXMpO1xyXG4gICAgICAgIGlmIChyZXN1bHQuc3VjY2VzcylcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xyXG4gICAgICAgIHRocm93IHJlc3VsdC5lcnJvcjtcclxuICAgIH1cclxuICAgIHNhZmVQYXJzZShkYXRhLCBwYXJhbXMpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgY29uc3QgY3R4ID0ge1xyXG4gICAgICAgICAgICBjb21tb246IHtcclxuICAgICAgICAgICAgICAgIGlzc3VlczogW10sXHJcbiAgICAgICAgICAgICAgICBhc3luYzogKF9hID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmFzeW5jKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvbnRleHR1YWxFcnJvck1hcDogcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmVycm9yTWFwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwYXRoOiAocGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLnBhdGgpIHx8IFtdLFxyXG4gICAgICAgICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxyXG4gICAgICAgICAgICBwYXJlbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIGRhdGEsXHJcbiAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoZGF0YSksXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZVN5bmMoeyBkYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHggfSk7XHJcbiAgICAgICAgcmV0dXJuIGhhbmRsZVJlc3VsdChjdHgsIHJlc3VsdCk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBwYXJzZUFzeW5jKGRhdGEsIHBhcmFtcykge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2FmZVBhcnNlQXN5bmMoZGF0YSwgcGFyYW1zKTtcclxuICAgICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcclxuICAgICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XHJcbiAgICB9XHJcbiAgICBhc3luYyBzYWZlUGFyc2VBc3luYyhkYXRhLCBwYXJhbXMpIHtcclxuICAgICAgICBjb25zdCBjdHggPSB7XHJcbiAgICAgICAgICAgIGNvbW1vbjoge1xyXG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcclxuICAgICAgICAgICAgICAgIGNvbnRleHR1YWxFcnJvck1hcDogcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmVycm9yTWFwLFxyXG4gICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBhdGg6IChwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMucGF0aCkgfHwgW10sXHJcbiAgICAgICAgICAgIHNjaGVtYUVycm9yTWFwOiB0aGlzLl9kZWYuZXJyb3JNYXAsXHJcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcclxuICAgICAgICAgICAgZGF0YSxcclxuICAgICAgICAgICAgcGFyc2VkVHlwZTogZ2V0UGFyc2VkVHlwZShkYXRhKSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IG1heWJlQXN5bmNSZXN1bHQgPSB0aGlzLl9wYXJzZSh7IGRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoaXNBc3luYyhtYXliZUFzeW5jUmVzdWx0KVxyXG4gICAgICAgICAgICA/IG1heWJlQXN5bmNSZXN1bHRcclxuICAgICAgICAgICAgOiBQcm9taXNlLnJlc29sdmUobWF5YmVBc3luY1Jlc3VsdCkpO1xyXG4gICAgICAgIHJldHVybiBoYW5kbGVSZXN1bHQoY3R4LCByZXN1bHQpO1xyXG4gICAgfVxyXG4gICAgcmVmaW5lKGNoZWNrLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgY29uc3QgZ2V0SXNzdWVQcm9wZXJ0aWVzID0gKHZhbCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIG1lc3NhZ2UgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IG1lc3NhZ2UgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZSh2YWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWZpbmVtZW50KCh2YWwsIGN0eCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjaGVjayh2YWwpO1xyXG4gICAgICAgICAgICBjb25zdCBzZXRFcnJvciA9ICgpID0+IGN0eC5hZGRJc3N1ZSh7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuY3VzdG9tLFxyXG4gICAgICAgICAgICAgICAgLi4uZ2V0SXNzdWVQcm9wZXJ0aWVzKHZhbCksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIFByb21pc2UgIT09IFwidW5kZWZpbmVkXCIgJiYgcmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEVycm9yKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBzZXRFcnJvcigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJlZmluZW1lbnQoY2hlY2ssIHJlZmluZW1lbnREYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZmluZW1lbnQoKHZhbCwgY3R4KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghY2hlY2sodmFsKSkge1xyXG4gICAgICAgICAgICAgICAgY3R4LmFkZElzc3VlKHR5cGVvZiByZWZpbmVtZW50RGF0YSA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgPyByZWZpbmVtZW50RGF0YSh2YWwsIGN0eClcclxuICAgICAgICAgICAgICAgICAgICA6IHJlZmluZW1lbnREYXRhKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBfcmVmaW5lbWVudChyZWZpbmVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzKHtcclxuICAgICAgICAgICAgc2NoZW1hOiB0aGlzLFxyXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHMsXHJcbiAgICAgICAgICAgIGVmZmVjdDogeyB0eXBlOiBcInJlZmluZW1lbnRcIiwgcmVmaW5lbWVudCB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc3VwZXJSZWZpbmUocmVmaW5lbWVudCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWZpbmVtZW50KHJlZmluZW1lbnQpO1xyXG4gICAgfVxyXG4gICAgb3B0aW9uYWwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFpvZE9wdGlvbmFsLmNyZWF0ZSh0aGlzLCB0aGlzLl9kZWYpO1xyXG4gICAgfVxyXG4gICAgbnVsbGFibGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIFpvZE51bGxhYmxlLmNyZWF0ZSh0aGlzLCB0aGlzLl9kZWYpO1xyXG4gICAgfVxyXG4gICAgbnVsbGlzaCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5udWxsYWJsZSgpLm9wdGlvbmFsKCk7XHJcbiAgICB9XHJcbiAgICBhcnJheSgpIHtcclxuICAgICAgICByZXR1cm4gWm9kQXJyYXkuY3JlYXRlKHRoaXMsIHRoaXMuX2RlZik7XHJcbiAgICB9XHJcbiAgICBwcm9taXNlKCkge1xyXG4gICAgICAgIHJldHVybiBab2RQcm9taXNlLmNyZWF0ZSh0aGlzLCB0aGlzLl9kZWYpO1xyXG4gICAgfVxyXG4gICAgb3Iob3B0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIFpvZFVuaW9uLmNyZWF0ZShbdGhpcywgb3B0aW9uXSwgdGhpcy5fZGVmKTtcclxuICAgIH1cclxuICAgIGFuZChpbmNvbWluZykge1xyXG4gICAgICAgIHJldHVybiBab2RJbnRlcnNlY3Rpb24uY3JlYXRlKHRoaXMsIGluY29taW5nLCB0aGlzLl9kZWYpO1xyXG4gICAgfVxyXG4gICAgdHJhbnNmb3JtKHRyYW5zZm9ybSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgWm9kRWZmZWN0cyh7XHJcbiAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXModGhpcy5fZGVmKSxcclxuICAgICAgICAgICAgc2NoZW1hOiB0aGlzLFxyXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHMsXHJcbiAgICAgICAgICAgIGVmZmVjdDogeyB0eXBlOiBcInRyYW5zZm9ybVwiLCB0cmFuc2Zvcm0gfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGRlZmF1bHQoZGVmKSB7XHJcbiAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlRnVuYyA9IHR5cGVvZiBkZWYgPT09IFwiZnVuY3Rpb25cIiA/IGRlZiA6ICgpID0+IGRlZjtcclxuICAgICAgICByZXR1cm4gbmV3IFpvZERlZmF1bHQoe1xyXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHRoaXMuX2RlZiksXHJcbiAgICAgICAgICAgIGlubmVyVHlwZTogdGhpcyxcclxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWVGdW5jLFxyXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERlZmF1bHQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBicmFuZCgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFpvZEJyYW5kZWQoe1xyXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEJyYW5kZWQsXHJcbiAgICAgICAgICAgIHR5cGU6IHRoaXMsXHJcbiAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXModGhpcy5fZGVmKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNhdGNoKGRlZikge1xyXG4gICAgICAgIGNvbnN0IGNhdGNoVmFsdWVGdW5jID0gdHlwZW9mIGRlZiA9PT0gXCJmdW5jdGlvblwiID8gZGVmIDogKCkgPT4gZGVmO1xyXG4gICAgICAgIHJldHVybiBuZXcgWm9kQ2F0Y2goe1xyXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHRoaXMuX2RlZiksXHJcbiAgICAgICAgICAgIGlubmVyVHlwZTogdGhpcyxcclxuICAgICAgICAgICAgY2F0Y2hWYWx1ZTogY2F0Y2hWYWx1ZUZ1bmMsXHJcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQ2F0Y2gsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBkZXNjcmliZShkZXNjcmlwdGlvbikge1xyXG4gICAgICAgIGNvbnN0IFRoaXMgPSB0aGlzLmNvbnN0cnVjdG9yO1xyXG4gICAgICAgIHJldHVybiBuZXcgVGhpcyh7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb24sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwaXBlKHRhcmdldCkge1xyXG4gICAgICAgIHJldHVybiBab2RQaXBlbGluZS5jcmVhdGUodGhpcywgdGFyZ2V0KTtcclxuICAgIH1cclxuICAgIHJlYWRvbmx5KCkge1xyXG4gICAgICAgIHJldHVybiBab2RSZWFkb25seS5jcmVhdGUodGhpcyk7XHJcbiAgICB9XHJcbiAgICBpc09wdGlvbmFsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNhZmVQYXJzZSh1bmRlZmluZWQpLnN1Y2Nlc3M7XHJcbiAgICB9XHJcbiAgICBpc051bGxhYmxlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNhZmVQYXJzZShudWxsKS5zdWNjZXNzO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGN1aWRSZWdleCA9IC9eY1teXFxzLV17OCx9JC9pO1xyXG5jb25zdCBjdWlkMlJlZ2V4ID0gL15bYS16XVthLXowLTldKiQvO1xyXG5jb25zdCB1bGlkUmVnZXggPSAvXlswLTlBLUhKS01OUC1UVi1aXXsyNn0kLztcclxuLy8gY29uc3QgdXVpZFJlZ2V4ID1cclxuLy8gICAvXihbYS1mMC05XXs4fS1bYS1mMC05XXs0fS1bMS01XVthLWYwLTldezN9LVthLWYwLTldezR9LVthLWYwLTldezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pO1xyXG5jb25zdCB1dWlkUmVnZXggPSAvXlswLTlhLWZBLUZdezh9XFxiLVswLTlhLWZBLUZdezR9XFxiLVswLTlhLWZBLUZdezR9XFxiLVswLTlhLWZBLUZdezR9XFxiLVswLTlhLWZBLUZdezEyfSQvaTtcclxuLy8gZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDYxODEvMTU1MDE1NVxyXG4vLyBvbGQgdmVyc2lvbjogdG9vIHNsb3csIGRpZG4ndCBzdXBwb3J0IHVuaWNvZGVcclxuLy8gY29uc3QgZW1haWxSZWdleCA9IC9eKCgoW2Etel18XFxkfFshI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKyhcXC4oW2Etel18XFxkfFshI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKykqKXwoKFxceDIyKSgoKChcXHgyMHxcXHgwOSkqKFxceDBkXFx4MGEpKT8oXFx4MjB8XFx4MDkpKyk/KChbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHg3Zl18XFx4MjF8W1xceDIzLVxceDViXXxbXFx4NWQtXFx4N2VdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoXFxcXChbXFx4MDEtXFx4MDlcXHgwYlxceDBjXFx4MGQtXFx4N2ZdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpKSooKChcXHgyMHxcXHgwOSkqKFxceDBkXFx4MGEpKT8oXFx4MjB8XFx4MDkpKyk/KFxceDIyKSkpQCgoKFthLXpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4pKygoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKSQvaTtcclxuLy9vbGQgZW1haWwgcmVnZXhcclxuLy8gY29uc3QgZW1haWxSZWdleCA9IC9eKChbXjw+KClbXFxdLiw7Olxcc0BcIl0rKFxcLltePD4oKVtcXF0uLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoPyEtKShbXjw+KClbXFxdLiw7Olxcc0BcIl0rXFwuKStbXjw+KClbXFxdLiw7Olxcc0BcIl17MSx9KVteLTw+KClbXFxdLiw7Olxcc0BcIl0kL2k7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4vLyBjb25zdCBlbWFpbFJlZ2V4ID1cclxuLy8gICAvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFxcXCJdKyhcXC5bXjw+KClbXFxdXFxcXC4sOzpcXHNAXFxcIl0rKSopfChcXFwiLitcXFwiKSlAKChcXFsoKCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSlcXC4pezN9KCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSlcXF0pfChcXFtJUHY2OigoW2EtZjAtOV17MSw0fTopezd9fDo6KFthLWYwLTldezEsNH06KXswLDZ9fChbYS1mMC05XXsxLDR9Oil7MX06KFthLWYwLTldezEsNH06KXswLDV9fChbYS1mMC05XXsxLDR9Oil7Mn06KFthLWYwLTldezEsNH06KXswLDR9fChbYS1mMC05XXsxLDR9Oil7M306KFthLWYwLTldezEsNH06KXswLDN9fChbYS1mMC05XXsxLDR9Oil7NH06KFthLWYwLTldezEsNH06KXswLDJ9fChbYS1mMC05XXsxLDR9Oil7NX06KFthLWYwLTldezEsNH06KXswLDF9KShbYS1mMC05XXsxLDR9fCgoKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKVxcLil7M30oKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKSlcXF0pfChbQS1aYS16MC05XShbQS1aYS16MC05LV0qW0EtWmEtejAtOV0pKihcXC5bQS1aYS16XXsyLH0pKykpJC87XHJcbi8vIGNvbnN0IGVtYWlsUmVnZXggPVxyXG4vLyAgIC9eW2EtekEtWjAtOVxcLlxcIVxcI1xcJFxcJVxcJlxcJ1xcKlxcK1xcL1xcPVxcP1xcXlxcX1xcYFxce1xcfFxcfVxcflxcLV0rQFthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykqJC87XHJcbi8vIGNvbnN0IGVtYWlsUmVnZXggPVxyXG4vLyAgIC9eKD86W2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKyg/OlxcLlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSspKnxcIig/OltcXHgwMS1cXHgwOFxceDBiXFx4MGNcXHgwZS1cXHgxZlxceDIxXFx4MjMtXFx4NWJcXHg1ZC1cXHg3Zl18XFxcXFtcXHgwMS1cXHgwOVxceDBiXFx4MGNcXHgwZS1cXHg3Zl0pKlwiKUAoPzooPzpbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XFwuKStbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/fFxcWyg/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/fFthLXowLTktXSpbYS16MC05XTooPzpbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHgyMS1cXHg1YVxceDUzLVxceDdmXXxcXFxcW1xceDAxLVxceDA5XFx4MGJcXHgwY1xceDBlLVxceDdmXSkrKVxcXSkkL2k7XHJcbmNvbnN0IGVtYWlsUmVnZXggPSAvXig/IVxcLikoPyEuKlxcLlxcLikoW0EtWjAtOV8rLVxcLl0qKVtBLVowLTlfKy1dQChbQS1aMC05XVtBLVowLTlcXC1dKlxcLikrW0EtWl17Mix9JC9pO1xyXG4vLyBjb25zdCBlbWFpbFJlZ2V4ID1cclxuLy8gICAvXlthLXowLTkuISMkJSbigJkqKy89P15fYHt8fX4tXStAW2EtejAtOS1dKyg/OlxcLlthLXowLTlcXC1dKykqJC9pO1xyXG4vLyBmcm9tIGh0dHBzOi8vdGhla2V2aW5zY290dC5jb20vZW1vamlzLWluLWphdmFzY3JpcHQvI3dyaXRpbmctYS1yZWd1bGFyLWV4cHJlc3Npb25cclxuY29uc3QgX2Vtb2ppUmVnZXggPSBgXihcXFxccHtFeHRlbmRlZF9QaWN0b2dyYXBoaWN9fFxcXFxwe0Vtb2ppX0NvbXBvbmVudH0pKyRgO1xyXG5sZXQgZW1vamlSZWdleDtcclxuY29uc3QgaXB2NFJlZ2V4ID0gL14oKCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSlcXC4pezN9KCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSkkLztcclxuY29uc3QgaXB2NlJlZ2V4ID0gL14oKFthLWYwLTldezEsNH06KXs3fXw6OihbYS1mMC05XXsxLDR9Oil7MCw2fXwoW2EtZjAtOV17MSw0fTopezF9OihbYS1mMC05XXsxLDR9Oil7MCw1fXwoW2EtZjAtOV17MSw0fTopezJ9OihbYS1mMC05XXsxLDR9Oil7MCw0fXwoW2EtZjAtOV17MSw0fTopezN9OihbYS1mMC05XXsxLDR9Oil7MCwzfXwoW2EtZjAtOV17MSw0fTopezR9OihbYS1mMC05XXsxLDR9Oil7MCwyfXwoW2EtZjAtOV17MSw0fTopezV9OihbYS1mMC05XXsxLDR9Oil7MCwxfSkoW2EtZjAtOV17MSw0fXwoKCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSlcXC4pezN9KCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSkpJC87XHJcbi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzE0MzIzMVxyXG5jb25zdCBkYXRldGltZVJlZ2V4ID0gKGFyZ3MpID0+IHtcclxuICAgIGlmIChhcmdzLnByZWNpc2lvbikge1xyXG4gICAgICAgIGlmIChhcmdzLm9mZnNldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChgXlxcXFxkezR9LVxcXFxkezJ9LVxcXFxkezJ9VFxcXFxkezJ9OlxcXFxkezJ9OlxcXFxkezJ9XFxcXC5cXFxcZHske2FyZ3MucHJlY2lzaW9ufX0oKFsrLV1cXFxcZHsyfSg6P1xcXFxkezJ9KT8pfFopJGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoYF5cXFxcZHs0fS1cXFxcZHsyfS1cXFxcZHsyfVRcXFxcZHsyfTpcXFxcZHsyfTpcXFxcZHsyfVxcXFwuXFxcXGR7JHthcmdzLnByZWNpc2lvbn19WiRgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhcmdzLnByZWNpc2lvbiA9PT0gMCkge1xyXG4gICAgICAgIGlmIChhcmdzLm9mZnNldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChgXlxcXFxkezR9LVxcXFxkezJ9LVxcXFxkezJ9VFxcXFxkezJ9OlxcXFxkezJ9OlxcXFxkezJ9KChbKy1dXFxcXGR7Mn0oOj9cXFxcZHsyfSk/KXxaKSRgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKGBeXFxcXGR7NH0tXFxcXGR7Mn0tXFxcXGR7Mn1UXFxcXGR7Mn06XFxcXGR7Mn06XFxcXGR7Mn1aJGApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmIChhcmdzLm9mZnNldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChgXlxcXFxkezR9LVxcXFxkezJ9LVxcXFxkezJ9VFxcXFxkezJ9OlxcXFxkezJ9OlxcXFxkezJ9KFxcXFwuXFxcXGQrKT8oKFsrLV1cXFxcZHsyfSg6P1xcXFxkezJ9KT8pfFopJGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoYF5cXFxcZHs0fS1cXFxcZHsyfS1cXFxcZHsyfVRcXFxcZHsyfTpcXFxcZHsyfTpcXFxcZHsyfShcXFxcLlxcXFxkKyk/WiRgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGlzVmFsaWRJUChpcCwgdmVyc2lvbikge1xyXG4gICAgaWYgKCh2ZXJzaW9uID09PSBcInY0XCIgfHwgIXZlcnNpb24pICYmIGlwdjRSZWdleC50ZXN0KGlwKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKCh2ZXJzaW9uID09PSBcInY2XCIgfHwgIXZlcnNpb24pICYmIGlwdjZSZWdleC50ZXN0KGlwKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmNsYXNzIFpvZFN0cmluZyBleHRlbmRzIFpvZFR5cGUge1xyXG4gICAgX3BhcnNlKGlucHV0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5jb2VyY2UpIHtcclxuICAgICAgICAgICAgaW5wdXQuZGF0YSA9IFN0cmluZyhpbnB1dC5kYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xyXG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnN0cmluZykge1xyXG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XHJcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcclxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnN0cmluZyxcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gbmV3IFBhcnNlU3RhdHVzKCk7XHJcbiAgICAgICAgbGV0IGN0eCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcclxuICAgICAgICAgICAgaWYgKGNoZWNrLmtpbmQgPT09IFwibWluXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA8IGNoZWNrLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm1heFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZGF0YS5sZW5ndGggPiBjaGVjay52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibGVuZ3RoXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvb0JpZyA9IGlucHV0LmRhdGEubGVuZ3RoID4gY2hlY2sudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0b29TbWFsbCA9IGlucHV0LmRhdGEubGVuZ3RoIDwgY2hlY2sudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9vQmlnIHx8IHRvb1NtYWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvb0JpZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodG9vU21hbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJlbWFpbFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVtYWlsUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImVtYWlsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImVtb2ppXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZW1vamlSZWdleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVtb2ppUmVnZXggPSBuZXcgUmVnRXhwKF9lbW9qaVJlZ2V4LCBcInVcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVtb2ppUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImVtb2ppXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInV1aWRcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF1dWlkUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInV1aWRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiY3VpZFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWN1aWRSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiY3VpZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJjdWlkMlwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWN1aWQyUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImN1aWQyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInVsaWRcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF1bGlkUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInVsaWRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidXJsXCIpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFVSTChpbnB1dC5kYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInVybFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJyZWdleFwiKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVjay5yZWdleC5sYXN0SW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVzdFJlc3VsdCA9IGNoZWNrLnJlZ2V4LnRlc3QoaW5wdXQuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRlc3RSZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcclxuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJyZWdleFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0cmltXCIpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0LmRhdGEgPSBpbnB1dC5kYXRhLnRyaW0oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImluY2x1ZGVzXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaW5wdXQuZGF0YS5pbmNsdWRlcyhjaGVjay52YWx1ZSwgY2hlY2sucG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogeyBpbmNsdWRlczogY2hlY2sudmFsdWUsIHBvc2l0aW9uOiBjaGVjay5wb3NpdGlvbiB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidG9Mb3dlckNhc2VcIikge1xyXG4gICAgICAgICAgICAgICAgaW5wdXQuZGF0YSA9IGlucHV0LmRhdGEudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInRvVXBwZXJDYXNlXCIpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0LmRhdGEgPSBpbnB1dC5kYXRhLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJzdGFydHNXaXRoXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaW5wdXQuZGF0YS5zdGFydHNXaXRoKGNoZWNrLnZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IHsgc3RhcnRzV2l0aDogY2hlY2sudmFsdWUgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImVuZHNXaXRoXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaW5wdXQuZGF0YS5lbmRzV2l0aChjaGVjay52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcclxuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7IGVuZHNXaXRoOiBjaGVjay52YWx1ZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZGF0ZXRpbWVcIikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVnZXggPSBkYXRldGltZVJlZ2V4KGNoZWNrKTtcclxuICAgICAgICAgICAgICAgIGlmICghcmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiZGF0ZXRpbWVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImlwXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZElQKGlucHV0LmRhdGEsIGNoZWNrLnZlcnNpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiaXBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbnB1dC5kYXRhIH07XHJcbiAgICB9XHJcbiAgICBfcmVnZXgocmVnZXgsIHZhbGlkYXRpb24sIG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWZpbmVtZW50KChkYXRhKSA9PiByZWdleC50ZXN0KGRhdGEpLCB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRpb24sXHJcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcclxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX2FkZENoZWNrKGNoZWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBab2RTdHJpbmcoe1xyXG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXHJcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIGNoZWNrXSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVtYWlsKG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImVtYWlsXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcclxuICAgIH1cclxuICAgIHVybChtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJ1cmxcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xyXG4gICAgfVxyXG4gICAgZW1vamkobWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiZW1vamlcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xyXG4gICAgfVxyXG4gICAgdXVpZChtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJ1dWlkXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcclxuICAgIH1cclxuICAgIGN1aWQobWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiY3VpZFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XHJcbiAgICB9XHJcbiAgICBjdWlkMihtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJjdWlkMlwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XHJcbiAgICB9XHJcbiAgICB1bGlkKG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcInVsaWRcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xyXG4gICAgfVxyXG4gICAgaXAob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiaXBcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnMpIH0pO1xyXG4gICAgfVxyXG4gICAgZGF0ZXRpbWUob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcclxuICAgICAgICAgICAgICAgIGtpbmQ6IFwiZGF0ZXRpbWVcIixcclxuICAgICAgICAgICAgICAgIHByZWNpc2lvbjogbnVsbCxcclxuICAgICAgICAgICAgICAgIG9mZnNldDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBvcHRpb25zLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcclxuICAgICAgICAgICAga2luZDogXCJkYXRldGltZVwiLFxyXG4gICAgICAgICAgICBwcmVjaXNpb246IHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnByZWNpc2lvbikgPT09IFwidW5kZWZpbmVkXCIgPyBudWxsIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnByZWNpc2lvbixcclxuICAgICAgICAgICAgb2Zmc2V0OiAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub2Zmc2V0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZSxcclxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tZXNzYWdlKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJlZ2V4KHJlZ2V4LCBtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcclxuICAgICAgICAgICAga2luZDogXCJyZWdleFwiLFxyXG4gICAgICAgICAgICByZWdleDogcmVnZXgsXHJcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGluY2x1ZGVzKHZhbHVlLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcclxuICAgICAgICAgICAga2luZDogXCJpbmNsdWRlc1wiLFxyXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucG9zaXRpb24sXHJcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWVzc2FnZSksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzdGFydHNXaXRoKHZhbHVlLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcclxuICAgICAgICAgICAga2luZDogXCJzdGFydHNXaXRoXCIsXHJcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZW5kc1dpdGgodmFsdWUsIG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xyXG4gICAgICAgICAgICBraW5kOiBcImVuZHNXaXRoXCIsXHJcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbWluKG1pbkxlbmd0aCwgbWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XHJcbiAgICAgICAgICAgIGtpbmQ6IFwibWluXCIsXHJcbiAgICAgICAgICAgIHZhbHVlOiBtaW5MZW5ndGgsXHJcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG1heChtYXhMZW5ndGgsIG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xyXG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxyXG4gICAgICAgICAgICB2YWx1ZTogbWF4TGVuZ3RoLFxyXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBsZW5ndGgobGVuLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcclxuICAgICAgICAgICAga2luZDogXCJsZW5ndGhcIixcclxuICAgICAgICAgICAgdmFsdWU6IGxlbixcclxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2Ugei5zdHJpbmcoKS5taW4oMSkgaW5zdGVhZC5cclxuICAgICAqIEBzZWUge0BsaW5rIFpvZFN0cmluZy5taW59XHJcbiAgICAgKi9cclxuICAgIG5vbmVtcHR5KG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5taW4oMSwgZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpKTtcclxuICAgIH1cclxuICAgIHRyaW0oKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBab2RTdHJpbmcoe1xyXG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXHJcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIHsga2luZDogXCJ0cmltXCIgfV0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0b0xvd2VyQ2FzZSgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcclxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgeyBraW5kOiBcInRvTG93ZXJDYXNlXCIgfV0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0b1VwcGVyQ2FzZSgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcclxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgeyBraW5kOiBcInRvVXBwZXJDYXNlXCIgfV0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBnZXQgaXNEYXRldGltZSgpIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImRhdGV0aW1lXCIpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlzRW1haWwoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJlbWFpbFwiKTtcclxuICAgIH1cclxuICAgIGdldCBpc1VSTCgpIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcInVybFwiKTtcclxuICAgIH1cclxuICAgIGdldCBpc0Vtb2ppKCkge1xyXG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZW1vamlcIik7XHJcbiAgICB9XHJcbiAgICBnZXQgaXNVVUlEKCkge1xyXG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwidXVpZFwiKTtcclxuICAgIH1cclxuICAgIGdldCBpc0NVSUQoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJjdWlkXCIpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlzQ1VJRDIoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJjdWlkMlwiKTtcclxuICAgIH1cclxuICAgIGdldCBpc1VMSUQoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ1bGlkXCIpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlzSVAoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJpcFwiKTtcclxuICAgIH1cclxuICAgIGdldCBtaW5MZW5ndGgoKSB7XHJcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XHJcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxyXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGNoLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtaW47XHJcbiAgICB9XHJcbiAgICBnZXQgbWF4TGVuZ3RoKCkge1xyXG4gICAgICAgIGxldCBtYXggPSBudWxsO1xyXG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xyXG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcclxuICAgICAgICAgICAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWF4O1xyXG4gICAgfVxyXG59XHJcblpvZFN0cmluZy5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XHJcbiAgICAgICAgY2hlY2tzOiBbXSxcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFN0cmluZyxcclxuICAgICAgICBjb2VyY2U6IChfYSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5jb2VyY2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlLFxyXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcclxuICAgIH0pO1xyXG59O1xyXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zOTY2NDg0L3doeS1kb2VzLW1vZHVsdXMtb3BlcmF0b3ItcmV0dXJuLWZyYWN0aW9uYWwtbnVtYmVyLWluLWphdmFzY3JpcHQvMzE3MTEwMzQjMzE3MTEwMzRcclxuZnVuY3Rpb24gZmxvYXRTYWZlUmVtYWluZGVyKHZhbCwgc3RlcCkge1xyXG4gICAgY29uc3QgdmFsRGVjQ291bnQgPSAodmFsLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aDtcclxuICAgIGNvbnN0IHN0ZXBEZWNDb3VudCA9IChzdGVwLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aDtcclxuICAgIGNvbnN0IGRlY0NvdW50ID0gdmFsRGVjQ291bnQgPiBzdGVwRGVjQ291bnQgPyB2YWxEZWNDb3VudCA6IHN0ZXBEZWNDb3VudDtcclxuICAgIGNvbnN0IHZhbEludCA9IHBhcnNlSW50KHZhbC50b0ZpeGVkKGRlY0NvdW50KS5yZXBsYWNlKFwiLlwiLCBcIlwiKSk7XHJcbiAgICBjb25zdCBzdGVwSW50ID0gcGFyc2VJbnQoc3RlcC50b0ZpeGVkKGRlY0NvdW50KS5yZXBsYWNlKFwiLlwiLCBcIlwiKSk7XHJcbiAgICByZXR1cm4gKHZhbEludCAlIHN0ZXBJbnQpIC8gTWF0aC5wb3coMTAsIGRlY0NvdW50KTtcclxufVxyXG5jbGFzcyBab2ROdW1iZXIgZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5taW4gPSB0aGlzLmd0ZTtcclxuICAgICAgICB0aGlzLm1heCA9IHRoaXMubHRlO1xyXG4gICAgICAgIHRoaXMuc3RlcCA9IHRoaXMubXVsdGlwbGVPZjtcclxuICAgIH1cclxuICAgIF9wYXJzZShpbnB1dCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kZWYuY29lcmNlKSB7XHJcbiAgICAgICAgICAgIGlucHV0LmRhdGEgPSBOdW1iZXIoaW5wdXQuZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcclxuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5udW1iZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xyXG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXHJcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5udW1iZXIsXHJcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGN0eCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcclxuICAgICAgICAgICAgaWYgKGNoZWNrLmtpbmQgPT09IFwiaW50XCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0ludGVnZXIoaW5wdXQuZGF0YSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcclxuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFwiaW50ZWdlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlZDogXCJmbG9hdFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWluXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY2hlY2suaW5jbHVzaXZlXHJcbiAgICAgICAgICAgICAgICAgICAgPyBpbnB1dC5kYXRhIDwgY2hlY2sudmFsdWVcclxuICAgICAgICAgICAgICAgICAgICA6IGlucHV0LmRhdGEgPD0gY2hlY2sudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9vU21hbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcclxuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtYXhcIikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdG9vQmlnID0gY2hlY2suaW5jbHVzaXZlXHJcbiAgICAgICAgICAgICAgICAgICAgPyBpbnB1dC5kYXRhID4gY2hlY2sudmFsdWVcclxuICAgICAgICAgICAgICAgICAgICA6IGlucHV0LmRhdGEgPj0gY2hlY2sudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9vQmlnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiBjaGVjay5pbmNsdXNpdmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZsb2F0U2FmZVJlbWFpbmRlcihpbnB1dC5kYXRhLCBjaGVjay52YWx1ZSkgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcclxuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLm5vdF9tdWx0aXBsZV9vZixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGVPZjogY2hlY2sudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJmaW5pdGVcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoaW5wdXQuZGF0YSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcclxuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLm5vdF9maW5pdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGNoZWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGlucHV0LmRhdGEgfTtcclxuICAgIH1cclxuICAgIGd0ZSh2YWx1ZSwgbWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWluXCIsIHZhbHVlLCB0cnVlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xyXG4gICAgfVxyXG4gICAgZ3QodmFsdWUsIG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgZmFsc2UsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XHJcbiAgICB9XHJcbiAgICBsdGUodmFsdWUsIG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1heFwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcclxuICAgIH1cclxuICAgIGx0KHZhbHVlLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIGZhbHNlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xyXG4gICAgfVxyXG4gICAgc2V0TGltaXQoa2luZCwgdmFsdWUsIGluY2x1c2l2ZSwgbWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgWm9kTnVtYmVyKHtcclxuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxyXG4gICAgICAgICAgICBjaGVja3M6IFtcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RlZi5jaGVja3MsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAga2luZCxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmUsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9hZGRDaGVjayhjaGVjaykge1xyXG4gICAgICAgIHJldHVybiBuZXcgWm9kTnVtYmVyKHtcclxuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxyXG4gICAgICAgICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCBjaGVja10sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpbnQobWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XHJcbiAgICAgICAgICAgIGtpbmQ6IFwiaW50XCIsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHBvc2l0aXZlKG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xyXG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxyXG4gICAgICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICAgICAgaW5jbHVzaXZlOiBmYWxzZSxcclxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbmVnYXRpdmUobWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XHJcbiAgICAgICAgICAgIGtpbmQ6IFwibWF4XCIsXHJcbiAgICAgICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGZhbHNlLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBub25wb3NpdGl2ZShtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcclxuICAgICAgICAgICAga2luZDogXCJtYXhcIixcclxuICAgICAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbm9ubmVnYXRpdmUobWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XHJcbiAgICAgICAgICAgIGtpbmQ6IFwibWluXCIsXHJcbiAgICAgICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG11bHRpcGxlT2YodmFsdWUsIG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xyXG4gICAgICAgICAgICBraW5kOiBcIm11bHRpcGxlT2ZcIixcclxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBmaW5pdGUobWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XHJcbiAgICAgICAgICAgIGtpbmQ6IFwiZmluaXRlXCIsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHNhZmUobWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XHJcbiAgICAgICAgICAgIGtpbmQ6IFwibWluXCIsXHJcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgdmFsdWU6IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXHJcbiAgICAgICAgfSkuX2FkZENoZWNrKHtcclxuICAgICAgICAgICAga2luZDogXCJtYXhcIixcclxuICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxyXG4gICAgICAgICAgICB2YWx1ZTogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGdldCBtaW5WYWx1ZSgpIHtcclxuICAgICAgICBsZXQgbWluID0gbnVsbDtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcclxuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXHJcbiAgICAgICAgICAgICAgICAgICAgbWluID0gY2gudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1pbjtcclxuICAgIH1cclxuICAgIGdldCBtYXhWYWx1ZSgpIHtcclxuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcclxuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gY2gudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1heDtcclxuICAgIH1cclxuICAgIGdldCBpc0ludCgpIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImludFwiIHx8XHJcbiAgICAgICAgICAgIChjaC5raW5kID09PSBcIm11bHRpcGxlT2ZcIiAmJiB1dGlsLmlzSW50ZWdlcihjaC52YWx1ZSkpKTtcclxuICAgIH1cclxuICAgIGdldCBpc0Zpbml0ZSgpIHtcclxuICAgICAgICBsZXQgbWF4ID0gbnVsbCwgbWluID0gbnVsbDtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcclxuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwiZmluaXRlXCIgfHxcclxuICAgICAgICAgICAgICAgIGNoLmtpbmQgPT09IFwiaW50XCIgfHxcclxuICAgICAgICAgICAgICAgIGNoLmtpbmQgPT09IFwibXVsdGlwbGVPZlwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxyXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGNoLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gY2gudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZShtaW4pICYmIE51bWJlci5pc0Zpbml0ZShtYXgpO1xyXG4gICAgfVxyXG59XHJcblpvZE51bWJlci5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZE51bWJlcih7XHJcbiAgICAgICAgY2hlY2tzOiBbXSxcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE51bWJlcixcclxuICAgICAgICBjb2VyY2U6IChwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuY29lcmNlKSB8fCBmYWxzZSxcclxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXHJcbiAgICB9KTtcclxufTtcclxuY2xhc3MgWm9kQmlnSW50IGV4dGVuZHMgWm9kVHlwZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMubWluID0gdGhpcy5ndGU7XHJcbiAgICAgICAgdGhpcy5tYXggPSB0aGlzLmx0ZTtcclxuICAgIH1cclxuICAgIF9wYXJzZShpbnB1dCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kZWYuY29lcmNlKSB7XHJcbiAgICAgICAgICAgIGlucHV0LmRhdGEgPSBCaWdJbnQoaW5wdXQuZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcclxuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5iaWdpbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xyXG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXHJcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5iaWdpbnQsXHJcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGN0eCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcclxuICAgICAgICAgICAgaWYgKGNoZWNrLmtpbmQgPT09IFwibWluXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY2hlY2suaW5jbHVzaXZlXHJcbiAgICAgICAgICAgICAgICAgICAgPyBpbnB1dC5kYXRhIDwgY2hlY2sudmFsdWVcclxuICAgICAgICAgICAgICAgICAgICA6IGlucHV0LmRhdGEgPD0gY2hlY2sudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9vU21hbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcclxuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJiaWdpbnRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvb0JpZyA9IGNoZWNrLmluY2x1c2l2ZVxyXG4gICAgICAgICAgICAgICAgICAgID8gaW5wdXQuZGF0YSA+IGNoZWNrLnZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgOiBpbnB1dC5kYXRhID49IGNoZWNrLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRvb0JpZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJiaWdpbnRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibXVsdGlwbGVPZlwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZGF0YSAlIGNoZWNrLnZhbHVlICE9PSBCaWdJbnQoMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcclxuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLm5vdF9tdWx0aXBsZV9vZixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGVPZjogY2hlY2sudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGNoZWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGlucHV0LmRhdGEgfTtcclxuICAgIH1cclxuICAgIGd0ZSh2YWx1ZSwgbWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWluXCIsIHZhbHVlLCB0cnVlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xyXG4gICAgfVxyXG4gICAgZ3QodmFsdWUsIG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgZmFsc2UsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XHJcbiAgICB9XHJcbiAgICBsdGUodmFsdWUsIG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1heFwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcclxuICAgIH1cclxuICAgIGx0KHZhbHVlLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIGZhbHNlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xyXG4gICAgfVxyXG4gICAgc2V0TGltaXQoa2luZCwgdmFsdWUsIGluY2x1c2l2ZSwgbWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgWm9kQmlnSW50KHtcclxuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxyXG4gICAgICAgICAgICBjaGVja3M6IFtcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RlZi5jaGVja3MsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAga2luZCxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmUsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9hZGRDaGVjayhjaGVjaykge1xyXG4gICAgICAgIHJldHVybiBuZXcgWm9kQmlnSW50KHtcclxuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxyXG4gICAgICAgICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCBjaGVja10sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwb3NpdGl2ZShtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcclxuICAgICAgICAgICAga2luZDogXCJtaW5cIixcclxuICAgICAgICAgICAgdmFsdWU6IEJpZ0ludCgwKSxcclxuICAgICAgICAgICAgaW5jbHVzaXZlOiBmYWxzZSxcclxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbmVnYXRpdmUobWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XHJcbiAgICAgICAgICAgIGtpbmQ6IFwibWF4XCIsXHJcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXHJcbiAgICAgICAgICAgIGluY2x1c2l2ZTogZmFsc2UsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG5vbnBvc2l0aXZlKG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xyXG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxyXG4gICAgICAgICAgICB2YWx1ZTogQmlnSW50KDApLFxyXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG5vbm5lZ2F0aXZlKG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xyXG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxyXG4gICAgICAgICAgICB2YWx1ZTogQmlnSW50KDApLFxyXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG11bHRpcGxlT2YodmFsdWUsIG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xyXG4gICAgICAgICAgICBraW5kOiBcIm11bHRpcGxlT2ZcIixcclxuICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGdldCBtaW5WYWx1ZSgpIHtcclxuICAgICAgICBsZXQgbWluID0gbnVsbDtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcclxuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXHJcbiAgICAgICAgICAgICAgICAgICAgbWluID0gY2gudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1pbjtcclxuICAgIH1cclxuICAgIGdldCBtYXhWYWx1ZSgpIHtcclxuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcclxuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gY2gudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1heDtcclxuICAgIH1cclxufVxyXG5ab2RCaWdJbnQuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgcmV0dXJuIG5ldyBab2RCaWdJbnQoe1xyXG4gICAgICAgIGNoZWNrczogW10sXHJcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RCaWdJbnQsXHJcbiAgICAgICAgY29lcmNlOiAoX2EgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuY29lcmNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZSxcclxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXHJcbiAgICB9KTtcclxufTtcclxuY2xhc3MgWm9kQm9vbGVhbiBleHRlbmRzIFpvZFR5cGUge1xyXG4gICAgX3BhcnNlKGlucHV0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5jb2VyY2UpIHtcclxuICAgICAgICAgICAgaW5wdXQuZGF0YSA9IEJvb2xlYW4oaW5wdXQuZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcclxuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5ib29sZWFuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcclxuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxyXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuYm9vbGVhbixcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuWm9kQm9vbGVhbi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZEJvb2xlYW4oe1xyXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQm9vbGVhbixcclxuICAgICAgICBjb2VyY2U6IChwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuY29lcmNlKSB8fCBmYWxzZSxcclxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXHJcbiAgICB9KTtcclxufTtcclxuY2xhc3MgWm9kRGF0ZSBleHRlbmRzIFpvZFR5cGUge1xyXG4gICAgX3BhcnNlKGlucHV0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5jb2VyY2UpIHtcclxuICAgICAgICAgICAgaW5wdXQuZGF0YSA9IG5ldyBEYXRlKGlucHV0LmRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XHJcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuZGF0ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XHJcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcclxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmRhdGUsXHJcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzTmFOKGlucHV0LmRhdGEuZ2V0VGltZSgpKSkge1xyXG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XHJcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfZGF0ZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcclxuICAgICAgICBsZXQgY3R4ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGZvciAoY29uc3QgY2hlY2sgb2YgdGhpcy5fZGVmLmNoZWNrcykge1xyXG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmRhdGEuZ2V0VGltZSgpIDwgY2hlY2sudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcclxuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm1heFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZGF0YS5nZXRUaW1lKCkgPiBjaGVjay52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW06IGNoZWNrLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoY2hlY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLnZhbHVlLFxyXG4gICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoaW5wdXQuZGF0YS5nZXRUaW1lKCkpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBfYWRkQ2hlY2soY2hlY2spIHtcclxuICAgICAgICByZXR1cm4gbmV3IFpvZERhdGUoe1xyXG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXHJcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIGNoZWNrXSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG1pbihtaW5EYXRlLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcclxuICAgICAgICAgICAga2luZDogXCJtaW5cIixcclxuICAgICAgICAgICAgdmFsdWU6IG1pbkRhdGUuZ2V0VGltZSgpLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBtYXgobWF4RGF0ZSwgbWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XHJcbiAgICAgICAgICAgIGtpbmQ6IFwibWF4XCIsXHJcbiAgICAgICAgICAgIHZhbHVlOiBtYXhEYXRlLmdldFRpbWUoKSxcclxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZ2V0IG1pbkRhdGUoKSB7XHJcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XHJcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxyXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGNoLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtaW4gIT0gbnVsbCA/IG5ldyBEYXRlKG1pbikgOiBudWxsO1xyXG4gICAgfVxyXG4gICAgZ2V0IG1heERhdGUoKSB7XHJcbiAgICAgICAgbGV0IG1heCA9IG51bGw7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XHJcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1heFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF4ID09PSBudWxsIHx8IGNoLnZhbHVlIDwgbWF4KVxyXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXggIT0gbnVsbCA/IG5ldyBEYXRlKG1heCkgOiBudWxsO1xyXG4gICAgfVxyXG59XHJcblpvZERhdGUuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBab2REYXRlKHtcclxuICAgICAgICBjaGVja3M6IFtdLFxyXG4gICAgICAgIGNvZXJjZTogKHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5jb2VyY2UpIHx8IGZhbHNlLFxyXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRGF0ZSxcclxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXHJcbiAgICB9KTtcclxufTtcclxuY2xhc3MgWm9kU3ltYm9sIGV4dGVuZHMgWm9kVHlwZSB7XHJcbiAgICBfcGFyc2UoaW5wdXQpIHtcclxuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XHJcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuc3ltYm9sKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcclxuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxyXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuc3ltYm9sLFxyXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcclxuICAgIH1cclxufVxyXG5ab2RTeW1ib2wuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBab2RTeW1ib2woe1xyXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kU3ltYm9sLFxyXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcclxuICAgIH0pO1xyXG59O1xyXG5jbGFzcyBab2RVbmRlZmluZWQgZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIF9wYXJzZShpbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcclxuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xyXG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXHJcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS51bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xyXG4gICAgfVxyXG59XHJcblpvZFVuZGVmaW5lZC5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZFVuZGVmaW5lZCh7XHJcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmRlZmluZWQsXHJcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxyXG4gICAgfSk7XHJcbn07XHJcbmNsYXNzIFpvZE51bGwgZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIF9wYXJzZShpbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcclxuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5udWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcclxuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxyXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubnVsbCxcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuWm9kTnVsbC5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZE51bGwoe1xyXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTnVsbCxcclxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXHJcbiAgICB9KTtcclxufTtcclxuY2xhc3MgWm9kQW55IGV4dGVuZHMgWm9kVHlwZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIC8vIHRvIHByZXZlbnQgaW5zdGFuY2VzIG9mIG90aGVyIGNsYXNzZXMgZnJvbSBleHRlbmRpbmcgWm9kQW55LiB0aGlzIGNhdXNlcyBpc3N1ZXMgd2l0aCBjYXRjaGFsbCBpbiBab2RPYmplY3QuXHJcbiAgICAgICAgdGhpcy5fYW55ID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIF9wYXJzZShpbnB1dCkge1xyXG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcclxuICAgIH1cclxufVxyXG5ab2RBbnkuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBab2RBbnkoe1xyXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQW55LFxyXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcclxuICAgIH0pO1xyXG59O1xyXG5jbGFzcyBab2RVbmtub3duIGV4dGVuZHMgWm9kVHlwZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIC8vIHJlcXVpcmVkXHJcbiAgICAgICAgdGhpcy5fdW5rbm93biA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBfcGFyc2UoaW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuWm9kVW5rbm93bi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZFVua25vd24oe1xyXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVW5rbm93bixcclxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXHJcbiAgICB9KTtcclxufTtcclxuY2xhc3MgWm9kTmV2ZXIgZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIF9wYXJzZShpbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcclxuICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcclxuICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubmV2ZXIsXHJcbiAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgIH1cclxufVxyXG5ab2ROZXZlci5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZE5ldmVyKHtcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5ldmVyLFxyXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcclxuICAgIH0pO1xyXG59O1xyXG5jbGFzcyBab2RWb2lkIGV4dGVuZHMgWm9kVHlwZSB7XHJcbiAgICBfcGFyc2UoaW5wdXQpIHtcclxuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XHJcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcclxuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxyXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUudm9pZCxcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuWm9kVm9pZC5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZFZvaWQoe1xyXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVm9pZCxcclxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXHJcbiAgICB9KTtcclxufTtcclxuY2xhc3MgWm9kQXJyYXkgZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIF9wYXJzZShpbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IHsgY3R4LCBzdGF0dXMgfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XHJcbiAgICAgICAgY29uc3QgZGVmID0gdGhpcy5fZGVmO1xyXG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5hcnJheSkge1xyXG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXHJcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5hcnJheSxcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGVmLmV4YWN0TGVuZ3RoICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvb0JpZyA9IGN0eC5kYXRhLmxlbmd0aCA+IGRlZi5leGFjdExlbmd0aC52YWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgdG9vU21hbGwgPSBjdHguZGF0YS5sZW5ndGggPCBkZWYuZXhhY3RMZW5ndGgudmFsdWU7XHJcbiAgICAgICAgICAgIGlmICh0b29CaWcgfHwgdG9vU21hbGwpIHtcclxuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IHRvb0JpZyA/IFpvZElzc3VlQ29kZS50b29fYmlnIDogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcclxuICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiAodG9vU21hbGwgPyBkZWYuZXhhY3RMZW5ndGgudmFsdWUgOiB1bmRlZmluZWQpLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heGltdW06ICh0b29CaWcgPyBkZWYuZXhhY3RMZW5ndGgudmFsdWUgOiB1bmRlZmluZWQpLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcclxuICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZGVmLmV4YWN0TGVuZ3RoLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkZWYubWluTGVuZ3RoICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChjdHguZGF0YS5sZW5ndGggPCBkZWYubWluTGVuZ3RoLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGRlZi5taW5MZW5ndGgudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZGVmLm1pbkxlbmd0aC5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGVmLm1heExlbmd0aCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoY3R4LmRhdGEubGVuZ3RoID4gZGVmLm1heExlbmd0aC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogZGVmLm1heExlbmd0aC52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWF4TGVuZ3RoLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbLi4uY3R4LmRhdGFdLm1hcCgoaXRlbSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZi50eXBlLl9wYXJzZUFzeW5jKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBpdGVtLCBjdHgucGF0aCwgaSkpO1xyXG4gICAgICAgICAgICB9KSkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXN1bHQgPSBbLi4uY3R4LmRhdGFdLm1hcCgoaXRlbSwgaSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmLnR5cGUuX3BhcnNlU3luYyhuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGkpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdCk7XHJcbiAgICB9XHJcbiAgICBnZXQgZWxlbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGU7XHJcbiAgICB9XHJcbiAgICBtaW4obWluTGVuZ3RoLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcclxuICAgICAgICAgICAgbWluTGVuZ3RoOiB7IHZhbHVlOiBtaW5MZW5ndGgsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbWF4KG1heExlbmd0aCwgbWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgWm9kQXJyYXkoe1xyXG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXHJcbiAgICAgICAgICAgIG1heExlbmd0aDogeyB2YWx1ZTogbWF4TGVuZ3RoLCBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGxlbmd0aChsZW4sIG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFpvZEFycmF5KHtcclxuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxyXG4gICAgICAgICAgICBleGFjdExlbmd0aDogeyB2YWx1ZTogbGVuLCBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG5vbmVtcHR5KG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5taW4oMSwgbWVzc2FnZSk7XHJcbiAgICB9XHJcbn1cclxuWm9kQXJyYXkuY3JlYXRlID0gKHNjaGVtYSwgcGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZEFycmF5KHtcclxuICAgICAgICB0eXBlOiBzY2hlbWEsXHJcbiAgICAgICAgbWluTGVuZ3RoOiBudWxsLFxyXG4gICAgICAgIG1heExlbmd0aDogbnVsbCxcclxuICAgICAgICBleGFjdExlbmd0aDogbnVsbCxcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEFycmF5LFxyXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcclxuICAgIH0pO1xyXG59O1xyXG5mdW5jdGlvbiBkZWVwUGFydGlhbGlmeShzY2hlbWEpIHtcclxuICAgIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RPYmplY3QpIHtcclxuICAgICAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHNjaGVtYS5zaGFwZSkge1xyXG4gICAgICAgICAgICBjb25zdCBmaWVsZFNjaGVtYSA9IHNjaGVtYS5zaGFwZVtrZXldO1xyXG4gICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gWm9kT3B0aW9uYWwuY3JlYXRlKGRlZXBQYXJ0aWFsaWZ5KGZpZWxkU2NoZW1hKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcclxuICAgICAgICAgICAgLi4uc2NoZW1hLl9kZWYsXHJcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiBuZXdTaGFwZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZEFycmF5KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XHJcbiAgICAgICAgICAgIC4uLnNjaGVtYS5fZGVmLFxyXG4gICAgICAgICAgICB0eXBlOiBkZWVwUGFydGlhbGlmeShzY2hlbWEuZWxlbWVudCksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RPcHRpb25hbCkge1xyXG4gICAgICAgIHJldHVybiBab2RPcHRpb25hbC5jcmVhdGUoZGVlcFBhcnRpYWxpZnkoc2NoZW1hLnVud3JhcCgpKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2ROdWxsYWJsZSkge1xyXG4gICAgICAgIHJldHVybiBab2ROdWxsYWJsZS5jcmVhdGUoZGVlcFBhcnRpYWxpZnkoc2NoZW1hLnVud3JhcCgpKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RUdXBsZSkge1xyXG4gICAgICAgIHJldHVybiBab2RUdXBsZS5jcmVhdGUoc2NoZW1hLml0ZW1zLm1hcCgoaXRlbSkgPT4gZGVlcFBhcnRpYWxpZnkoaXRlbSkpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBzY2hlbWE7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgWm9kT2JqZWN0IGV4dGVuZHMgWm9kVHlwZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuX2NhY2hlZCA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgSW4gbW9zdCBjYXNlcywgdGhpcyBpcyBubyBsb25nZXIgbmVlZGVkIC0gdW5rbm93biBwcm9wZXJ0aWVzIGFyZSBub3cgc2lsZW50bHkgc3RyaXBwZWQuXHJcbiAgICAgICAgICogSWYgeW91IHdhbnQgdG8gcGFzcyB0aHJvdWdoIHVua25vd24gcHJvcGVydGllcywgdXNlIGAucGFzc3Rocm91Z2goKWAgaW5zdGVhZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm5vbnN0cmljdCA9IHRoaXMucGFzc3Rocm91Z2g7XHJcbiAgICAgICAgLy8gZXh0ZW5kPFxyXG4gICAgICAgIC8vICAgQXVnbWVudGF0aW9uIGV4dGVuZHMgWm9kUmF3U2hhcGUsXHJcbiAgICAgICAgLy8gICBOZXdPdXRwdXQgZXh0ZW5kcyB1dGlsLmZsYXR0ZW48e1xyXG4gICAgICAgIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBPdXRwdXRdOiBrIGV4dGVuZHMga2V5b2YgQXVnbWVudGF0aW9uXHJcbiAgICAgICAgLy8gICAgICAgPyBBdWdtZW50YXRpb25ba11bXCJfb3V0cHV0XCJdXHJcbiAgICAgICAgLy8gICAgICAgOiBrIGV4dGVuZHMga2V5b2YgT3V0cHV0XHJcbiAgICAgICAgLy8gICAgICAgPyBPdXRwdXRba11cclxuICAgICAgICAvLyAgICAgICA6IG5ldmVyO1xyXG4gICAgICAgIC8vICAgfT4sXHJcbiAgICAgICAgLy8gICBOZXdJbnB1dCBleHRlbmRzIHV0aWwuZmxhdHRlbjx7XHJcbiAgICAgICAgLy8gICAgIFtrIGluIGtleW9mIEF1Z21lbnRhdGlvbiB8IGtleW9mIElucHV0XTogayBleHRlbmRzIGtleW9mIEF1Z21lbnRhdGlvblxyXG4gICAgICAgIC8vICAgICAgID8gQXVnbWVudGF0aW9uW2tdW1wiX2lucHV0XCJdXHJcbiAgICAgICAgLy8gICAgICAgOiBrIGV4dGVuZHMga2V5b2YgSW5wdXRcclxuICAgICAgICAvLyAgICAgICA/IElucHV0W2tdXHJcbiAgICAgICAgLy8gICAgICAgOiBuZXZlcjtcclxuICAgICAgICAvLyAgIH0+XHJcbiAgICAgICAgLy8gPihcclxuICAgICAgICAvLyAgIGF1Z21lbnRhdGlvbjogQXVnbWVudGF0aW9uXHJcbiAgICAgICAgLy8gKTogWm9kT2JqZWN0PFxyXG4gICAgICAgIC8vICAgZXh0ZW5kU2hhcGU8VCwgQXVnbWVudGF0aW9uPixcclxuICAgICAgICAvLyAgIFVua25vd25LZXlzLFxyXG4gICAgICAgIC8vICAgQ2F0Y2hhbGwsXHJcbiAgICAgICAgLy8gICBOZXdPdXRwdXQsXHJcbiAgICAgICAgLy8gICBOZXdJbnB1dFxyXG4gICAgICAgIC8vID4ge1xyXG4gICAgICAgIC8vICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xyXG4gICAgICAgIC8vICAgICAuLi50aGlzLl9kZWYsXHJcbiAgICAgICAgLy8gICAgIHNoYXBlOiAoKSA9PiAoe1xyXG4gICAgICAgIC8vICAgICAgIC4uLnRoaXMuX2RlZi5zaGFwZSgpLFxyXG4gICAgICAgIC8vICAgICAgIC4uLmF1Z21lbnRhdGlvbixcclxuICAgICAgICAvLyAgICAgfSksXHJcbiAgICAgICAgLy8gICB9KSBhcyBhbnk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkIFVzZSBgLmV4dGVuZGAgaW5zdGVhZFxyXG4gICAgICAgICAqICAqL1xyXG4gICAgICAgIHRoaXMuYXVnbWVudCA9IHRoaXMuZXh0ZW5kO1xyXG4gICAgfVxyXG4gICAgX2dldENhY2hlZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fY2FjaGVkICE9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkO1xyXG4gICAgICAgIGNvbnN0IHNoYXBlID0gdGhpcy5fZGVmLnNoYXBlKCk7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IHV0aWwub2JqZWN0S2V5cyhzaGFwZSk7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLl9jYWNoZWQgPSB7IHNoYXBlLCBrZXlzIH0pO1xyXG4gICAgfVxyXG4gICAgX3BhcnNlKGlucHV0KSB7XHJcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xyXG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm9iamVjdCkge1xyXG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XHJcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcclxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm9iamVjdCxcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xyXG4gICAgICAgIGNvbnN0IHsgc2hhcGUsIGtleXM6IHNoYXBlS2V5cyB9ID0gdGhpcy5fZ2V0Q2FjaGVkKCk7XHJcbiAgICAgICAgY29uc3QgZXh0cmFLZXlzID0gW107XHJcbiAgICAgICAgaWYgKCEodGhpcy5fZGVmLmNhdGNoYWxsIGluc3RhbmNlb2YgWm9kTmV2ZXIgJiZcclxuICAgICAgICAgICAgdGhpcy5fZGVmLnVua25vd25LZXlzID09PSBcInN0cmlwXCIpKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGN0eC5kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNoYXBlS2V5cy5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYWlycyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHNoYXBlS2V5cykge1xyXG4gICAgICAgICAgICBjb25zdCBrZXlWYWxpZGF0b3IgPSBzaGFwZVtrZXldO1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGN0eC5kYXRhW2tleV07XHJcbiAgICAgICAgICAgIHBhaXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAga2V5OiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZToga2V5IH0sXHJcbiAgICAgICAgICAgICAgICB2YWx1ZToga2V5VmFsaWRhdG9yLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBrZXkpKSxcclxuICAgICAgICAgICAgICAgIGFsd2F5c1NldDoga2V5IGluIGN0eC5kYXRhLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5jYXRjaGFsbCBpbnN0YW5jZW9mIFpvZE5ldmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVua25vd25LZXlzID0gdGhpcy5fZGVmLnVua25vd25LZXlzO1xyXG4gICAgICAgICAgICBpZiAodW5rbm93bktleXMgPT09IFwicGFzc3Rocm91Z2hcIikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgZXh0cmFLZXlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFpcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGN0eC5kYXRhW2tleV0gfSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh1bmtub3duS2V5cyA9PT0gXCJzdHJpY3RcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4dHJhS2V5cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS51bnJlY29nbml6ZWRfa2V5cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5czogZXh0cmFLZXlzLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHVua25vd25LZXlzID09PSBcInN0cmlwXCIpIDtcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludGVybmFsIFpvZE9iamVjdCBlcnJvcjogaW52YWxpZCB1bmtub3duS2V5cyB2YWx1ZS5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gcnVuIGNhdGNoYWxsIHZhbGlkYXRpb25cclxuICAgICAgICAgICAgY29uc3QgY2F0Y2hhbGwgPSB0aGlzLl9kZWYuY2F0Y2hhbGw7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGV4dHJhS2V5cykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjdHguZGF0YVtrZXldO1xyXG4gICAgICAgICAgICAgICAgcGFpcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5OiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZToga2V5IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNhdGNoYWxsLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBrZXkpIC8vLCBjdHguY2hpbGQoa2V5KSwgdmFsdWUsIGdldFBhcnNlZFR5cGUodmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICBhbHdheXNTZXQ6IGtleSBpbiBjdHguZGF0YSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3luY1BhaXJzID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBwYWlyLmtleTtcclxuICAgICAgICAgICAgICAgICAgICBzeW5jUGFpcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGF3YWl0IHBhaXIudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsd2F5c1NldDogcGFpci5hbHdheXNTZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3luY1BhaXJzO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHN5bmNQYWlycykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHN5bmNQYWlycyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHBhaXJzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgc2hhcGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zaGFwZSgpO1xyXG4gICAgfVxyXG4gICAgc3RyaWN0KG1lc3NhZ2UpIHtcclxuICAgICAgICBlcnJvclV0aWwuZXJyVG9PYmo7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xyXG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXHJcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBcInN0cmljdFwiLFxyXG4gICAgICAgICAgICAuLi4obWVzc2FnZSAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvck1hcDogKGlzc3VlLCBjdHgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0RXJyb3IgPSAoX2MgPSAoX2IgPSAoX2EgPSB0aGlzLl9kZWYpLmVycm9yTWFwKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgaXNzdWUsIGN0eCkubWVzc2FnZSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogY3R4LmRlZmF1bHRFcnJvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc3VlLmNvZGUgPT09IFwidW5yZWNvZ25pemVkX2tleXNcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogKF9kID0gZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLm1lc3NhZ2UpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGRlZmF1bHRFcnJvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWZhdWx0RXJyb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDoge30pLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc3RyaXAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xyXG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXHJcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBcInN0cmlwXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwYXNzdGhyb3VnaCgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcclxuICAgICAgICAgICAgdW5rbm93bktleXM6IFwicGFzc3Rocm91Z2hcIixcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vIGNvbnN0IEF1Z21lbnRGYWN0b3J5ID1cclxuICAgIC8vICAgPERlZiBleHRlbmRzIFpvZE9iamVjdERlZj4oZGVmOiBEZWYpID0+XHJcbiAgICAvLyAgIDxBdWdtZW50YXRpb24gZXh0ZW5kcyBab2RSYXdTaGFwZT4oXHJcbiAgICAvLyAgICAgYXVnbWVudGF0aW9uOiBBdWdtZW50YXRpb25cclxuICAgIC8vICAgKTogWm9kT2JqZWN0PFxyXG4gICAgLy8gICAgIGV4dGVuZFNoYXBlPFJldHVyblR5cGU8RGVmW1wic2hhcGVcIl0+LCBBdWdtZW50YXRpb24+LFxyXG4gICAgLy8gICAgIERlZltcInVua25vd25LZXlzXCJdLFxyXG4gICAgLy8gICAgIERlZltcImNhdGNoYWxsXCJdXHJcbiAgICAvLyAgID4gPT4ge1xyXG4gICAgLy8gICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcclxuICAgIC8vICAgICAgIC4uLmRlZixcclxuICAgIC8vICAgICAgIHNoYXBlOiAoKSA9PiAoe1xyXG4gICAgLy8gICAgICAgICAuLi5kZWYuc2hhcGUoKSxcclxuICAgIC8vICAgICAgICAgLi4uYXVnbWVudGF0aW9uLFxyXG4gICAgLy8gICAgICAgfSksXHJcbiAgICAvLyAgICAgfSkgYXMgYW55O1xyXG4gICAgLy8gICB9O1xyXG4gICAgZXh0ZW5kKGF1Z21lbnRhdGlvbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcclxuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxyXG4gICAgICAgICAgICBzaGFwZTogKCkgPT4gKHtcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RlZi5zaGFwZSgpLFxyXG4gICAgICAgICAgICAgICAgLi4uYXVnbWVudGF0aW9uLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJpb3IgdG8gem9kQDEuMC4xMiB0aGVyZSB3YXMgYSBidWcgaW4gdGhlXHJcbiAgICAgKiBpbmZlcnJlZCB0eXBlIG9mIG1lcmdlZCBvYmplY3RzLiBQbGVhc2VcclxuICAgICAqIHVwZ3JhZGUgaWYgeW91IGFyZSBleHBlcmllbmNpbmcgaXNzdWVzLlxyXG4gICAgICovXHJcbiAgICBtZXJnZShtZXJnaW5nKSB7XHJcbiAgICAgICAgY29uc3QgbWVyZ2VkID0gbmV3IFpvZE9iamVjdCh7XHJcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXHJcbiAgICAgICAgICAgIGNhdGNoYWxsOiBtZXJnaW5nLl9kZWYuY2F0Y2hhbGwsXHJcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgLi4udGhpcy5fZGVmLnNoYXBlKCksXHJcbiAgICAgICAgICAgICAgICAuLi5tZXJnaW5nLl9kZWYuc2hhcGUoKSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBtZXJnZWQ7XHJcbiAgICB9XHJcbiAgICAvLyBtZXJnZTxcclxuICAgIC8vICAgSW5jb21pbmcgZXh0ZW5kcyBBbnlab2RPYmplY3QsXHJcbiAgICAvLyAgIEF1Z21lbnRhdGlvbiBleHRlbmRzIEluY29taW5nW1wic2hhcGVcIl0sXHJcbiAgICAvLyAgIE5ld091dHB1dCBleHRlbmRzIHtcclxuICAgIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBPdXRwdXRdOiBrIGV4dGVuZHMga2V5b2YgQXVnbWVudGF0aW9uXHJcbiAgICAvLyAgICAgICA/IEF1Z21lbnRhdGlvbltrXVtcIl9vdXRwdXRcIl1cclxuICAgIC8vICAgICAgIDogayBleHRlbmRzIGtleW9mIE91dHB1dFxyXG4gICAgLy8gICAgICAgPyBPdXRwdXRba11cclxuICAgIC8vICAgICAgIDogbmV2ZXI7XHJcbiAgICAvLyAgIH0sXHJcbiAgICAvLyAgIE5ld0lucHV0IGV4dGVuZHMge1xyXG4gICAgLy8gICAgIFtrIGluIGtleW9mIEF1Z21lbnRhdGlvbiB8IGtleW9mIElucHV0XTogayBleHRlbmRzIGtleW9mIEF1Z21lbnRhdGlvblxyXG4gICAgLy8gICAgICAgPyBBdWdtZW50YXRpb25ba11bXCJfaW5wdXRcIl1cclxuICAgIC8vICAgICAgIDogayBleHRlbmRzIGtleW9mIElucHV0XHJcbiAgICAvLyAgICAgICA/IElucHV0W2tdXHJcbiAgICAvLyAgICAgICA6IG5ldmVyO1xyXG4gICAgLy8gICB9XHJcbiAgICAvLyA+KFxyXG4gICAgLy8gICBtZXJnaW5nOiBJbmNvbWluZ1xyXG4gICAgLy8gKTogWm9kT2JqZWN0PFxyXG4gICAgLy8gICBleHRlbmRTaGFwZTxULCBSZXR1cm5UeXBlPEluY29taW5nW1wiX2RlZlwiXVtcInNoYXBlXCJdPj4sXHJcbiAgICAvLyAgIEluY29taW5nW1wiX2RlZlwiXVtcInVua25vd25LZXlzXCJdLFxyXG4gICAgLy8gICBJbmNvbWluZ1tcIl9kZWZcIl1bXCJjYXRjaGFsbFwiXSxcclxuICAgIC8vICAgTmV3T3V0cHV0LFxyXG4gICAgLy8gICBOZXdJbnB1dFxyXG4gICAgLy8gPiB7XHJcbiAgICAvLyAgIGNvbnN0IG1lcmdlZDogYW55ID0gbmV3IFpvZE9iamVjdCh7XHJcbiAgICAvLyAgICAgdW5rbm93bktleXM6IG1lcmdpbmcuX2RlZi51bmtub3duS2V5cyxcclxuICAgIC8vICAgICBjYXRjaGFsbDogbWVyZ2luZy5fZGVmLmNhdGNoYWxsLFxyXG4gICAgLy8gICAgIHNoYXBlOiAoKSA9PlxyXG4gICAgLy8gICAgICAgb2JqZWN0VXRpbC5tZXJnZVNoYXBlcyh0aGlzLl9kZWYuc2hhcGUoKSwgbWVyZ2luZy5fZGVmLnNoYXBlKCkpLFxyXG4gICAgLy8gICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxyXG4gICAgLy8gICB9KSBhcyBhbnk7XHJcbiAgICAvLyAgIHJldHVybiBtZXJnZWQ7XHJcbiAgICAvLyB9XHJcbiAgICBzZXRLZXkoa2V5LCBzY2hlbWEpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hdWdtZW50KHsgW2tleV06IHNjaGVtYSB9KTtcclxuICAgIH1cclxuICAgIC8vIG1lcmdlPEluY29taW5nIGV4dGVuZHMgQW55Wm9kT2JqZWN0PihcclxuICAgIC8vICAgbWVyZ2luZzogSW5jb21pbmdcclxuICAgIC8vICk6IC8vWm9kT2JqZWN0PFQgJiBJbmNvbWluZ1tcIl9zaGFwZVwiXSwgVW5rbm93bktleXMsIENhdGNoYWxsPiA9IChtZXJnaW5nKSA9PiB7XHJcbiAgICAvLyBab2RPYmplY3Q8XHJcbiAgICAvLyAgIGV4dGVuZFNoYXBlPFQsIFJldHVyblR5cGU8SW5jb21pbmdbXCJfZGVmXCJdW1wic2hhcGVcIl0+PixcclxuICAgIC8vICAgSW5jb21pbmdbXCJfZGVmXCJdW1widW5rbm93bktleXNcIl0sXHJcbiAgICAvLyAgIEluY29taW5nW1wiX2RlZlwiXVtcImNhdGNoYWxsXCJdXHJcbiAgICAvLyA+IHtcclxuICAgIC8vICAgLy8gY29uc3QgbWVyZ2VkU2hhcGUgPSBvYmplY3RVdGlsLm1lcmdlU2hhcGVzKFxyXG4gICAgLy8gICAvLyAgIHRoaXMuX2RlZi5zaGFwZSgpLFxyXG4gICAgLy8gICAvLyAgIG1lcmdpbmcuX2RlZi5zaGFwZSgpXHJcbiAgICAvLyAgIC8vICk7XHJcbiAgICAvLyAgIGNvbnN0IG1lcmdlZDogYW55ID0gbmV3IFpvZE9iamVjdCh7XHJcbiAgICAvLyAgICAgdW5rbm93bktleXM6IG1lcmdpbmcuX2RlZi51bmtub3duS2V5cyxcclxuICAgIC8vICAgICBjYXRjaGFsbDogbWVyZ2luZy5fZGVmLmNhdGNoYWxsLFxyXG4gICAgLy8gICAgIHNoYXBlOiAoKSA9PlxyXG4gICAgLy8gICAgICAgb2JqZWN0VXRpbC5tZXJnZVNoYXBlcyh0aGlzLl9kZWYuc2hhcGUoKSwgbWVyZ2luZy5fZGVmLnNoYXBlKCkpLFxyXG4gICAgLy8gICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxyXG4gICAgLy8gICB9KSBhcyBhbnk7XHJcbiAgICAvLyAgIHJldHVybiBtZXJnZWQ7XHJcbiAgICAvLyB9XHJcbiAgICBjYXRjaGFsbChpbmRleCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcclxuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxyXG4gICAgICAgICAgICBjYXRjaGFsbDogaW5kZXgsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwaWNrKG1hc2spIHtcclxuICAgICAgICBjb25zdCBzaGFwZSA9IHt9O1xyXG4gICAgICAgIHV0aWwub2JqZWN0S2V5cyhtYXNrKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAgaWYgKG1hc2tba2V5XSAmJiB0aGlzLnNoYXBlW2tleV0pIHtcclxuICAgICAgICAgICAgICAgIHNoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcclxuICAgICAgICAgICAgc2hhcGU6ICgpID0+IHNoYXBlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgb21pdChtYXNrKSB7XHJcbiAgICAgICAgY29uc3Qgc2hhcGUgPSB7fTtcclxuICAgICAgICB1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghbWFza1trZXldKSB7XHJcbiAgICAgICAgICAgICAgICBzaGFwZVtrZXldID0gdGhpcy5zaGFwZVtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xyXG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXHJcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiBzaGFwZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAqL1xyXG4gICAgZGVlcFBhcnRpYWwoKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlZXBQYXJ0aWFsaWZ5KHRoaXMpO1xyXG4gICAgfVxyXG4gICAgcGFydGlhbChtYXNrKSB7XHJcbiAgICAgICAgY29uc3QgbmV3U2hhcGUgPSB7fTtcclxuICAgICAgICB1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkU2NoZW1hID0gdGhpcy5zaGFwZVtrZXldO1xyXG4gICAgICAgICAgICBpZiAobWFzayAmJiAhbWFza1trZXldKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gZmllbGRTY2hlbWE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gZmllbGRTY2hlbWEub3B0aW9uYWwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcclxuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxyXG4gICAgICAgICAgICBzaGFwZTogKCkgPT4gbmV3U2hhcGUsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXF1aXJlZChtYXNrKSB7XHJcbiAgICAgICAgY29uc3QgbmV3U2hhcGUgPSB7fTtcclxuICAgICAgICB1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChtYXNrICYmICFtYXNrW2tleV0pIHtcclxuICAgICAgICAgICAgICAgIG5ld1NoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZFNjaGVtYSA9IHRoaXMuc2hhcGVba2V5XTtcclxuICAgICAgICAgICAgICAgIGxldCBuZXdGaWVsZCA9IGZpZWxkU2NoZW1hO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG5ld0ZpZWxkIGluc3RhbmNlb2YgWm9kT3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdGaWVsZCA9IG5ld0ZpZWxkLl9kZWYuaW5uZXJUeXBlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbmV3U2hhcGVba2V5XSA9IG5ld0ZpZWxkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xyXG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXHJcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiBuZXdTaGFwZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGtleW9mKCkge1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVab2RFbnVtKHV0aWwub2JqZWN0S2V5cyh0aGlzLnNoYXBlKSk7XHJcbiAgICB9XHJcbn1cclxuWm9kT2JqZWN0LmNyZWF0ZSA9IChzaGFwZSwgcGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XHJcbiAgICAgICAgc2hhcGU6ICgpID0+IHNoYXBlLFxyXG4gICAgICAgIHVua25vd25LZXlzOiBcInN0cmlwXCIsXHJcbiAgICAgICAgY2F0Y2hhbGw6IFpvZE5ldmVyLmNyZWF0ZSgpLFxyXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxyXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcclxuICAgIH0pO1xyXG59O1xyXG5ab2RPYmplY3Quc3RyaWN0Q3JlYXRlID0gKHNoYXBlLCBwYXJhbXMpID0+IHtcclxuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcclxuICAgICAgICBzaGFwZTogKCkgPT4gc2hhcGUsXHJcbiAgICAgICAgdW5rbm93bktleXM6IFwic3RyaWN0XCIsXHJcbiAgICAgICAgY2F0Y2hhbGw6IFpvZE5ldmVyLmNyZWF0ZSgpLFxyXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxyXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcclxuICAgIH0pO1xyXG59O1xyXG5ab2RPYmplY3QubGF6eWNyZWF0ZSA9IChzaGFwZSwgcGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XHJcbiAgICAgICAgc2hhcGUsXHJcbiAgICAgICAgdW5rbm93bktleXM6IFwic3RyaXBcIixcclxuICAgICAgICBjYXRjaGFsbDogWm9kTmV2ZXIuY3JlYXRlKCksXHJcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXHJcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxyXG4gICAgfSk7XHJcbn07XHJcbmNsYXNzIFpvZFVuaW9uIGV4dGVuZHMgWm9kVHlwZSB7XHJcbiAgICBfcGFyc2UoaW5wdXQpIHtcclxuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fZGVmLm9wdGlvbnM7XHJcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlUmVzdWx0cyhyZXN1bHRzKSB7XHJcbiAgICAgICAgICAgIC8vIHJldHVybiBmaXJzdCBpc3N1ZS1mcmVlIHZhbGlkYXRpb24gaWYgaXQgZXhpc3RzXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5yZXN1bHQuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgaXNzdWVzIGZyb20gZGlydHkgb3B0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaCguLi5yZXN1bHQuY3R4LmNvbW1vbi5pc3N1ZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQucmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHJldHVybiBpbnZhbGlkXHJcbiAgICAgICAgICAgIGNvbnN0IHVuaW9uRXJyb3JzID0gcmVzdWx0cy5tYXAoKHJlc3VsdCkgPT4gbmV3IFpvZEVycm9yKHJlc3VsdC5jdHguY29tbW9uLmlzc3VlcykpO1xyXG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3VuaW9uLFxyXG4gICAgICAgICAgICAgICAgdW5pb25FcnJvcnMsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKG9wdGlvbnMubWFwKGFzeW5jIChvcHRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkQ3R4ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLmN0eCxcclxuICAgICAgICAgICAgICAgICAgICBjb21tb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uY3R4LmNvbW1vbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogbnVsbCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogYXdhaXQgb3B0aW9uLl9wYXJzZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGNoaWxkQ3R4LFxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIGN0eDogY2hpbGRDdHgsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KSkudGhlbihoYW5kbGVSZXN1bHRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBkaXJ0eSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgY29uc3QgaXNzdWVzID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkQ3R4ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLmN0eCxcclxuICAgICAgICAgICAgICAgICAgICBjb21tb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uY3R4LmNvbW1vbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogbnVsbCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBvcHRpb24uX3BhcnNlU3luYyh7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjaGlsZEN0eCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwidmFsaWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImRpcnR5XCIgJiYgIWRpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlydHkgPSB7IHJlc3VsdCwgY3R4OiBjaGlsZEN0eCB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkQ3R4LmNvbW1vbi5pc3N1ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNzdWVzLnB1c2goY2hpbGRDdHguY29tbW9uLmlzc3Vlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICBjdHguY29tbW9uLmlzc3Vlcy5wdXNoKC4uLmRpcnR5LmN0eC5jb21tb24uaXNzdWVzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkaXJ0eS5yZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgdW5pb25FcnJvcnMgPSBpc3N1ZXMubWFwKChpc3N1ZXMpID0+IG5ldyBab2RFcnJvcihpc3N1ZXMpKTtcclxuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbixcclxuICAgICAgICAgICAgICAgIHVuaW9uRXJyb3JzLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IG9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5vcHRpb25zO1xyXG4gICAgfVxyXG59XHJcblpvZFVuaW9uLmNyZWF0ZSA9ICh0eXBlcywgcGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZFVuaW9uKHtcclxuICAgICAgICBvcHRpb25zOiB0eXBlcyxcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFVuaW9uLFxyXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcclxuICAgIH0pO1xyXG59O1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xyXG4vLy8vLy8vLy8vICAgICAgWm9kRGlzY3JpbWluYXRlZFVuaW9uICAgICAgLy8vLy8vLy8vL1xyXG4vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5jb25zdCBnZXREaXNjcmltaW5hdG9yID0gKHR5cGUpID0+IHtcclxuICAgIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kTGF6eSkge1xyXG4gICAgICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUuc2NoZW1hKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RFZmZlY3RzKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS5pbm5lclR5cGUoKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kTGl0ZXJhbCkge1xyXG4gICAgICAgIHJldHVybiBbdHlwZS52YWx1ZV07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kRW51bSkge1xyXG4gICAgICAgIHJldHVybiB0eXBlLm9wdGlvbnM7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kTmF0aXZlRW51bSkge1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBiYW4vYmFuXHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHR5cGUuZW51bSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kRGVmYXVsdCkge1xyXG4gICAgICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUuX2RlZi5pbm5lclR5cGUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZFVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBbdW5kZWZpbmVkXTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2ROdWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIFtudWxsXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59O1xyXG5jbGFzcyBab2REaXNjcmltaW5hdGVkVW5pb24gZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIF9wYXJzZShpbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xyXG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5vYmplY3QpIHtcclxuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxyXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUub2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRpc2NyaW1pbmF0b3IgPSB0aGlzLmRpc2NyaW1pbmF0b3I7XHJcbiAgICAgICAgY29uc3QgZGlzY3JpbWluYXRvclZhbHVlID0gY3R4LmRhdGFbZGlzY3JpbWluYXRvcl07XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5vcHRpb25zTWFwLmdldChkaXNjcmltaW5hdG9yVmFsdWUpO1xyXG4gICAgICAgIGlmICghb3B0aW9uKSB7XHJcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb25fZGlzY3JpbWluYXRvcixcclxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IEFycmF5LmZyb20odGhpcy5vcHRpb25zTWFwLmtleXMoKSksXHJcbiAgICAgICAgICAgICAgICBwYXRoOiBbZGlzY3JpbWluYXRvcl0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbi5fcGFyc2VBc3luYyh7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcclxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxyXG4gICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbi5fcGFyc2VTeW5jKHtcclxuICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxyXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXHJcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGRpc2NyaW1pbmF0b3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5kaXNjcmltaW5hdG9yO1xyXG4gICAgfVxyXG4gICAgZ2V0IG9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5vcHRpb25zO1xyXG4gICAgfVxyXG4gICAgZ2V0IG9wdGlvbnNNYXAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5vcHRpb25zTWFwO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgY29uc3RydWN0b3Igb2YgdGhlIGRpc2NyaW1pbmF0ZWQgdW5pb24gc2NoZW1hLiBJdHMgYmVoYXZpb3VyIGlzIHZlcnkgc2ltaWxhciB0byB0aGF0IG9mIHRoZSBub3JtYWwgei51bmlvbigpIGNvbnN0cnVjdG9yLlxyXG4gICAgICogSG93ZXZlciwgaXQgb25seSBhbGxvd3MgYSB1bmlvbiBvZiBvYmplY3RzLCBhbGwgb2Ygd2hpY2ggbmVlZCB0byBzaGFyZSBhIGRpc2NyaW1pbmF0b3IgcHJvcGVydHkuIFRoaXMgcHJvcGVydHkgbXVzdFxyXG4gICAgICogaGF2ZSBhIGRpZmZlcmVudCB2YWx1ZSBmb3IgZWFjaCBvYmplY3QgaW4gdGhlIHVuaW9uLlxyXG4gICAgICogQHBhcmFtIGRpc2NyaW1pbmF0b3IgdGhlIG5hbWUgb2YgdGhlIGRpc2NyaW1pbmF0b3IgcHJvcGVydHlcclxuICAgICAqIEBwYXJhbSB0eXBlcyBhbiBhcnJheSBvZiBvYmplY3Qgc2NoZW1hc1xyXG4gICAgICogQHBhcmFtIHBhcmFtc1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlKGRpc2NyaW1pbmF0b3IsIG9wdGlvbnMsIHBhcmFtcykge1xyXG4gICAgICAgIC8vIEdldCBhbGwgdGhlIHZhbGlkIGRpc2NyaW1pbmF0b3IgdmFsdWVzXHJcbiAgICAgICAgY29uc3Qgb3B0aW9uc01hcCA9IG5ldyBNYXAoKTtcclxuICAgICAgICAvLyB0cnkge1xyXG4gICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JWYWx1ZXMgPSBnZXREaXNjcmltaW5hdG9yKHR5cGUuc2hhcGVbZGlzY3JpbWluYXRvcl0pO1xyXG4gICAgICAgICAgICBpZiAoIWRpc2NyaW1pbmF0b3JWYWx1ZXMpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBkaXNjcmltaW5hdG9yIHZhbHVlIGZvciBrZXkgXFxgJHtkaXNjcmltaW5hdG9yfVxcYCBjb3VsZCBub3QgYmUgZXh0cmFjdGVkIGZyb20gYWxsIHNjaGVtYSBvcHRpb25zYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBkaXNjcmltaW5hdG9yVmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uc01hcC5oYXModmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEaXNjcmltaW5hdG9yIHByb3BlcnR5ICR7U3RyaW5nKGRpc2NyaW1pbmF0b3IpfSBoYXMgZHVwbGljYXRlIHZhbHVlICR7U3RyaW5nKHZhbHVlKX1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG9wdGlvbnNNYXAuc2V0KHZhbHVlLCB0eXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFpvZERpc2NyaW1pbmF0ZWRVbmlvbih7XHJcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRGlzY3JpbWluYXRlZFVuaW9uLFxyXG4gICAgICAgICAgICBkaXNjcmltaW5hdG9yLFxyXG4gICAgICAgICAgICBvcHRpb25zLFxyXG4gICAgICAgICAgICBvcHRpb25zTWFwLFxyXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbWVyZ2VWYWx1ZXMoYSwgYikge1xyXG4gICAgY29uc3QgYVR5cGUgPSBnZXRQYXJzZWRUeXBlKGEpO1xyXG4gICAgY29uc3QgYlR5cGUgPSBnZXRQYXJzZWRUeXBlKGIpO1xyXG4gICAgaWYgKGEgPT09IGIpIHtcclxuICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZGF0YTogYSB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYVR5cGUgPT09IFpvZFBhcnNlZFR5cGUub2JqZWN0ICYmIGJUeXBlID09PSBab2RQYXJzZWRUeXBlLm9iamVjdCkge1xyXG4gICAgICAgIGNvbnN0IGJLZXlzID0gdXRpbC5vYmplY3RLZXlzKGIpO1xyXG4gICAgICAgIGNvbnN0IHNoYXJlZEtleXMgPSB1dGlsXHJcbiAgICAgICAgICAgIC5vYmplY3RLZXlzKGEpXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKGtleSkgPT4gYktleXMuaW5kZXhPZihrZXkpICE9PSAtMSk7XHJcbiAgICAgICAgY29uc3QgbmV3T2JqID0geyAuLi5hLCAuLi5iIH07XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2Ygc2hhcmVkS2V5cykge1xyXG4gICAgICAgICAgICBjb25zdCBzaGFyZWRWYWx1ZSA9IG1lcmdlVmFsdWVzKGFba2V5XSwgYltrZXldKTtcclxuICAgICAgICAgICAgaWYgKCFzaGFyZWRWYWx1ZS52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBzaGFyZWRWYWx1ZS5kYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZGF0YTogbmV3T2JqIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5hcnJheSAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5hcnJheSkge1xyXG4gICAgICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG5ld0FycmF5ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGEubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1BID0gYVtpbmRleF07XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1CID0gYltpbmRleF07XHJcbiAgICAgICAgICAgIGNvbnN0IHNoYXJlZFZhbHVlID0gbWVyZ2VWYWx1ZXMoaXRlbUEsIGl0ZW1CKTtcclxuICAgICAgICAgICAgaWYgKCFzaGFyZWRWYWx1ZS52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmV3QXJyYXkucHVzaChzaGFyZWRWYWx1ZS5kYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGRhdGE6IG5ld0FycmF5IH07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5kYXRlICYmXHJcbiAgICAgICAgYlR5cGUgPT09IFpvZFBhcnNlZFR5cGUuZGF0ZSAmJlxyXG4gICAgICAgICthID09PSArYikge1xyXG4gICAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBkYXRhOiBhIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UgfTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBab2RJbnRlcnNlY3Rpb24gZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIF9wYXJzZShpbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlUGFyc2VkID0gKHBhcnNlZExlZnQsIHBhcnNlZFJpZ2h0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpc0Fib3J0ZWQocGFyc2VkTGVmdCkgfHwgaXNBYm9ydGVkKHBhcnNlZFJpZ2h0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gbWVyZ2VWYWx1ZXMocGFyc2VkTGVmdC52YWx1ZSwgcGFyc2VkUmlnaHQudmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAoIW1lcmdlZC52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfaW50ZXJzZWN0aW9uX3R5cGVzLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXNEaXJ0eShwYXJzZWRMZWZ0KSB8fCBpc0RpcnR5KHBhcnNlZFJpZ2h0KSkge1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBtZXJnZWQuZGF0YSB9O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RlZi5sZWZ0Ll9wYXJzZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmLnJpZ2h0Ll9wYXJzZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBdKS50aGVuKChbbGVmdCwgcmlnaHRdKSA9PiBoYW5kbGVQYXJzZWQobGVmdCwgcmlnaHQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVQYXJzZWQodGhpcy5fZGVmLmxlZnQuX3BhcnNlU3luYyh7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcclxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxyXG4gICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXHJcbiAgICAgICAgICAgIH0pLCB0aGlzLl9kZWYucmlnaHQuX3BhcnNlU3luYyh7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcclxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxyXG4gICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuWm9kSW50ZXJzZWN0aW9uLmNyZWF0ZSA9IChsZWZ0LCByaWdodCwgcGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZEludGVyc2VjdGlvbih7XHJcbiAgICAgICAgbGVmdDogbGVmdCxcclxuICAgICAgICByaWdodDogcmlnaHQsXHJcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RJbnRlcnNlY3Rpb24sXHJcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxyXG4gICAgfSk7XHJcbn07XHJcbmNsYXNzIFpvZFR1cGxlIGV4dGVuZHMgWm9kVHlwZSB7XHJcbiAgICBfcGFyc2UoaW5wdXQpIHtcclxuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xyXG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5hcnJheSkge1xyXG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXHJcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5hcnJheSxcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY3R4LmRhdGEubGVuZ3RoIDwgdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXHJcbiAgICAgICAgICAgICAgICBtaW5pbXVtOiB0aGlzLl9kZWYuaXRlbXMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc3QgPSB0aGlzLl9kZWYucmVzdDtcclxuICAgICAgICBpZiAoIXJlc3QgJiYgY3R4LmRhdGEubGVuZ3RoID4gdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxyXG4gICAgICAgICAgICAgICAgbWF4aW11bTogdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpdGVtcyA9IFsuLi5jdHguZGF0YV1cclxuICAgICAgICAgICAgLm1hcCgoaXRlbSwgaXRlbUluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuX2RlZi5pdGVtc1tpdGVtSW5kZXhdIHx8IHRoaXMuX2RlZi5yZXN0O1xyXG4gICAgICAgICAgICBpZiAoIXNjaGVtYSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGl0ZW1JbmRleCkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKHgpID0+ICEheCk7IC8vIGZpbHRlciBudWxsc1xyXG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChpdGVtcykudGhlbigocmVzdWx0cykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlQXJyYXkoc3RhdHVzLCByZXN1bHRzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIGl0ZW1zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgaXRlbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pdGVtcztcclxuICAgIH1cclxuICAgIHJlc3QocmVzdCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgWm9kVHVwbGUoe1xyXG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXHJcbiAgICAgICAgICAgIHJlc3QsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuWm9kVHVwbGUuY3JlYXRlID0gKHNjaGVtYXMsIHBhcmFtcykgPT4ge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHNjaGVtYXMpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhbiBhcnJheSBvZiBzY2hlbWFzIHRvIHoudHVwbGUoWyAuLi4gXSlcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IFpvZFR1cGxlKHtcclxuICAgICAgICBpdGVtczogc2NoZW1hcyxcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFR1cGxlLFxyXG4gICAgICAgIHJlc3Q6IG51bGwsXHJcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxyXG4gICAgfSk7XHJcbn07XHJcbmNsYXNzIFpvZFJlY29yZCBleHRlbmRzIFpvZFR5cGUge1xyXG4gICAgZ2V0IGtleVNjaGVtYSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmtleVR5cGU7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWVTY2hlbWEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZVR5cGU7XHJcbiAgICB9XHJcbiAgICBfcGFyc2UoaW5wdXQpIHtcclxuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xyXG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5vYmplY3QpIHtcclxuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxyXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUub2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhaXJzID0gW107XHJcbiAgICAgICAgY29uc3Qga2V5VHlwZSA9IHRoaXMuX2RlZi5rZXlUeXBlO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY3R4LmRhdGEpIHtcclxuICAgICAgICAgICAgcGFpcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBrZXk6IGtleVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBrZXksIGN0eC5wYXRoLCBrZXkpKSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBjdHguZGF0YVtrZXldLCBjdHgucGF0aCwga2V5KSksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xyXG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RBc3luYyhzdGF0dXMsIHBhaXJzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBwYWlycyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGVsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZVR5cGU7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY3JlYXRlKGZpcnN0LCBzZWNvbmQsIHRoaXJkKSB7XHJcbiAgICAgICAgaWYgKHNlY29uZCBpbnN0YW5jZW9mIFpvZFR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RSZWNvcmQoe1xyXG4gICAgICAgICAgICAgICAga2V5VHlwZTogZmlyc3QsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZVR5cGU6IHNlY29uZCxcclxuICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUmVjb3JkLFxyXG4gICAgICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyh0aGlyZCksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFpvZFJlY29yZCh7XHJcbiAgICAgICAgICAgIGtleVR5cGU6IFpvZFN0cmluZy5jcmVhdGUoKSxcclxuICAgICAgICAgICAgdmFsdWVUeXBlOiBmaXJzdCxcclxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RSZWNvcmQsXHJcbiAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMoc2Vjb25kKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBab2RNYXAgZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIGdldCBrZXlTY2hlbWEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5rZXlUeXBlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHZhbHVlU2NoZW1hKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVUeXBlO1xyXG4gICAgfVxyXG4gICAgX3BhcnNlKGlucHV0KSB7XHJcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcclxuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUubWFwKSB7XHJcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcclxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm1hcCxcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBrZXlUeXBlID0gdGhpcy5fZGVmLmtleVR5cGU7XHJcbiAgICAgICAgY29uc3QgdmFsdWVUeXBlID0gdGhpcy5fZGVmLnZhbHVlVHlwZTtcclxuICAgICAgICBjb25zdCBwYWlycyA9IFsuLi5jdHguZGF0YS5lbnRyaWVzKCldLm1hcCgoW2tleSwgdmFsdWVdLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAga2V5OiBrZXlUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwga2V5LCBjdHgucGF0aCwgW2luZGV4LCBcImtleVwiXSkpLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlVHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIHZhbHVlLCBjdHgucGF0aCwgW2luZGV4LCBcInZhbHVlXCJdKSksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcclxuICAgICAgICAgICAgY29uc3QgZmluYWxNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHBhaXIua2V5O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcGFpci52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImFib3J0ZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiZGlydHlcIiB8fCB2YWx1ZS5zdGF0dXMgPT09IFwiZGlydHlcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZmluYWxNYXAuc2V0KGtleS52YWx1ZSwgdmFsdWUudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBmaW5hbE1hcCB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHBhaXIua2V5O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwYWlyLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImRpcnR5XCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZpbmFsTWFwLnNldChrZXkudmFsdWUsIHZhbHVlLnZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGZpbmFsTWFwIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblpvZE1hcC5jcmVhdGUgPSAoa2V5VHlwZSwgdmFsdWVUeXBlLCBwYXJhbXMpID0+IHtcclxuICAgIHJldHVybiBuZXcgWm9kTWFwKHtcclxuICAgICAgICB2YWx1ZVR5cGUsXHJcbiAgICAgICAga2V5VHlwZSxcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE1hcCxcclxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXHJcbiAgICB9KTtcclxufTtcclxuY2xhc3MgWm9kU2V0IGV4dGVuZHMgWm9kVHlwZSB7XHJcbiAgICBfcGFyc2UoaW5wdXQpIHtcclxuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xyXG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5zZXQpIHtcclxuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxyXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuc2V0LFxyXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRlZiA9IHRoaXMuX2RlZjtcclxuICAgICAgICBpZiAoZGVmLm1pblNpemUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKGN0eC5kYXRhLnNpemUgPCBkZWYubWluU2l6ZS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcclxuICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBkZWYubWluU2l6ZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInNldFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZGVmLm1pblNpemUubWVzc2FnZSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRlZi5tYXhTaXplICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChjdHguZGF0YS5zaXplID4gZGVmLm1heFNpemUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heGltdW06IGRlZi5tYXhTaXplLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWF4U2l6ZS5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB2YWx1ZVR5cGUgPSB0aGlzLl9kZWYudmFsdWVUeXBlO1xyXG4gICAgICAgIGZ1bmN0aW9uIGZpbmFsaXplU2V0KGVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZFNldCA9IG5ldyBTZXQoKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuc3RhdHVzID09PSBcImRpcnR5XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICBwYXJzZWRTZXQuYWRkKGVsZW1lbnQudmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogcGFyc2VkU2V0IH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gWy4uLmN0eC5kYXRhLnZhbHVlcygpXS5tYXAoKGl0ZW0sIGkpID0+IHZhbHVlVHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGl0ZW0sIGN0eC5wYXRoLCBpKSkpO1xyXG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChlbGVtZW50cykudGhlbigoZWxlbWVudHMpID0+IGZpbmFsaXplU2V0KGVsZW1lbnRzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmluYWxpemVTZXQoZWxlbWVudHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG1pbihtaW5TaXplLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBab2RTZXQoe1xyXG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXHJcbiAgICAgICAgICAgIG1pblNpemU6IHsgdmFsdWU6IG1pblNpemUsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbWF4KG1heFNpemUsIG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFpvZFNldCh7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcclxuICAgICAgICAgICAgbWF4U2l6ZTogeyB2YWx1ZTogbWF4U2l6ZSwgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzaXplKHNpemUsIG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5taW4oc2l6ZSwgbWVzc2FnZSkubWF4KHNpemUsIG1lc3NhZ2UpO1xyXG4gICAgfVxyXG4gICAgbm9uZW1wdHkobWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1pbigxLCBtZXNzYWdlKTtcclxuICAgIH1cclxufVxyXG5ab2RTZXQuY3JlYXRlID0gKHZhbHVlVHlwZSwgcGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZFNldCh7XHJcbiAgICAgICAgdmFsdWVUeXBlLFxyXG4gICAgICAgIG1pblNpemU6IG51bGwsXHJcbiAgICAgICAgbWF4U2l6ZTogbnVsbCxcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFNldCxcclxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXHJcbiAgICB9KTtcclxufTtcclxuY2xhc3MgWm9kRnVuY3Rpb24gZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy52YWxpZGF0ZSA9IHRoaXMuaW1wbGVtZW50O1xyXG4gICAgfVxyXG4gICAgX3BhcnNlKGlucHV0KSB7XHJcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XHJcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLmZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xyXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcclxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmZ1bmN0aW9uLFxyXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIG1ha2VBcmdzSXNzdWUoYXJncywgZXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1ha2VJc3N1ZSh7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiBhcmdzLFxyXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXHJcbiAgICAgICAgICAgICAgICBlcnJvck1hcHM6IFtcclxuICAgICAgICAgICAgICAgICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCxcclxuICAgICAgICAgICAgICAgICAgICBjdHguc2NoZW1hRXJyb3JNYXAsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0RXJyb3JNYXAoKSxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvck1hcCxcclxuICAgICAgICAgICAgICAgIF0uZmlsdGVyKCh4KSA9PiAhIXgpLFxyXG4gICAgICAgICAgICAgICAgaXNzdWVEYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfYXJndW1lbnRzLFxyXG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c0Vycm9yOiBlcnJvcixcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBtYWtlUmV0dXJuc0lzc3VlKHJldHVybnMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYWtlSXNzdWUoe1xyXG4gICAgICAgICAgICAgICAgZGF0YTogcmV0dXJucyxcclxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxyXG4gICAgICAgICAgICAgICAgZXJyb3JNYXBzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAsXHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LnNjaGVtYUVycm9yTWFwLFxyXG4gICAgICAgICAgICAgICAgICAgIGdldEVycm9yTWFwKCksXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNYXAsXHJcbiAgICAgICAgICAgICAgICBdLmZpbHRlcigoeCkgPT4gISF4KSxcclxuICAgICAgICAgICAgICAgIGlzc3VlRGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3JldHVybl90eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblR5cGVFcnJvcjogZXJyb3IsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGFyYW1zID0geyBlcnJvck1hcDogY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAgfTtcclxuICAgICAgICBjb25zdCBmbiA9IGN0eC5kYXRhO1xyXG4gICAgICAgIGlmICh0aGlzLl9kZWYucmV0dXJucyBpbnN0YW5jZW9mIFpvZFByb21pc2UpIHtcclxuICAgICAgICAgICAgLy8gV291bGQgbG92ZSBhIHdheSB0byBhdm9pZCBkaXNhYmxpbmcgdGhpcyBydWxlLCBidXQgd2UgbmVlZFxyXG4gICAgICAgICAgICAvLyBhbiBhbGlhcyAodXNpbmcgYW4gYXJyb3cgZnVuY3Rpb24gd2FzIHdoYXQgY2F1c2VkIDI2NTEpLlxyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcclxuICAgICAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gT0soYXN5bmMgZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFpvZEVycm9yKFtdKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZEFyZ3MgPSBhd2FpdCBtZS5fZGVmLmFyZ3NcclxuICAgICAgICAgICAgICAgICAgICAucGFyc2VBc3luYyhhcmdzLCBwYXJhbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuYWRkSXNzdWUobWFrZUFyZ3NJc3N1ZShhcmdzLCBlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFJlZmxlY3QuYXBwbHkoZm4sIHRoaXMsIHBhcnNlZEFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkUmV0dXJucyA9IGF3YWl0IG1lLl9kZWYucmV0dXJucy5fZGVmLnR5cGVcclxuICAgICAgICAgICAgICAgICAgICAucGFyc2VBc3luYyhyZXN1bHQsIHBhcmFtcylcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvci5hZGRJc3N1ZShtYWtlUmV0dXJuc0lzc3VlKHJlc3VsdCwgZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkUmV0dXJucztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBXb3VsZCBsb3ZlIGEgd2F5IHRvIGF2b2lkIGRpc2FibGluZyB0aGlzIHJ1bGUsIGJ1dCB3ZSBuZWVkXHJcbiAgICAgICAgICAgIC8vIGFuIGFsaWFzICh1c2luZyBhbiBhcnJvdyBmdW5jdGlvbiB3YXMgd2hhdCBjYXVzZWQgMjY1MSkuXHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xyXG4gICAgICAgICAgICBjb25zdCBtZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBPSyhmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkQXJncyA9IG1lLl9kZWYuYXJncy5zYWZlUGFyc2UoYXJncywgcGFyYW1zKTtcclxuICAgICAgICAgICAgICAgIGlmICghcGFyc2VkQXJncy5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFpvZEVycm9yKFttYWtlQXJnc0lzc3VlKGFyZ3MsIHBhcnNlZEFyZ3MuZXJyb3IpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LmFwcGx5KGZuLCB0aGlzLCBwYXJzZWRBcmdzLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkUmV0dXJucyA9IG1lLl9kZWYucmV0dXJucy5zYWZlUGFyc2UocmVzdWx0LCBwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFwYXJzZWRSZXR1cm5zLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgWm9kRXJyb3IoW21ha2VSZXR1cm5zSXNzdWUocmVzdWx0LCBwYXJzZWRSZXR1cm5zLmVycm9yKV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlZFJldHVybnMuZGF0YTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcGFyYW1ldGVycygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmFyZ3M7XHJcbiAgICB9XHJcbiAgICByZXR1cm5UeXBlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYucmV0dXJucztcclxuICAgIH1cclxuICAgIGFyZ3MoLi4uaXRlbXMpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFpvZEZ1bmN0aW9uKHtcclxuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxyXG4gICAgICAgICAgICBhcmdzOiBab2RUdXBsZS5jcmVhdGUoaXRlbXMpLnJlc3QoWm9kVW5rbm93bi5jcmVhdGUoKSksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm5zKHJldHVyblR5cGUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFpvZEZ1bmN0aW9uKHtcclxuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxyXG4gICAgICAgICAgICByZXR1cm5zOiByZXR1cm5UeXBlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaW1wbGVtZW50KGZ1bmMpIHtcclxuICAgICAgICBjb25zdCB2YWxpZGF0ZWRGdW5jID0gdGhpcy5wYXJzZShmdW5jKTtcclxuICAgICAgICByZXR1cm4gdmFsaWRhdGVkRnVuYztcclxuICAgIH1cclxuICAgIHN0cmljdEltcGxlbWVudChmdW5jKSB7XHJcbiAgICAgICAgY29uc3QgdmFsaWRhdGVkRnVuYyA9IHRoaXMucGFyc2UoZnVuYyk7XHJcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlZEZ1bmM7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY3JlYXRlKGFyZ3MsIHJldHVybnMsIHBhcmFtcykge1xyXG4gICAgICAgIHJldHVybiBuZXcgWm9kRnVuY3Rpb24oe1xyXG4gICAgICAgICAgICBhcmdzOiAoYXJnc1xyXG4gICAgICAgICAgICAgICAgPyBhcmdzXHJcbiAgICAgICAgICAgICAgICA6IFpvZFR1cGxlLmNyZWF0ZShbXSkucmVzdChab2RVbmtub3duLmNyZWF0ZSgpKSksXHJcbiAgICAgICAgICAgIHJldHVybnM6IHJldHVybnMgfHwgWm9kVW5rbm93bi5jcmVhdGUoKSxcclxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RGdW5jdGlvbixcclxuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIFpvZExhenkgZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIGdldCBzY2hlbWEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5nZXR0ZXIoKTtcclxuICAgIH1cclxuICAgIF9wYXJzZShpbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xyXG4gICAgICAgIGNvbnN0IGxhenlTY2hlbWEgPSB0aGlzLl9kZWYuZ2V0dGVyKCk7XHJcbiAgICAgICAgcmV0dXJuIGxhenlTY2hlbWEuX3BhcnNlKHsgZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KTtcclxuICAgIH1cclxufVxyXG5ab2RMYXp5LmNyZWF0ZSA9IChnZXR0ZXIsIHBhcmFtcykgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBab2RMYXp5KHtcclxuICAgICAgICBnZXR0ZXI6IGdldHRlcixcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZExhenksXHJcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxyXG4gICAgfSk7XHJcbn07XHJcbmNsYXNzIFpvZExpdGVyYWwgZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIF9wYXJzZShpbnB1dCkge1xyXG4gICAgICAgIGlmIChpbnB1dC5kYXRhICE9PSB0aGlzLl9kZWYudmFsdWUpIHtcclxuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xyXG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcclxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX2xpdGVyYWwsXHJcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogdGhpcy5fZGVmLnZhbHVlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZTogaW5wdXQuZGF0YSB9O1xyXG4gICAgfVxyXG4gICAgZ2V0IHZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWU7XHJcbiAgICB9XHJcbn1cclxuWm9kTGl0ZXJhbC5jcmVhdGUgPSAodmFsdWUsIHBhcmFtcykgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBab2RMaXRlcmFsKHtcclxuICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RMaXRlcmFsLFxyXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcclxuICAgIH0pO1xyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVab2RFbnVtKHZhbHVlcywgcGFyYW1zKSB7XHJcbiAgICByZXR1cm4gbmV3IFpvZEVudW0oe1xyXG4gICAgICAgIHZhbHVlcyxcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVudW0sXHJcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxyXG4gICAgfSk7XHJcbn1cclxuY2xhc3MgWm9kRW51bSBleHRlbmRzIFpvZFR5cGUge1xyXG4gICAgX3BhcnNlKGlucHV0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dC5kYXRhICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB0aGlzLl9kZWYudmFsdWVzO1xyXG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiB1dGlsLmpvaW5WYWx1ZXMoZXhwZWN0ZWRWYWx1ZXMpLFxyXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxyXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fZGVmLnZhbHVlcy5pbmRleE9mKGlucHV0LmRhdGEpID09PSAtMSkge1xyXG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdGhpcy5fZGVmLnZhbHVlcztcclxuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LmRhdGEsXHJcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uczogZXhwZWN0ZWRWYWx1ZXMsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xyXG4gICAgfVxyXG4gICAgZ2V0IG9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZXM7XHJcbiAgICB9XHJcbiAgICBnZXQgZW51bSgpIHtcclxuICAgICAgICBjb25zdCBlbnVtVmFsdWVzID0ge307XHJcbiAgICAgICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5fZGVmLnZhbHVlcykge1xyXG4gICAgICAgICAgICBlbnVtVmFsdWVzW3ZhbF0gPSB2YWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbnVtVmFsdWVzO1xyXG4gICAgfVxyXG4gICAgZ2V0IFZhbHVlcygpIHtcclxuICAgICAgICBjb25zdCBlbnVtVmFsdWVzID0ge307XHJcbiAgICAgICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5fZGVmLnZhbHVlcykge1xyXG4gICAgICAgICAgICBlbnVtVmFsdWVzW3ZhbF0gPSB2YWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbnVtVmFsdWVzO1xyXG4gICAgfVxyXG4gICAgZ2V0IEVudW0oKSB7XHJcbiAgICAgICAgY29uc3QgZW51bVZhbHVlcyA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3QgdmFsIG9mIHRoaXMuX2RlZi52YWx1ZXMpIHtcclxuICAgICAgICAgICAgZW51bVZhbHVlc1t2YWxdID0gdmFsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZW51bVZhbHVlcztcclxuICAgIH1cclxuICAgIGV4dHJhY3QodmFsdWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIFpvZEVudW0uY3JlYXRlKHZhbHVlcyk7XHJcbiAgICB9XHJcbiAgICBleGNsdWRlKHZhbHVlcykge1xyXG4gICAgICAgIHJldHVybiBab2RFbnVtLmNyZWF0ZSh0aGlzLm9wdGlvbnMuZmlsdGVyKChvcHQpID0+ICF2YWx1ZXMuaW5jbHVkZXMob3B0KSkpO1xyXG4gICAgfVxyXG59XHJcblpvZEVudW0uY3JlYXRlID0gY3JlYXRlWm9kRW51bTtcclxuY2xhc3MgWm9kTmF0aXZlRW51bSBleHRlbmRzIFpvZFR5cGUge1xyXG4gICAgX3BhcnNlKGlucHV0KSB7XHJcbiAgICAgICAgY29uc3QgbmF0aXZlRW51bVZhbHVlcyA9IHV0aWwuZ2V0VmFsaWRFbnVtVmFsdWVzKHRoaXMuX2RlZi52YWx1ZXMpO1xyXG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcclxuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuc3RyaW5nICYmXHJcbiAgICAgICAgICAgIGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm51bWJlcikge1xyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFZhbHVlcyA9IHV0aWwub2JqZWN0VmFsdWVzKG5hdGl2ZUVudW1WYWx1ZXMpO1xyXG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiB1dGlsLmpvaW5WYWx1ZXMoZXhwZWN0ZWRWYWx1ZXMpLFxyXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxyXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmF0aXZlRW51bVZhbHVlcy5pbmRleE9mKGlucHV0LmRhdGEpID09PSAtMSkge1xyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFZhbHVlcyA9IHV0aWwub2JqZWN0VmFsdWVzKG5hdGl2ZUVudW1WYWx1ZXMpO1xyXG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcclxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX2VudW1fdmFsdWUsXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBleHBlY3RlZFZhbHVlcyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XHJcbiAgICB9XHJcbiAgICBnZXQgZW51bSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlcztcclxuICAgIH1cclxufVxyXG5ab2ROYXRpdmVFbnVtLmNyZWF0ZSA9ICh2YWx1ZXMsIHBhcmFtcykgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBab2ROYXRpdmVFbnVtKHtcclxuICAgICAgICB2YWx1ZXM6IHZhbHVlcyxcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hdGl2ZUVudW0sXHJcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxyXG4gICAgfSk7XHJcbn07XHJcbmNsYXNzIFpvZFByb21pc2UgZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIHVud3JhcCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGU7XHJcbiAgICB9XHJcbiAgICBfcGFyc2UoaW5wdXQpIHtcclxuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcclxuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUucHJvbWlzZSAmJlxyXG4gICAgICAgICAgICBjdHguY29tbW9uLmFzeW5jID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXHJcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5wcm9taXNlLFxyXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHByb21pc2lmaWVkID0gY3R4LnBhcnNlZFR5cGUgPT09IFpvZFBhcnNlZFR5cGUucHJvbWlzZVxyXG4gICAgICAgICAgICA/IGN0eC5kYXRhXHJcbiAgICAgICAgICAgIDogUHJvbWlzZS5yZXNvbHZlKGN0eC5kYXRhKTtcclxuICAgICAgICByZXR1cm4gT0socHJvbWlzaWZpZWQudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGUucGFyc2VBc3luYyhkYXRhLCB7XHJcbiAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcclxuICAgICAgICAgICAgICAgIGVycm9yTWFwOiBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcblpvZFByb21pc2UuY3JlYXRlID0gKHNjaGVtYSwgcGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZFByb21pc2Uoe1xyXG4gICAgICAgIHR5cGU6IHNjaGVtYSxcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFByb21pc2UsXHJcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxyXG4gICAgfSk7XHJcbn07XHJcbmNsYXNzIFpvZEVmZmVjdHMgZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIGlubmVyVHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnNjaGVtYTtcclxuICAgIH1cclxuICAgIHNvdXJjZVR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWEuX2RlZi50eXBlTmFtZSA9PT0gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHNcclxuICAgICAgICAgICAgPyB0aGlzLl9kZWYuc2NoZW1hLnNvdXJjZVR5cGUoKVxyXG4gICAgICAgICAgICA6IHRoaXMuX2RlZi5zY2hlbWE7XHJcbiAgICB9XHJcbiAgICBfcGFyc2UoaW5wdXQpIHtcclxuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xyXG4gICAgICAgIGNvbnN0IGVmZmVjdCA9IHRoaXMuX2RlZi5lZmZlY3QgfHwgbnVsbDtcclxuICAgICAgICBjb25zdCBjaGVja0N0eCA9IHtcclxuICAgICAgICAgICAgYWRkSXNzdWU6IChhcmcpID0+IHtcclxuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwgYXJnKTtcclxuICAgICAgICAgICAgICAgIGlmIChhcmcuZmF0YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQgcGF0aCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdHgucGF0aDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNoZWNrQ3R4LmFkZElzc3VlID0gY2hlY2tDdHguYWRkSXNzdWUuYmluZChjaGVja0N0eCk7XHJcbiAgICAgICAgaWYgKGVmZmVjdC50eXBlID09PSBcInByZXByb2Nlc3NcIikge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9jZXNzZWQgPSBlZmZlY3QudHJhbnNmb3JtKGN0eC5kYXRhLCBjaGVja0N0eCk7XHJcbiAgICAgICAgICAgIGlmIChjdHguY29tbW9uLmlzc3Vlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBcImRpcnR5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN0eC5kYXRhLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwcm9jZXNzZWQpLnRoZW4oKHByb2Nlc3NlZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcHJvY2Vzc2VkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZVN5bmMoe1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHByb2Nlc3NlZCxcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlZmZlY3QudHlwZSA9PT0gXCJyZWZpbmVtZW50XCIpIHtcclxuICAgICAgICAgICAgY29uc3QgZXhlY3V0ZVJlZmluZW1lbnQgPSAoYWNjXHJcbiAgICAgICAgICAgIC8vIGVmZmVjdDogUmVmaW5lbWVudEVmZmVjdDxhbnk+XHJcbiAgICAgICAgICAgICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZWZmZWN0LnJlZmluZW1lbnQoYWNjLCBjaGVja0N0eCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXN5bmMgcmVmaW5lbWVudCBlbmNvdW50ZXJlZCBkdXJpbmcgc3luY2hyb25vdXMgcGFyc2Ugb3BlcmF0aW9uLiBVc2UgLnBhcnNlQXN5bmMgaW5zdGVhZC5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlubmVyID0gdGhpcy5fZGVmLnNjaGVtYS5fcGFyc2VTeW5jKHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlubmVyLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImRpcnR5XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gdmFsdWUgaXMgaWdub3JlZFxyXG4gICAgICAgICAgICAgICAgZXhlY3V0ZVJlZmluZW1lbnQoaW5uZXIudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbm5lci52YWx1ZSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWFcclxuICAgICAgICAgICAgICAgICAgICAuX3BhcnNlQXN5bmMoeyBkYXRhOiBjdHguZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGlubmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlubmVyLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiZGlydHlcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4ZWN1dGVSZWZpbmVtZW50KGlubmVyLnZhbHVlKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbm5lci52YWx1ZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVmZmVjdC50eXBlID09PSBcInRyYW5zZm9ybVwiKSB7XHJcbiAgICAgICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZSA9IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlU3luYyh7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZChiYXNlKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmFzZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGVmZmVjdC50cmFuc2Zvcm0oYmFzZS52YWx1ZSwgY2hlY2tDdHgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFzeW5jaHJvbm91cyB0cmFuc2Zvcm0gZW5jb3VudGVyZWQgZHVyaW5nIHN5bmNocm9ub3VzIHBhcnNlIG9wZXJhdGlvbi4gVXNlIC5wYXJzZUFzeW5jIGluc3RlYWQuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IHJlc3VsdCB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWFcclxuICAgICAgICAgICAgICAgICAgICAuX3BhcnNlQXN5bmMoeyBkYXRhOiBjdHguZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGJhc2UpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQoYmFzZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZWZmZWN0LnRyYW5zZm9ybShiYXNlLnZhbHVlLCBjaGVja0N0eCkpLnRoZW4oKHJlc3VsdCkgPT4gKHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiByZXN1bHQgfSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdXRpbC5hc3NlcnROZXZlcihlZmZlY3QpO1xyXG4gICAgfVxyXG59XHJcblpvZEVmZmVjdHMuY3JlYXRlID0gKHNjaGVtYSwgZWZmZWN0LCBwYXJhbXMpID0+IHtcclxuICAgIHJldHVybiBuZXcgWm9kRWZmZWN0cyh7XHJcbiAgICAgICAgc2NoZW1hLFxyXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0cyxcclxuICAgICAgICBlZmZlY3QsXHJcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxyXG4gICAgfSk7XHJcbn07XHJcblpvZEVmZmVjdHMuY3JlYXRlV2l0aFByZXByb2Nlc3MgPSAocHJlcHJvY2Vzcywgc2NoZW1hLCBwYXJhbXMpID0+IHtcclxuICAgIHJldHVybiBuZXcgWm9kRWZmZWN0cyh7XHJcbiAgICAgICAgc2NoZW1hLFxyXG4gICAgICAgIGVmZmVjdDogeyB0eXBlOiBcInByZXByb2Nlc3NcIiwgdHJhbnNmb3JtOiBwcmVwcm9jZXNzIH0sXHJcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFZmZlY3RzLFxyXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcclxuICAgIH0pO1xyXG59O1xyXG5jbGFzcyBab2RPcHRpb25hbCBleHRlbmRzIFpvZFR5cGUge1xyXG4gICAgX3BhcnNlKGlucHV0KSB7XHJcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xyXG4gICAgICAgIGlmIChwYXJzZWRUeXBlID09PSBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gT0sodW5kZWZpbmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKGlucHV0KTtcclxuICAgIH1cclxuICAgIHVud3JhcCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZTtcclxuICAgIH1cclxufVxyXG5ab2RPcHRpb25hbC5jcmVhdGUgPSAodHlwZSwgcGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZE9wdGlvbmFsKHtcclxuICAgICAgICBpbm5lclR5cGU6IHR5cGUsXHJcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPcHRpb25hbCxcclxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXHJcbiAgICB9KTtcclxufTtcclxuY2xhc3MgWm9kTnVsbGFibGUgZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIF9wYXJzZShpbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcclxuICAgICAgICBpZiAocGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5udWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBPSyhudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKGlucHV0KTtcclxuICAgIH1cclxuICAgIHVud3JhcCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZTtcclxuICAgIH1cclxufVxyXG5ab2ROdWxsYWJsZS5jcmVhdGUgPSAodHlwZSwgcGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZE51bGxhYmxlKHtcclxuICAgICAgICBpbm5lclR5cGU6IHR5cGUsXHJcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROdWxsYWJsZSxcclxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXHJcbiAgICB9KTtcclxufTtcclxuY2xhc3MgWm9kRGVmYXVsdCBleHRlbmRzIFpvZFR5cGUge1xyXG4gICAgX3BhcnNlKGlucHV0KSB7XHJcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XHJcbiAgICAgICAgbGV0IGRhdGEgPSBjdHguZGF0YTtcclxuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgPT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLl9kZWYuZGVmYXVsdFZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZSh7XHJcbiAgICAgICAgICAgIGRhdGEsXHJcbiAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxyXG4gICAgICAgICAgICBwYXJlbnQ6IGN0eCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJlbW92ZURlZmF1bHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XHJcbiAgICB9XHJcbn1cclxuWm9kRGVmYXVsdC5jcmVhdGUgPSAodHlwZSwgcGFyYW1zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFpvZERlZmF1bHQoe1xyXG4gICAgICAgIGlubmVyVHlwZTogdHlwZSxcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERlZmF1bHQsXHJcbiAgICAgICAgZGVmYXVsdFZhbHVlOiB0eXBlb2YgcGFyYW1zLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIlxyXG4gICAgICAgICAgICA/IHBhcmFtcy5kZWZhdWx0XHJcbiAgICAgICAgICAgIDogKCkgPT4gcGFyYW1zLmRlZmF1bHQsXHJcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxyXG4gICAgfSk7XHJcbn07XHJcbmNsYXNzIFpvZENhdGNoIGV4dGVuZHMgWm9kVHlwZSB7XHJcbiAgICBfcGFyc2UoaW5wdXQpIHtcclxuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcclxuICAgICAgICAvLyBuZXdDdHggaXMgdXNlZCB0byBub3QgY29sbGVjdCBpc3N1ZXMgZnJvbSBpbm5lciB0eXBlcyBpbiBjdHhcclxuICAgICAgICBjb25zdCBuZXdDdHggPSB7XHJcbiAgICAgICAgICAgIC4uLmN0eCxcclxuICAgICAgICAgICAgY29tbW9uOiB7XHJcbiAgICAgICAgICAgICAgICAuLi5jdHguY29tbW9uLFxyXG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKHtcclxuICAgICAgICAgICAgZGF0YTogbmV3Q3R4LmRhdGEsXHJcbiAgICAgICAgICAgIHBhdGg6IG5ld0N0eC5wYXRoLFxyXG4gICAgICAgICAgICBwYXJlbnQ6IHtcclxuICAgICAgICAgICAgICAgIC4uLm5ld0N0eCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoaXNBc3luYyhyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogXCJ2YWxpZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQuc3RhdHVzID09PSBcInZhbGlkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZXN1bHQudmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9kZWYuY2F0Y2hWYWx1ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQgZXJyb3IoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RFcnJvcihuZXdDdHguY29tbW9uLmlzc3Vlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IG5ld0N0eC5kYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHN0YXR1czogXCJ2YWxpZFwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdC5zdGF0dXMgPT09IFwidmFsaWRcIlxyXG4gICAgICAgICAgICAgICAgICAgID8gcmVzdWx0LnZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9kZWYuY2F0Y2hWYWx1ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldCBlcnJvcigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgWm9kRXJyb3IobmV3Q3R4LmNvbW1vbi5pc3N1ZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogbmV3Q3R4LmRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVtb3ZlQ2F0Y2goKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XHJcbiAgICB9XHJcbn1cclxuWm9kQ2F0Y2guY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBab2RDYXRjaCh7XHJcbiAgICAgICAgaW5uZXJUeXBlOiB0eXBlLFxyXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQ2F0Y2gsXHJcbiAgICAgICAgY2F0Y2hWYWx1ZTogdHlwZW9mIHBhcmFtcy5jYXRjaCA9PT0gXCJmdW5jdGlvblwiID8gcGFyYW1zLmNhdGNoIDogKCkgPT4gcGFyYW1zLmNhdGNoLFxyXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcclxuICAgIH0pO1xyXG59O1xyXG5jbGFzcyBab2ROYU4gZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIF9wYXJzZShpbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcclxuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5uYW4pIHtcclxuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xyXG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcclxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXHJcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5uYW4sXHJcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBpbnB1dC5kYXRhIH07XHJcbiAgICB9XHJcbn1cclxuWm9kTmFOLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcclxuICAgIHJldHVybiBuZXcgWm9kTmFOKHtcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hTixcclxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXHJcbiAgICB9KTtcclxufTtcclxuY29uc3QgQlJBTkQgPSBTeW1ib2woXCJ6b2RfYnJhbmRcIik7XHJcbmNsYXNzIFpvZEJyYW5kZWQgZXh0ZW5kcyBab2RUeXBlIHtcclxuICAgIF9wYXJzZShpbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBjdHguZGF0YTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGUuX3BhcnNlKHtcclxuICAgICAgICAgICAgZGF0YSxcclxuICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXHJcbiAgICAgICAgICAgIHBhcmVudDogY3R4LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdW53cmFwKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBab2RQaXBlbGluZSBleHRlbmRzIFpvZFR5cGUge1xyXG4gICAgX3BhcnNlKGlucHV0KSB7XHJcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcclxuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xyXG4gICAgICAgICAgICBjb25zdCBoYW5kbGVBc3luYyA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluUmVzdWx0ID0gYXdhaXQgdGhpcy5fZGVmLmluLl9wYXJzZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluUmVzdWx0LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5SZXN1bHQuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRElSVFkoaW5SZXN1bHQudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5vdXQuX3BhcnNlQXN5bmMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBpblJlc3VsdC52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlQXN5bmMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluUmVzdWx0ID0gdGhpcy5fZGVmLmluLl9wYXJzZVN5bmMoe1xyXG4gICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXHJcbiAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcclxuICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGluUmVzdWx0LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcclxuICAgICAgICAgICAgaWYgKGluUmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBcImRpcnR5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGluUmVzdWx0LnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYub3V0Ll9wYXJzZVN5bmMoe1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGluUmVzdWx0LnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY3JlYXRlKGEsIGIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFpvZFBpcGVsaW5lKHtcclxuICAgICAgICAgICAgaW46IGEsXHJcbiAgICAgICAgICAgIG91dDogYixcclxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RQaXBlbGluZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBab2RSZWFkb25seSBleHRlbmRzIFpvZFR5cGUge1xyXG4gICAgX3BhcnNlKGlucHV0KSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fZGVmLmlubmVyVHlwZS5fcGFyc2UoaW5wdXQpO1xyXG4gICAgICAgIGlmIChpc1ZhbGlkKHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnZhbHVlID0gT2JqZWN0LmZyZWV6ZShyZXN1bHQudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcblpvZFJlYWRvbmx5LmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcclxuICAgIHJldHVybiBuZXcgWm9kUmVhZG9ubHkoe1xyXG4gICAgICAgIGlubmVyVHlwZTogdHlwZSxcclxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFJlYWRvbmx5LFxyXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcclxuICAgIH0pO1xyXG59O1xyXG5jb25zdCBjdXN0b20gPSAoY2hlY2ssIHBhcmFtcyA9IHt9LCBcclxuLyoqXHJcbiAqIEBkZXByZWNhdGVkXHJcbiAqXHJcbiAqIFBhc3MgYGZhdGFsYCBpbnRvIHRoZSBwYXJhbXMgb2JqZWN0IGluc3RlYWQ6XHJcbiAqXHJcbiAqIGBgYHRzXHJcbiAqIHouc3RyaW5nKCkuY3VzdG9tKCh2YWwpID0+IHZhbC5sZW5ndGggPiA1LCB7IGZhdGFsOiBmYWxzZSB9KVxyXG4gKiBgYGBcclxuICpcclxuICovXHJcbmZhdGFsKSA9PiB7XHJcbiAgICBpZiAoY2hlY2spXHJcbiAgICAgICAgcmV0dXJuIFpvZEFueS5jcmVhdGUoKS5zdXBlclJlZmluZSgoZGF0YSwgY3R4KSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgICAgIGlmICghY2hlY2soZGF0YSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHAgPSB0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcclxuICAgICAgICAgICAgICAgICAgICA/IHBhcmFtcyhkYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgIDogdHlwZW9mIHBhcmFtcyA9PT0gXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHsgbWVzc2FnZTogcGFyYW1zIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBwYXJhbXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBfZmF0YWwgPSAoX2IgPSAoX2EgPSBwLmZhdGFsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYXRhbCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHAyID0gdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2U6IHAgfSA6IHA7XHJcbiAgICAgICAgICAgICAgICBjdHguYWRkSXNzdWUoeyBjb2RlOiBcImN1c3RvbVwiLCAuLi5wMiwgZmF0YWw6IF9mYXRhbCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgcmV0dXJuIFpvZEFueS5jcmVhdGUoKTtcclxufTtcclxuY29uc3QgbGF0ZSA9IHtcclxuICAgIG9iamVjdDogWm9kT2JqZWN0LmxhenljcmVhdGUsXHJcbn07XHJcbnZhciBab2RGaXJzdFBhcnR5VHlwZUtpbmQ7XHJcbihmdW5jdGlvbiAoWm9kRmlyc3RQYXJ0eVR5cGVLaW5kKSB7XHJcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RTdHJpbmdcIl0gPSBcIlpvZFN0cmluZ1wiO1xyXG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTnVtYmVyXCJdID0gXCJab2ROdW1iZXJcIjtcclxuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE5hTlwiXSA9IFwiWm9kTmFOXCI7XHJcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RCaWdJbnRcIl0gPSBcIlpvZEJpZ0ludFwiO1xyXG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kQm9vbGVhblwiXSA9IFwiWm9kQm9vbGVhblwiO1xyXG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRGF0ZVwiXSA9IFwiWm9kRGF0ZVwiO1xyXG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kU3ltYm9sXCJdID0gXCJab2RTeW1ib2xcIjtcclxuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFVuZGVmaW5lZFwiXSA9IFwiWm9kVW5kZWZpbmVkXCI7XHJcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROdWxsXCJdID0gXCJab2ROdWxsXCI7XHJcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RBbnlcIl0gPSBcIlpvZEFueVwiO1xyXG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVW5rbm93blwiXSA9IFwiWm9kVW5rbm93blwiO1xyXG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTmV2ZXJcIl0gPSBcIlpvZE5ldmVyXCI7XHJcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RWb2lkXCJdID0gXCJab2RWb2lkXCI7XHJcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RBcnJheVwiXSA9IFwiWm9kQXJyYXlcIjtcclxuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE9iamVjdFwiXSA9IFwiWm9kT2JqZWN0XCI7XHJcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RVbmlvblwiXSA9IFwiWm9kVW5pb25cIjtcclxuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZERpc2NyaW1pbmF0ZWRVbmlvblwiXSA9IFwiWm9kRGlzY3JpbWluYXRlZFVuaW9uXCI7XHJcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RJbnRlcnNlY3Rpb25cIl0gPSBcIlpvZEludGVyc2VjdGlvblwiO1xyXG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVHVwbGVcIl0gPSBcIlpvZFR1cGxlXCI7XHJcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RSZWNvcmRcIl0gPSBcIlpvZFJlY29yZFwiO1xyXG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTWFwXCJdID0gXCJab2RNYXBcIjtcclxuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFNldFwiXSA9IFwiWm9kU2V0XCI7XHJcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RGdW5jdGlvblwiXSA9IFwiWm9kRnVuY3Rpb25cIjtcclxuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZExhenlcIl0gPSBcIlpvZExhenlcIjtcclxuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZExpdGVyYWxcIl0gPSBcIlpvZExpdGVyYWxcIjtcclxuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEVudW1cIl0gPSBcIlpvZEVudW1cIjtcclxuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEVmZmVjdHNcIl0gPSBcIlpvZEVmZmVjdHNcIjtcclxuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE5hdGl2ZUVudW1cIl0gPSBcIlpvZE5hdGl2ZUVudW1cIjtcclxuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE9wdGlvbmFsXCJdID0gXCJab2RPcHRpb25hbFwiO1xyXG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTnVsbGFibGVcIl0gPSBcIlpvZE51bGxhYmxlXCI7XHJcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2REZWZhdWx0XCJdID0gXCJab2REZWZhdWx0XCI7XHJcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RDYXRjaFwiXSA9IFwiWm9kQ2F0Y2hcIjtcclxuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFByb21pc2VcIl0gPSBcIlpvZFByb21pc2VcIjtcclxuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEJyYW5kZWRcIl0gPSBcIlpvZEJyYW5kZWRcIjtcclxuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFBpcGVsaW5lXCJdID0gXCJab2RQaXBlbGluZVwiO1xyXG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kUmVhZG9ubHlcIl0gPSBcIlpvZFJlYWRvbmx5XCI7XHJcbn0pKFpvZEZpcnN0UGFydHlUeXBlS2luZCB8fCAoWm9kRmlyc3RQYXJ0eVR5cGVLaW5kID0ge30pKTtcclxuY29uc3QgaW5zdGFuY2VPZlR5cGUgPSAoXHJcbi8vIGNvbnN0IGluc3RhbmNlT2ZUeXBlID0gPFQgZXh0ZW5kcyBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KFxyXG5jbHMsIHBhcmFtcyA9IHtcclxuICAgIG1lc3NhZ2U6IGBJbnB1dCBub3QgaW5zdGFuY2Ugb2YgJHtjbHMubmFtZX1gLFxyXG59KSA9PiBjdXN0b20oKGRhdGEpID0+IGRhdGEgaW5zdGFuY2VvZiBjbHMsIHBhcmFtcyk7XHJcbmNvbnN0IHN0cmluZ1R5cGUgPSBab2RTdHJpbmcuY3JlYXRlO1xyXG5jb25zdCBudW1iZXJUeXBlID0gWm9kTnVtYmVyLmNyZWF0ZTtcclxuY29uc3QgbmFuVHlwZSA9IFpvZE5hTi5jcmVhdGU7XHJcbmNvbnN0IGJpZ0ludFR5cGUgPSBab2RCaWdJbnQuY3JlYXRlO1xyXG5jb25zdCBib29sZWFuVHlwZSA9IFpvZEJvb2xlYW4uY3JlYXRlO1xyXG5jb25zdCBkYXRlVHlwZSA9IFpvZERhdGUuY3JlYXRlO1xyXG5jb25zdCBzeW1ib2xUeXBlID0gWm9kU3ltYm9sLmNyZWF0ZTtcclxuY29uc3QgdW5kZWZpbmVkVHlwZSA9IFpvZFVuZGVmaW5lZC5jcmVhdGU7XHJcbmNvbnN0IG51bGxUeXBlID0gWm9kTnVsbC5jcmVhdGU7XHJcbmNvbnN0IGFueVR5cGUgPSBab2RBbnkuY3JlYXRlO1xyXG5jb25zdCB1bmtub3duVHlwZSA9IFpvZFVua25vd24uY3JlYXRlO1xyXG5jb25zdCBuZXZlclR5cGUgPSBab2ROZXZlci5jcmVhdGU7XHJcbmNvbnN0IHZvaWRUeXBlID0gWm9kVm9pZC5jcmVhdGU7XHJcbmNvbnN0IGFycmF5VHlwZSA9IFpvZEFycmF5LmNyZWF0ZTtcclxuY29uc3Qgb2JqZWN0VHlwZSA9IFpvZE9iamVjdC5jcmVhdGU7XHJcbmNvbnN0IHN0cmljdE9iamVjdFR5cGUgPSBab2RPYmplY3Quc3RyaWN0Q3JlYXRlO1xyXG5jb25zdCB1bmlvblR5cGUgPSBab2RVbmlvbi5jcmVhdGU7XHJcbmNvbnN0IGRpc2NyaW1pbmF0ZWRVbmlvblR5cGUgPSBab2REaXNjcmltaW5hdGVkVW5pb24uY3JlYXRlO1xyXG5jb25zdCBpbnRlcnNlY3Rpb25UeXBlID0gWm9kSW50ZXJzZWN0aW9uLmNyZWF0ZTtcclxuY29uc3QgdHVwbGVUeXBlID0gWm9kVHVwbGUuY3JlYXRlO1xyXG5jb25zdCByZWNvcmRUeXBlID0gWm9kUmVjb3JkLmNyZWF0ZTtcclxuY29uc3QgbWFwVHlwZSA9IFpvZE1hcC5jcmVhdGU7XHJcbmNvbnN0IHNldFR5cGUgPSBab2RTZXQuY3JlYXRlO1xyXG5jb25zdCBmdW5jdGlvblR5cGUgPSBab2RGdW5jdGlvbi5jcmVhdGU7XHJcbmNvbnN0IGxhenlUeXBlID0gWm9kTGF6eS5jcmVhdGU7XHJcbmNvbnN0IGxpdGVyYWxUeXBlID0gWm9kTGl0ZXJhbC5jcmVhdGU7XHJcbmNvbnN0IGVudW1UeXBlID0gWm9kRW51bS5jcmVhdGU7XHJcbmNvbnN0IG5hdGl2ZUVudW1UeXBlID0gWm9kTmF0aXZlRW51bS5jcmVhdGU7XHJcbmNvbnN0IHByb21pc2VUeXBlID0gWm9kUHJvbWlzZS5jcmVhdGU7XHJcbmNvbnN0IGVmZmVjdHNUeXBlID0gWm9kRWZmZWN0cy5jcmVhdGU7XHJcbmNvbnN0IG9wdGlvbmFsVHlwZSA9IFpvZE9wdGlvbmFsLmNyZWF0ZTtcclxuY29uc3QgbnVsbGFibGVUeXBlID0gWm9kTnVsbGFibGUuY3JlYXRlO1xyXG5jb25zdCBwcmVwcm9jZXNzVHlwZSA9IFpvZEVmZmVjdHMuY3JlYXRlV2l0aFByZXByb2Nlc3M7XHJcbmNvbnN0IHBpcGVsaW5lVHlwZSA9IFpvZFBpcGVsaW5lLmNyZWF0ZTtcclxuY29uc3Qgb3N0cmluZyA9ICgpID0+IHN0cmluZ1R5cGUoKS5vcHRpb25hbCgpO1xyXG5jb25zdCBvbnVtYmVyID0gKCkgPT4gbnVtYmVyVHlwZSgpLm9wdGlvbmFsKCk7XHJcbmNvbnN0IG9ib29sZWFuID0gKCkgPT4gYm9vbGVhblR5cGUoKS5vcHRpb25hbCgpO1xyXG5jb25zdCBjb2VyY2UgPSB7XHJcbiAgICBzdHJpbmc6ICgoYXJnKSA9PiBab2RTdHJpbmcuY3JlYXRlKHsgLi4uYXJnLCBjb2VyY2U6IHRydWUgfSkpLFxyXG4gICAgbnVtYmVyOiAoKGFyZykgPT4gWm9kTnVtYmVyLmNyZWF0ZSh7IC4uLmFyZywgY29lcmNlOiB0cnVlIH0pKSxcclxuICAgIGJvb2xlYW46ICgoYXJnKSA9PiBab2RCb29sZWFuLmNyZWF0ZSh7XHJcbiAgICAgICAgLi4uYXJnLFxyXG4gICAgICAgIGNvZXJjZTogdHJ1ZSxcclxuICAgIH0pKSxcclxuICAgIGJpZ2ludDogKChhcmcpID0+IFpvZEJpZ0ludC5jcmVhdGUoeyAuLi5hcmcsIGNvZXJjZTogdHJ1ZSB9KSksXHJcbiAgICBkYXRlOiAoKGFyZykgPT4gWm9kRGF0ZS5jcmVhdGUoeyAuLi5hcmcsIGNvZXJjZTogdHJ1ZSB9KSksXHJcbn07XHJcbmNvbnN0IE5FVkVSID0gSU5WQUxJRDtcclxuXHJcbnZhciB6ID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xyXG4gICAgX19wcm90b19fOiBudWxsLFxyXG4gICAgZGVmYXVsdEVycm9yTWFwOiBlcnJvck1hcCxcclxuICAgIHNldEVycm9yTWFwOiBzZXRFcnJvck1hcCxcclxuICAgIGdldEVycm9yTWFwOiBnZXRFcnJvck1hcCxcclxuICAgIG1ha2VJc3N1ZTogbWFrZUlzc3VlLFxyXG4gICAgRU1QVFlfUEFUSDogRU1QVFlfUEFUSCxcclxuICAgIGFkZElzc3VlVG9Db250ZXh0OiBhZGRJc3N1ZVRvQ29udGV4dCxcclxuICAgIFBhcnNlU3RhdHVzOiBQYXJzZVN0YXR1cyxcclxuICAgIElOVkFMSUQ6IElOVkFMSUQsXHJcbiAgICBESVJUWTogRElSVFksXHJcbiAgICBPSzogT0ssXHJcbiAgICBpc0Fib3J0ZWQ6IGlzQWJvcnRlZCxcclxuICAgIGlzRGlydHk6IGlzRGlydHksXHJcbiAgICBpc1ZhbGlkOiBpc1ZhbGlkLFxyXG4gICAgaXNBc3luYzogaXNBc3luYyxcclxuICAgIGdldCB1dGlsICgpIHsgcmV0dXJuIHV0aWw7IH0sXHJcbiAgICBnZXQgb2JqZWN0VXRpbCAoKSB7IHJldHVybiBvYmplY3RVdGlsOyB9LFxyXG4gICAgWm9kUGFyc2VkVHlwZTogWm9kUGFyc2VkVHlwZSxcclxuICAgIGdldFBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUsXHJcbiAgICBab2RUeXBlOiBab2RUeXBlLFxyXG4gICAgWm9kU3RyaW5nOiBab2RTdHJpbmcsXHJcbiAgICBab2ROdW1iZXI6IFpvZE51bWJlcixcclxuICAgIFpvZEJpZ0ludDogWm9kQmlnSW50LFxyXG4gICAgWm9kQm9vbGVhbjogWm9kQm9vbGVhbixcclxuICAgIFpvZERhdGU6IFpvZERhdGUsXHJcbiAgICBab2RTeW1ib2w6IFpvZFN5bWJvbCxcclxuICAgIFpvZFVuZGVmaW5lZDogWm9kVW5kZWZpbmVkLFxyXG4gICAgWm9kTnVsbDogWm9kTnVsbCxcclxuICAgIFpvZEFueTogWm9kQW55LFxyXG4gICAgWm9kVW5rbm93bjogWm9kVW5rbm93bixcclxuICAgIFpvZE5ldmVyOiBab2ROZXZlcixcclxuICAgIFpvZFZvaWQ6IFpvZFZvaWQsXHJcbiAgICBab2RBcnJheTogWm9kQXJyYXksXHJcbiAgICBab2RPYmplY3Q6IFpvZE9iamVjdCxcclxuICAgIFpvZFVuaW9uOiBab2RVbmlvbixcclxuICAgIFpvZERpc2NyaW1pbmF0ZWRVbmlvbjogWm9kRGlzY3JpbWluYXRlZFVuaW9uLFxyXG4gICAgWm9kSW50ZXJzZWN0aW9uOiBab2RJbnRlcnNlY3Rpb24sXHJcbiAgICBab2RUdXBsZTogWm9kVHVwbGUsXHJcbiAgICBab2RSZWNvcmQ6IFpvZFJlY29yZCxcclxuICAgIFpvZE1hcDogWm9kTWFwLFxyXG4gICAgWm9kU2V0OiBab2RTZXQsXHJcbiAgICBab2RGdW5jdGlvbjogWm9kRnVuY3Rpb24sXHJcbiAgICBab2RMYXp5OiBab2RMYXp5LFxyXG4gICAgWm9kTGl0ZXJhbDogWm9kTGl0ZXJhbCxcclxuICAgIFpvZEVudW06IFpvZEVudW0sXHJcbiAgICBab2ROYXRpdmVFbnVtOiBab2ROYXRpdmVFbnVtLFxyXG4gICAgWm9kUHJvbWlzZTogWm9kUHJvbWlzZSxcclxuICAgIFpvZEVmZmVjdHM6IFpvZEVmZmVjdHMsXHJcbiAgICBab2RUcmFuc2Zvcm1lcjogWm9kRWZmZWN0cyxcclxuICAgIFpvZE9wdGlvbmFsOiBab2RPcHRpb25hbCxcclxuICAgIFpvZE51bGxhYmxlOiBab2ROdWxsYWJsZSxcclxuICAgIFpvZERlZmF1bHQ6IFpvZERlZmF1bHQsXHJcbiAgICBab2RDYXRjaDogWm9kQ2F0Y2gsXHJcbiAgICBab2ROYU46IFpvZE5hTixcclxuICAgIEJSQU5EOiBCUkFORCxcclxuICAgIFpvZEJyYW5kZWQ6IFpvZEJyYW5kZWQsXHJcbiAgICBab2RQaXBlbGluZTogWm9kUGlwZWxpbmUsXHJcbiAgICBab2RSZWFkb25seTogWm9kUmVhZG9ubHksXHJcbiAgICBjdXN0b206IGN1c3RvbSxcclxuICAgIFNjaGVtYTogWm9kVHlwZSxcclxuICAgIFpvZFNjaGVtYTogWm9kVHlwZSxcclxuICAgIGxhdGU6IGxhdGUsXHJcbiAgICBnZXQgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kICgpIHsgcmV0dXJuIFpvZEZpcnN0UGFydHlUeXBlS2luZDsgfSxcclxuICAgIGNvZXJjZTogY29lcmNlLFxyXG4gICAgYW55OiBhbnlUeXBlLFxyXG4gICAgYXJyYXk6IGFycmF5VHlwZSxcclxuICAgIGJpZ2ludDogYmlnSW50VHlwZSxcclxuICAgIGJvb2xlYW46IGJvb2xlYW5UeXBlLFxyXG4gICAgZGF0ZTogZGF0ZVR5cGUsXHJcbiAgICBkaXNjcmltaW5hdGVkVW5pb246IGRpc2NyaW1pbmF0ZWRVbmlvblR5cGUsXHJcbiAgICBlZmZlY3Q6IGVmZmVjdHNUeXBlLFxyXG4gICAgJ2VudW0nOiBlbnVtVHlwZSxcclxuICAgICdmdW5jdGlvbic6IGZ1bmN0aW9uVHlwZSxcclxuICAgICdpbnN0YW5jZW9mJzogaW5zdGFuY2VPZlR5cGUsXHJcbiAgICBpbnRlcnNlY3Rpb246IGludGVyc2VjdGlvblR5cGUsXHJcbiAgICBsYXp5OiBsYXp5VHlwZSxcclxuICAgIGxpdGVyYWw6IGxpdGVyYWxUeXBlLFxyXG4gICAgbWFwOiBtYXBUeXBlLFxyXG4gICAgbmFuOiBuYW5UeXBlLFxyXG4gICAgbmF0aXZlRW51bTogbmF0aXZlRW51bVR5cGUsXHJcbiAgICBuZXZlcjogbmV2ZXJUeXBlLFxyXG4gICAgJ251bGwnOiBudWxsVHlwZSxcclxuICAgIG51bGxhYmxlOiBudWxsYWJsZVR5cGUsXHJcbiAgICBudW1iZXI6IG51bWJlclR5cGUsXHJcbiAgICBvYmplY3Q6IG9iamVjdFR5cGUsXHJcbiAgICBvYm9vbGVhbjogb2Jvb2xlYW4sXHJcbiAgICBvbnVtYmVyOiBvbnVtYmVyLFxyXG4gICAgb3B0aW9uYWw6IG9wdGlvbmFsVHlwZSxcclxuICAgIG9zdHJpbmc6IG9zdHJpbmcsXHJcbiAgICBwaXBlbGluZTogcGlwZWxpbmVUeXBlLFxyXG4gICAgcHJlcHJvY2VzczogcHJlcHJvY2Vzc1R5cGUsXHJcbiAgICBwcm9taXNlOiBwcm9taXNlVHlwZSxcclxuICAgIHJlY29yZDogcmVjb3JkVHlwZSxcclxuICAgIHNldDogc2V0VHlwZSxcclxuICAgIHN0cmljdE9iamVjdDogc3RyaWN0T2JqZWN0VHlwZSxcclxuICAgIHN0cmluZzogc3RyaW5nVHlwZSxcclxuICAgIHN5bWJvbDogc3ltYm9sVHlwZSxcclxuICAgIHRyYW5zZm9ybWVyOiBlZmZlY3RzVHlwZSxcclxuICAgIHR1cGxlOiB0dXBsZVR5cGUsXHJcbiAgICAndW5kZWZpbmVkJzogdW5kZWZpbmVkVHlwZSxcclxuICAgIHVuaW9uOiB1bmlvblR5cGUsXHJcbiAgICB1bmtub3duOiB1bmtub3duVHlwZSxcclxuICAgICd2b2lkJzogdm9pZFR5cGUsXHJcbiAgICBORVZFUjogTkVWRVIsXHJcbiAgICBab2RJc3N1ZUNvZGU6IFpvZElzc3VlQ29kZSxcclxuICAgIHF1b3RlbGVzc0pzb246IHF1b3RlbGVzc0pzb24sXHJcbiAgICBab2RFcnJvcjogWm9kRXJyb3JcclxufSk7XHJcblxyXG5leHBvcnQgeyBCUkFORCwgRElSVFksIEVNUFRZX1BBVEgsIElOVkFMSUQsIE5FVkVSLCBPSywgUGFyc2VTdGF0dXMsIFpvZFR5cGUgYXMgU2NoZW1hLCBab2RBbnksIFpvZEFycmF5LCBab2RCaWdJbnQsIFpvZEJvb2xlYW4sIFpvZEJyYW5kZWQsIFpvZENhdGNoLCBab2REYXRlLCBab2REZWZhdWx0LCBab2REaXNjcmltaW5hdGVkVW5pb24sIFpvZEVmZmVjdHMsIFpvZEVudW0sIFpvZEVycm9yLCBab2RGaXJzdFBhcnR5VHlwZUtpbmQsIFpvZEZ1bmN0aW9uLCBab2RJbnRlcnNlY3Rpb24sIFpvZElzc3VlQ29kZSwgWm9kTGF6eSwgWm9kTGl0ZXJhbCwgWm9kTWFwLCBab2ROYU4sIFpvZE5hdGl2ZUVudW0sIFpvZE5ldmVyLCBab2ROdWxsLCBab2ROdWxsYWJsZSwgWm9kTnVtYmVyLCBab2RPYmplY3QsIFpvZE9wdGlvbmFsLCBab2RQYXJzZWRUeXBlLCBab2RQaXBlbGluZSwgWm9kUHJvbWlzZSwgWm9kUmVhZG9ubHksIFpvZFJlY29yZCwgWm9kVHlwZSBhcyBab2RTY2hlbWEsIFpvZFNldCwgWm9kU3RyaW5nLCBab2RTeW1ib2wsIFpvZEVmZmVjdHMgYXMgWm9kVHJhbnNmb3JtZXIsIFpvZFR1cGxlLCBab2RUeXBlLCBab2RVbmRlZmluZWQsIFpvZFVuaW9uLCBab2RVbmtub3duLCBab2RWb2lkLCBhZGRJc3N1ZVRvQ29udGV4dCwgYW55VHlwZSBhcyBhbnksIGFycmF5VHlwZSBhcyBhcnJheSwgYmlnSW50VHlwZSBhcyBiaWdpbnQsIGJvb2xlYW5UeXBlIGFzIGJvb2xlYW4sIGNvZXJjZSwgY3VzdG9tLCBkYXRlVHlwZSBhcyBkYXRlLCB6IGFzIGRlZmF1bHQsIGVycm9yTWFwIGFzIGRlZmF1bHRFcnJvck1hcCwgZGlzY3JpbWluYXRlZFVuaW9uVHlwZSBhcyBkaXNjcmltaW5hdGVkVW5pb24sIGVmZmVjdHNUeXBlIGFzIGVmZmVjdCwgZW51bVR5cGUgYXMgZW51bSwgZnVuY3Rpb25UeXBlIGFzIGZ1bmN0aW9uLCBnZXRFcnJvck1hcCwgZ2V0UGFyc2VkVHlwZSwgaW5zdGFuY2VPZlR5cGUgYXMgaW5zdGFuY2VvZiwgaW50ZXJzZWN0aW9uVHlwZSBhcyBpbnRlcnNlY3Rpb24sIGlzQWJvcnRlZCwgaXNBc3luYywgaXNEaXJ0eSwgaXNWYWxpZCwgbGF0ZSwgbGF6eVR5cGUgYXMgbGF6eSwgbGl0ZXJhbFR5cGUgYXMgbGl0ZXJhbCwgbWFrZUlzc3VlLCBtYXBUeXBlIGFzIG1hcCwgbmFuVHlwZSBhcyBuYW4sIG5hdGl2ZUVudW1UeXBlIGFzIG5hdGl2ZUVudW0sIG5ldmVyVHlwZSBhcyBuZXZlciwgbnVsbFR5cGUgYXMgbnVsbCwgbnVsbGFibGVUeXBlIGFzIG51bGxhYmxlLCBudW1iZXJUeXBlIGFzIG51bWJlciwgb2JqZWN0VHlwZSBhcyBvYmplY3QsIG9iamVjdFV0aWwsIG9ib29sZWFuLCBvbnVtYmVyLCBvcHRpb25hbFR5cGUgYXMgb3B0aW9uYWwsIG9zdHJpbmcsIHBpcGVsaW5lVHlwZSBhcyBwaXBlbGluZSwgcHJlcHJvY2Vzc1R5cGUgYXMgcHJlcHJvY2VzcywgcHJvbWlzZVR5cGUgYXMgcHJvbWlzZSwgcXVvdGVsZXNzSnNvbiwgcmVjb3JkVHlwZSBhcyByZWNvcmQsIHNldFR5cGUgYXMgc2V0LCBzZXRFcnJvck1hcCwgc3RyaWN0T2JqZWN0VHlwZSBhcyBzdHJpY3RPYmplY3QsIHN0cmluZ1R5cGUgYXMgc3RyaW5nLCBzeW1ib2xUeXBlIGFzIHN5bWJvbCwgZWZmZWN0c1R5cGUgYXMgdHJhbnNmb3JtZXIsIHR1cGxlVHlwZSBhcyB0dXBsZSwgdW5kZWZpbmVkVHlwZSBhcyB1bmRlZmluZWQsIHVuaW9uVHlwZSBhcyB1bmlvbiwgdW5rbm93blR5cGUgYXMgdW5rbm93biwgdXRpbCwgdm9pZFR5cGUgYXMgdm9pZCwgeiB9O1xyXG4iXSwibmFtZXMiOlsidXRpbCIsImFzc2VydEVxdWFsIiwidmFsIiwiYXNzZXJ0SXMiLCJfYXJnIiwiYXNzZXJ0TmV2ZXIiLCJfeCIsIkVycm9yIiwiYXJyYXlUb0VudW0iLCJpdGVtcyIsIm9iaiIsIml0ZW0iLCJnZXRWYWxpZEVudW1WYWx1ZXMiLCJ2YWxpZEtleXMiLCJvYmplY3RLZXlzIiwiZmlsdGVyIiwiayIsImZpbHRlcmVkIiwib2JqZWN0VmFsdWVzIiwibWFwIiwiZSIsIk9iamVjdCIsImtleXMiLCJvYmplY3QiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJwdXNoIiwiZmluZCIsImFyciIsImNoZWNrZXIiLCJ1bmRlZmluZWQiLCJpc0ludGVnZXIiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsIk1hdGgiLCJmbG9vciIsImpvaW5WYWx1ZXMiLCJhcnJheSIsInNlcGFyYXRvciIsImpvaW4iLCJqc29uU3RyaW5naWZ5UmVwbGFjZXIiLCJfIiwidmFsdWUiLCJ0b1N0cmluZyIsIm9iamVjdFV0aWwiLCJtZXJnZVNoYXBlcyIsImZpcnN0Iiwic2Vjb25kIiwiWm9kUGFyc2VkVHlwZSIsImdldFBhcnNlZFR5cGUiLCJkYXRhIiwidCIsInN0cmluZyIsImlzTmFOIiwibmFuIiwibnVtYmVyIiwiYm9vbGVhbiIsImZ1bmN0aW9uIiwiYmlnaW50Iiwic3ltYm9sIiwiQXJyYXkiLCJpc0FycmF5IiwibnVsbCIsInRoZW4iLCJjYXRjaCIsInByb21pc2UiLCJNYXAiLCJTZXQiLCJzZXQiLCJEYXRlIiwiZGF0ZSIsInVua25vd24iLCJab2RJc3N1ZUNvZGUiLCJxdW90ZWxlc3NKc29uIiwianNvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXBsYWNlIiwiWm9kRXJyb3IiLCJjb25zdHJ1Y3RvciIsImlzc3VlcyIsImFkZElzc3VlIiwic3ViIiwiYWRkSXNzdWVzIiwic3VicyIsImFjdHVhbFByb3RvIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJuYW1lIiwiZXJyb3JzIiwiZm9ybWF0IiwiX21hcHBlciIsIm1hcHBlciIsImlzc3VlIiwibWVzc2FnZSIsImZpZWxkRXJyb3JzIiwiX2Vycm9ycyIsInByb2Nlc3NFcnJvciIsImVycm9yIiwiY29kZSIsInVuaW9uRXJyb3JzIiwicmV0dXJuVHlwZUVycm9yIiwiYXJndW1lbnRzRXJyb3IiLCJwYXRoIiwibGVuZ3RoIiwiY3VyciIsImkiLCJlbCIsInRlcm1pbmFsIiwiaXNFbXB0eSIsImZsYXR0ZW4iLCJmb3JtRXJyb3JzIiwiY3JlYXRlIiwiZXJyb3JNYXAiLCJfY3R4IiwiaW52YWxpZF90eXBlIiwicmVjZWl2ZWQiLCJleHBlY3RlZCIsImludmFsaWRfbGl0ZXJhbCIsInVucmVjb2duaXplZF9rZXlzIiwiaW52YWxpZF91bmlvbiIsImludmFsaWRfdW5pb25fZGlzY3JpbWluYXRvciIsIm9wdGlvbnMiLCJpbnZhbGlkX2VudW1fdmFsdWUiLCJpbnZhbGlkX2FyZ3VtZW50cyIsImludmFsaWRfcmV0dXJuX3R5cGUiLCJpbnZhbGlkX2RhdGUiLCJpbnZhbGlkX3N0cmluZyIsInZhbGlkYXRpb24iLCJpbmNsdWRlcyIsInBvc2l0aW9uIiwic3RhcnRzV2l0aCIsImVuZHNXaXRoIiwidG9vX3NtYWxsIiwidHlwZSIsImV4YWN0IiwiaW5jbHVzaXZlIiwibWluaW11bSIsInRvb19iaWciLCJtYXhpbXVtIiwiY3VzdG9tIiwiaW52YWxpZF9pbnRlcnNlY3Rpb25fdHlwZXMiLCJub3RfbXVsdGlwbGVfb2YiLCJtdWx0aXBsZU9mIiwibm90X2Zpbml0ZSIsImRlZmF1bHRFcnJvciIsIm92ZXJyaWRlRXJyb3JNYXAiLCJzZXRFcnJvck1hcCIsImdldEVycm9yTWFwIiwibWFrZUlzc3VlIiwicGFyYW1zIiwiZXJyb3JNYXBzIiwiaXNzdWVEYXRhIiwiZnVsbFBhdGgiLCJmdWxsSXNzdWUiLCJlcnJvck1lc3NhZ2UiLCJtYXBzIiwibSIsInNsaWNlIiwicmV2ZXJzZSIsIkVNUFRZX1BBVEgiLCJhZGRJc3N1ZVRvQ29udGV4dCIsImN0eCIsImNvbW1vbiIsImNvbnRleHR1YWxFcnJvck1hcCIsInNjaGVtYUVycm9yTWFwIiwieCIsIlBhcnNlU3RhdHVzIiwiZGlydHkiLCJhYm9ydCIsIm1lcmdlQXJyYXkiLCJzdGF0dXMiLCJyZXN1bHRzIiwiYXJyYXlWYWx1ZSIsInMiLCJJTlZBTElEIiwibWVyZ2VPYmplY3RBc3luYyIsInBhaXJzIiwic3luY1BhaXJzIiwicGFpciIsIm1lcmdlT2JqZWN0U3luYyIsImZpbmFsT2JqZWN0IiwiYWx3YXlzU2V0IiwiZnJlZXplIiwiRElSVFkiLCJPSyIsImlzQWJvcnRlZCIsImlzRGlydHkiLCJpc1ZhbGlkIiwiaXNBc3luYyIsIlByb21pc2UiLCJlcnJvclV0aWwiLCJlcnJUb09iaiIsIlBhcnNlSW5wdXRMYXp5UGF0aCIsInBhcmVudCIsIl9jYWNoZWRQYXRoIiwiX3BhdGgiLCJfa2V5IiwiaGFuZGxlUmVzdWx0IiwicmVzdWx0Iiwic3VjY2VzcyIsIl9lcnJvciIsInByb2Nlc3NDcmVhdGVQYXJhbXMiLCJpbnZhbGlkX3R5cGVfZXJyb3IiLCJyZXF1aXJlZF9lcnJvciIsImRlc2NyaXB0aW9uIiwiY3VzdG9tTWFwIiwiaXNzIiwiWm9kVHlwZSIsImRlZiIsInNwYSIsInNhZmVQYXJzZUFzeW5jIiwiX2RlZiIsInBhcnNlIiwiYmluZCIsInNhZmVQYXJzZSIsInBhcnNlQXN5bmMiLCJyZWZpbmUiLCJyZWZpbmVtZW50Iiwic3VwZXJSZWZpbmUiLCJvcHRpb25hbCIsIm51bGxhYmxlIiwibnVsbGlzaCIsIm9yIiwiYW5kIiwidHJhbnNmb3JtIiwiYnJhbmQiLCJkZWZhdWx0IiwiZGVzY3JpYmUiLCJwaXBlIiwicmVhZG9ubHkiLCJpc051bGxhYmxlIiwiaXNPcHRpb25hbCIsIl9nZXRUeXBlIiwiaW5wdXQiLCJfZ2V0T3JSZXR1cm5DdHgiLCJwYXJzZWRUeXBlIiwiX3Byb2Nlc3NJbnB1dFBhcmFtcyIsIl9wYXJzZVN5bmMiLCJfcGFyc2UiLCJfcGFyc2VBc3luYyIsInJlc29sdmUiLCJfYSIsImFzeW5jIiwibWF5YmVBc3luY1Jlc3VsdCIsImNoZWNrIiwiZ2V0SXNzdWVQcm9wZXJ0aWVzIiwiX3JlZmluZW1lbnQiLCJzZXRFcnJvciIsInJlZmluZW1lbnREYXRhIiwiWm9kRWZmZWN0cyIsInNjaGVtYSIsInR5cGVOYW1lIiwiWm9kRmlyc3RQYXJ0eVR5cGVLaW5kIiwiZWZmZWN0IiwiWm9kT3B0aW9uYWwiLCJab2ROdWxsYWJsZSIsIlpvZEFycmF5IiwiWm9kUHJvbWlzZSIsIm9wdGlvbiIsIlpvZFVuaW9uIiwiaW5jb21pbmciLCJab2RJbnRlcnNlY3Rpb24iLCJkZWZhdWx0VmFsdWVGdW5jIiwiWm9kRGVmYXVsdCIsImlubmVyVHlwZSIsImRlZmF1bHRWYWx1ZSIsIlpvZEJyYW5kZWQiLCJjYXRjaFZhbHVlRnVuYyIsIlpvZENhdGNoIiwiY2F0Y2hWYWx1ZSIsIlRoaXMiLCJ0YXJnZXQiLCJab2RQaXBlbGluZSIsIlpvZFJlYWRvbmx5IiwiY3VpZFJlZ2V4IiwiY3VpZDJSZWdleCIsInVsaWRSZWdleCIsInV1aWRSZWdleCIsImVtYWlsUmVnZXgiLCJfZW1vamlSZWdleCIsImVtb2ppUmVnZXgiLCJpcHY0UmVnZXgiLCJpcHY2UmVnZXgiLCJkYXRldGltZVJlZ2V4IiwiYXJncyIsInByZWNpc2lvbiIsIm9mZnNldCIsIlJlZ0V4cCIsImlzVmFsaWRJUCIsImlwIiwidmVyc2lvbiIsInRlc3QiLCJab2RTdHJpbmciLCJjb2VyY2UiLCJTdHJpbmciLCJjaGVja3MiLCJraW5kIiwidG9vQmlnIiwidG9vU21hbGwiLCJVUkwiLCJyZWdleCIsImxhc3RJbmRleCIsInRlc3RSZXN1bHQiLCJ0cmltIiwidG9Mb3dlckNhc2UiLCJ0b1VwcGVyQ2FzZSIsIl9yZWdleCIsIl9hZGRDaGVjayIsImVtYWlsIiwidXJsIiwiZW1vamkiLCJ1dWlkIiwiY3VpZCIsImN1aWQyIiwidWxpZCIsImRhdGV0aW1lIiwibWluIiwibWluTGVuZ3RoIiwibWF4IiwibWF4TGVuZ3RoIiwibGVuIiwibm9uZW1wdHkiLCJpc0RhdGV0aW1lIiwiY2giLCJpc0VtYWlsIiwiaXNVUkwiLCJpc0Vtb2ppIiwiaXNVVUlEIiwiaXNDVUlEIiwiaXNDVUlEMiIsImlzVUxJRCIsImlzSVAiLCJmbG9hdFNhZmVSZW1haW5kZXIiLCJzdGVwIiwidmFsRGVjQ291bnQiLCJzcGxpdCIsInN0ZXBEZWNDb3VudCIsImRlY0NvdW50IiwidmFsSW50IiwicGFyc2VJbnQiLCJ0b0ZpeGVkIiwic3RlcEludCIsInBvdyIsIlpvZE51bWJlciIsImFyZ3VtZW50cyIsImd0ZSIsImx0ZSIsInNldExpbWl0IiwiZ3QiLCJsdCIsImludCIsInBvc2l0aXZlIiwibmVnYXRpdmUiLCJub25wb3NpdGl2ZSIsIm5vbm5lZ2F0aXZlIiwiZmluaXRlIiwic2FmZSIsIk1JTl9TQUZFX0lOVEVHRVIiLCJNQVhfU0FGRV9JTlRFR0VSIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsImlzSW50IiwiWm9kQmlnSW50IiwiQmlnSW50IiwiWm9kQm9vbGVhbiIsIkJvb2xlYW4iLCJab2REYXRlIiwiZ2V0VGltZSIsIm1pbkRhdGUiLCJtYXhEYXRlIiwiWm9kU3ltYm9sIiwiWm9kVW5kZWZpbmVkIiwiWm9kTnVsbCIsIlpvZEFueSIsIl9hbnkiLCJab2RVbmtub3duIiwiX3Vua25vd24iLCJab2ROZXZlciIsIm5ldmVyIiwiWm9kVm9pZCIsInZvaWQiLCJleGFjdExlbmd0aCIsImFsbCIsImVsZW1lbnQiLCJkZWVwUGFydGlhbGlmeSIsIlpvZE9iamVjdCIsIm5ld1NoYXBlIiwic2hhcGUiLCJmaWVsZFNjaGVtYSIsInVud3JhcCIsIlpvZFR1cGxlIiwiX2NhY2hlZCIsIm5vbnN0cmljdCIsInBhc3N0aHJvdWdoIiwiYXVnbWVudCIsImV4dGVuZCIsIl9nZXRDYWNoZWQiLCJzaGFwZUtleXMiLCJleHRyYUtleXMiLCJjYXRjaGFsbCIsInVua25vd25LZXlzIiwia2V5VmFsaWRhdG9yIiwic3RyaWN0IiwiX2IiLCJfYyIsIl9kIiwic3RyaXAiLCJhdWdtZW50YXRpb24iLCJtZXJnZSIsIm1lcmdpbmciLCJtZXJnZWQiLCJzZXRLZXkiLCJpbmRleCIsInBpY2siLCJtYXNrIiwiZm9yRWFjaCIsIm9taXQiLCJkZWVwUGFydGlhbCIsInBhcnRpYWwiLCJyZXF1aXJlZCIsIm5ld0ZpZWxkIiwia2V5b2YiLCJjcmVhdGVab2RFbnVtIiwic3RyaWN0Q3JlYXRlIiwibGF6eWNyZWF0ZSIsImhhbmRsZVJlc3VsdHMiLCJjaGlsZEN0eCIsInR5cGVzIiwiZ2V0RGlzY3JpbWluYXRvciIsIlpvZExhenkiLCJab2RMaXRlcmFsIiwiWm9kRW51bSIsIlpvZE5hdGl2ZUVudW0iLCJlbnVtIiwiWm9kRGlzY3JpbWluYXRlZFVuaW9uIiwiZGlzY3JpbWluYXRvciIsImRpc2NyaW1pbmF0b3JWYWx1ZSIsIm9wdGlvbnNNYXAiLCJnZXQiLCJmcm9tIiwiZGlzY3JpbWluYXRvclZhbHVlcyIsImhhcyIsIm1lcmdlVmFsdWVzIiwiYSIsImIiLCJhVHlwZSIsImJUeXBlIiwidmFsaWQiLCJiS2V5cyIsInNoYXJlZEtleXMiLCJpbmRleE9mIiwibmV3T2JqIiwic2hhcmVkVmFsdWUiLCJuZXdBcnJheSIsIml0ZW1BIiwiaXRlbUIiLCJoYW5kbGVQYXJzZWQiLCJwYXJzZWRMZWZ0IiwicGFyc2VkUmlnaHQiLCJsZWZ0IiwicmlnaHQiLCJyZXN0IiwiaXRlbUluZGV4Iiwic2NoZW1hcyIsIlpvZFJlY29yZCIsImtleVNjaGVtYSIsImtleVR5cGUiLCJ2YWx1ZVNjaGVtYSIsInZhbHVlVHlwZSIsInRoaXJkIiwiWm9kTWFwIiwiZW50cmllcyIsImZpbmFsTWFwIiwiWm9kU2V0IiwibWluU2l6ZSIsInNpemUiLCJtYXhTaXplIiwiZmluYWxpemVTZXQiLCJlbGVtZW50cyIsInBhcnNlZFNldCIsImFkZCIsInZhbHVlcyIsIlpvZEZ1bmN0aW9uIiwidmFsaWRhdGUiLCJpbXBsZW1lbnQiLCJtYWtlQXJnc0lzc3VlIiwibWFrZVJldHVybnNJc3N1ZSIsInJldHVybnMiLCJmbiIsIm1lIiwicGFyc2VkQXJncyIsIlJlZmxlY3QiLCJhcHBseSIsInBhcnNlZFJldHVybnMiLCJwYXJhbWV0ZXJzIiwicmV0dXJuVHlwZSIsImZ1bmMiLCJ2YWxpZGF0ZWRGdW5jIiwic3RyaWN0SW1wbGVtZW50IiwiZ2V0dGVyIiwibGF6eVNjaGVtYSIsImV4cGVjdGVkVmFsdWVzIiwiZW51bVZhbHVlcyIsIlZhbHVlcyIsIkVudW0iLCJleHRyYWN0IiwiZXhjbHVkZSIsIm9wdCIsIm5hdGl2ZUVudW1WYWx1ZXMiLCJwcm9taXNpZmllZCIsInNvdXJjZVR5cGUiLCJjaGVja0N0eCIsImFyZyIsImZhdGFsIiwicHJvY2Vzc2VkIiwiZXhlY3V0ZVJlZmluZW1lbnQiLCJhY2MiLCJpbm5lciIsImJhc2UiLCJjcmVhdGVXaXRoUHJlcHJvY2VzcyIsInByZXByb2Nlc3MiLCJyZW1vdmVEZWZhdWx0IiwibmV3Q3R4IiwicmVtb3ZlQ2F0Y2giLCJab2ROYU4iLCJCUkFORCIsIlN5bWJvbCIsImhhbmRsZUFzeW5jIiwiaW5SZXN1bHQiLCJpbiIsIm91dCIsInAiLCJfZmF0YWwiLCJwMiIsImxhdGUiLCJpbnN0YW5jZU9mVHlwZSIsImNscyIsInN0cmluZ1R5cGUiLCJudW1iZXJUeXBlIiwibmFuVHlwZSIsImJpZ0ludFR5cGUiLCJib29sZWFuVHlwZSIsImRhdGVUeXBlIiwic3ltYm9sVHlwZSIsInVuZGVmaW5lZFR5cGUiLCJudWxsVHlwZSIsImFueVR5cGUiLCJ1bmtub3duVHlwZSIsIm5ldmVyVHlwZSIsInZvaWRUeXBlIiwiYXJyYXlUeXBlIiwib2JqZWN0VHlwZSIsInN0cmljdE9iamVjdFR5cGUiLCJ1bmlvblR5cGUiLCJkaXNjcmltaW5hdGVkVW5pb25UeXBlIiwiaW50ZXJzZWN0aW9uVHlwZSIsInR1cGxlVHlwZSIsInJlY29yZFR5cGUiLCJtYXBUeXBlIiwic2V0VHlwZSIsImZ1bmN0aW9uVHlwZSIsImxhenlUeXBlIiwibGl0ZXJhbFR5cGUiLCJlbnVtVHlwZSIsIm5hdGl2ZUVudW1UeXBlIiwicHJvbWlzZVR5cGUiLCJlZmZlY3RzVHlwZSIsIm9wdGlvbmFsVHlwZSIsIm51bGxhYmxlVHlwZSIsInByZXByb2Nlc3NUeXBlIiwicGlwZWxpbmVUeXBlIiwib3N0cmluZyIsIm9udW1iZXIiLCJvYm9vbGVhbiIsIk5FVkVSIiwieiIsImRlZmF1bHRFcnJvck1hcCIsIlpvZFRyYW5zZm9ybWVyIiwiU2NoZW1hIiwiWm9kU2NoZW1hIiwiYW55IiwiZGlzY3JpbWluYXRlZFVuaW9uIiwiaW50ZXJzZWN0aW9uIiwibGF6eSIsImxpdGVyYWwiLCJuYXRpdmVFbnVtIiwicGlwZWxpbmUiLCJyZWNvcmQiLCJzdHJpY3RPYmplY3QiLCJ0cmFuc2Zvcm1lciIsInR1cGxlIiwidW5pb24iLCJpbnN0YW5jZW9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zod/lib/index.mjs\n");

/***/ })

};
;