"""Add two level nesting fields

Revision ID: b6976790b87b
Revises: 556018d2bc90
Create Date: 2025-05-26 11:42:54.076895

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b6976790b87b'
down_revision = '556018d2bc90'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('reports',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.String(length=500), nullable=False),
    sa.Column('report_type', sa.Enum('produzione', 'qualita', 'tempi', 'completo', 'nesting', name='reporttypeenum'), nullable=False),
    sa.Column('generated_for_user_id', sa.Integer(), nullable=True),
    sa.Column('period_start', sa.DateTime(), nullable=True),
    sa.Column('period_end', sa.DateTime(), nullable=True),
    sa.Column('include_sections', sa.String(length=255), nullable=True),
    sa.Column('file_size_bytes', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_reports_filename'), 'reports', ['filename'], unique=True)
    op.create_index(op.f('ix_reports_generated_for_user_id'), 'reports', ['generated_for_user_id'], unique=False)
    op.create_index(op.f('ix_reports_id'), 'reports', ['id'], unique=False)
    op.create_index(op.f('ix_reports_report_type'), 'reports', ['report_type'], unique=False)
    op.create_table('tempi_produzione',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('part_number', sa.String(length=100), nullable=True),
    sa.Column('categoria', sa.String(length=100), nullable=True),
    sa.Column('sotto_categoria', sa.String(length=100), nullable=True),
    sa.Column('tempo_medio_minuti', sa.Float(), nullable=False),
    sa.Column('tempo_minimo_minuti', sa.Float(), nullable=True),
    sa.Column('tempo_massimo_minuti', sa.Float(), nullable=True),
    sa.Column('numero_osservazioni', sa.Integer(), nullable=False),
    sa.Column('ultima_osservazione', sa.DateTime(), nullable=False),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_categoria_sotto_categoria', 'tempi_produzione', ['categoria', 'sotto_categoria'], unique=False)
    op.create_index('idx_part_number_categoria', 'tempi_produzione', ['part_number', 'categoria'], unique=False)
    op.create_index(op.f('ix_tempi_produzione_categoria'), 'tempi_produzione', ['categoria'], unique=False)
    op.create_index(op.f('ix_tempi_produzione_id'), 'tempi_produzione', ['id'], unique=False)
    op.create_index(op.f('ix_tempi_produzione_part_number'), 'tempi_produzione', ['part_number'], unique=False)
    op.create_index(op.f('ix_tempi_produzione_sotto_categoria'), 'tempi_produzione', ['sotto_categoria'], unique=False)
    op.create_table('odl_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('odl_id', sa.Integer(), nullable=False),
    sa.Column('evento', sa.String(length=100), nullable=False),
    sa.Column('stato_precedente', sa.String(length=50), nullable=True),
    sa.Column('stato_nuovo', sa.String(length=50), nullable=False),
    sa.Column('descrizione', sa.Text(), nullable=True),
    sa.Column('responsabile', sa.String(length=100), nullable=True),
    sa.Column('nesting_id', sa.Integer(), nullable=True),
    sa.Column('autoclave_id', sa.Integer(), nullable=True),
    sa.Column('schedule_entry_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['autoclave_id'], ['autoclavi.id'], ),
    sa.ForeignKeyConstraint(['nesting_id'], ['nesting_results.id'], ),
    sa.ForeignKeyConstraint(['odl_id'], ['odl.id'], ),
    sa.ForeignKeyConstraint(['schedule_entry_id'], ['schedule_entries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_odl_logs_autoclave_id'), 'odl_logs', ['autoclave_id'], unique=False)
    op.create_index(op.f('ix_odl_logs_id'), 'odl_logs', ['id'], unique=False)
    op.create_index(op.f('ix_odl_logs_nesting_id'), 'odl_logs', ['nesting_id'], unique=False)
    op.create_index(op.f('ix_odl_logs_odl_id'), 'odl_logs', ['odl_id'], unique=False)
    op.create_index(op.f('ix_odl_logs_schedule_entry_id'), 'odl_logs', ['schedule_entry_id'], unique=False)
    op.add_column('autoclavi', sa.Column('max_load_kg', sa.Float(), nullable=True))
    op.add_column('cataloghi', sa.Column('lunghezza', sa.Float(), nullable=True))
    op.add_column('cataloghi', sa.Column('larghezza', sa.Float(), nullable=True))
    op.add_column('cataloghi', sa.Column('altezza', sa.Float(), nullable=True))
    op.add_column('nesting_results', sa.Column('odl_esclusi_ids', sa.JSON(), nullable=True))
    op.add_column('nesting_results', sa.Column('motivi_esclusione', sa.JSON(), nullable=True))
    op.add_column('nesting_results', sa.Column('stato', sa.String(length=50), nullable=True))
    # Aggiorna i record esistenti con un valore di default
    op.execute("UPDATE nesting_results SET stato = 'In sospeso' WHERE stato IS NULL")
    # Ora rendi la colonna NOT NULL
    op.alter_column('nesting_results', 'stato', nullable=False)
    op.add_column('nesting_results', sa.Column('confermato_da_ruolo', sa.String(length=50), nullable=True))
    op.add_column('nesting_results', sa.Column('peso_totale_kg', sa.Float(), nullable=True))
    op.add_column('nesting_results', sa.Column('area_piano_1', sa.Float(), nullable=True))
    op.add_column('nesting_results', sa.Column('area_piano_2', sa.Float(), nullable=True))
    op.add_column('nesting_results', sa.Column('superficie_piano_2_max', sa.Float(), nullable=True))
    op.add_column('nesting_results', sa.Column('note', sa.Text(), nullable=True))
    op.add_column('nesting_results', sa.Column('posizioni_tool', sa.JSON(), nullable=True))
    op.add_column('nesting_results', sa.Column('report_id', sa.Integer(), nullable=True))
    op.add_column('nesting_results', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.create_index(op.f('ix_nesting_results_report_id'), 'nesting_results', ['report_id'], unique=False)
    op.create_foreign_key(None, 'nesting_results', 'reports', ['report_id'], ['id'])
    op.add_column('odl', sa.Column('motivo_blocco', sa.Text(), nullable=True))
    op.add_column('schedule_entries', sa.Column('schedule_type', sa.String(length=50), nullable=True))
    # Aggiorna i record esistenti con un valore di default
    op.execute("UPDATE schedule_entries SET schedule_type = 'MANUAL' WHERE schedule_type IS NULL")
    # Ora rendi la colonna NOT NULL
    op.alter_column('schedule_entries', 'schedule_type', nullable=False)
    op.add_column('schedule_entries', sa.Column('categoria', sa.String(length=100), nullable=True))
    op.add_column('schedule_entries', sa.Column('sotto_categoria', sa.String(length=100), nullable=True))
    op.add_column('schedule_entries', sa.Column('is_recurring', sa.Boolean(), nullable=True))
    # Aggiorna i record esistenti con un valore di default
    op.execute("UPDATE schedule_entries SET is_recurring = false WHERE is_recurring IS NULL")
    # Ora rendi la colonna NOT NULL
    op.alter_column('schedule_entries', 'is_recurring', nullable=False)
    op.add_column('schedule_entries', sa.Column('recurring_frequency', sa.String(length=50), nullable=True))
    op.add_column('schedule_entries', sa.Column('pieces_per_month', sa.Integer(), nullable=True))
    op.add_column('schedule_entries', sa.Column('parent_schedule_id', sa.Integer(), nullable=True))
    op.add_column('schedule_entries', sa.Column('note', sa.Text(), nullable=True))
    op.add_column('schedule_entries', sa.Column('estimated_duration_minutes', sa.Integer(), nullable=True))
    op.alter_column('schedule_entries', 'odl_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('schedule_entries', 'end_datetime',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('schedule_entries', 'status',
               existing_type=postgresql.ENUM('SCHEDULED', 'MANUAL', 'DONE', name='schedule_entry_status'),
               type_=sa.String(length=20),
               existing_nullable=False)
    op.create_index(op.f('ix_schedule_entries_categoria'), 'schedule_entries', ['categoria'], unique=False)
    op.create_index(op.f('ix_schedule_entries_sotto_categoria'), 'schedule_entries', ['sotto_categoria'], unique=False)
    op.create_foreign_key(None, 'schedule_entries', 'schedule_entries', ['parent_schedule_id'], ['id'])
    op.add_column('tools', sa.Column('peso', sa.Float(), nullable=True))
    op.add_column('tools', sa.Column('materiale', sa.String(length=100), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('tools', 'materiale')
    op.drop_column('tools', 'peso')
    op.drop_constraint(None, 'schedule_entries', type_='foreignkey')
    op.drop_index(op.f('ix_schedule_entries_sotto_categoria'), table_name='schedule_entries')
    op.drop_index(op.f('ix_schedule_entries_categoria'), table_name='schedule_entries')
    op.alter_column('schedule_entries', 'status',
               existing_type=sa.String(length=20),
               type_=postgresql.ENUM('SCHEDULED', 'MANUAL', 'DONE', name='schedule_entry_status'),
               existing_nullable=False)
    op.alter_column('schedule_entries', 'end_datetime',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('schedule_entries', 'odl_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('schedule_entries', 'estimated_duration_minutes')
    op.drop_column('schedule_entries', 'note')
    op.drop_column('schedule_entries', 'parent_schedule_id')
    op.drop_column('schedule_entries', 'pieces_per_month')
    op.drop_column('schedule_entries', 'recurring_frequency')
    op.drop_column('schedule_entries', 'is_recurring')
    op.drop_column('schedule_entries', 'sotto_categoria')
    op.drop_column('schedule_entries', 'categoria')
    op.drop_column('schedule_entries', 'schedule_type')
    op.drop_column('odl', 'motivo_blocco')
    op.drop_constraint(None, 'nesting_results', type_='foreignkey')
    op.drop_index(op.f('ix_nesting_results_report_id'), table_name='nesting_results')
    op.drop_column('nesting_results', 'updated_at')
    op.drop_column('nesting_results', 'report_id')
    op.drop_column('nesting_results', 'posizioni_tool')
    op.drop_column('nesting_results', 'note')
    op.drop_column('nesting_results', 'superficie_piano_2_max')
    op.drop_column('nesting_results', 'area_piano_2')
    op.drop_column('nesting_results', 'area_piano_1')
    op.drop_column('nesting_results', 'peso_totale_kg')
    op.drop_column('nesting_results', 'confermato_da_ruolo')
    op.drop_column('nesting_results', 'stato')
    op.drop_column('nesting_results', 'motivi_esclusione')
    op.drop_column('nesting_results', 'odl_esclusi_ids')
    op.drop_column('cataloghi', 'altezza')
    op.drop_column('cataloghi', 'larghezza')
    op.drop_column('cataloghi', 'lunghezza')
    op.drop_column('autoclavi', 'max_load_kg')
    op.drop_index(op.f('ix_odl_logs_schedule_entry_id'), table_name='odl_logs')
    op.drop_index(op.f('ix_odl_logs_odl_id'), table_name='odl_logs')
    op.drop_index(op.f('ix_odl_logs_nesting_id'), table_name='odl_logs')
    op.drop_index(op.f('ix_odl_logs_id'), table_name='odl_logs')
    op.drop_index(op.f('ix_odl_logs_autoclave_id'), table_name='odl_logs')
    op.drop_table('odl_logs')
    op.drop_index(op.f('ix_tempi_produzione_sotto_categoria'), table_name='tempi_produzione')
    op.drop_index(op.f('ix_tempi_produzione_part_number'), table_name='tempi_produzione')
    op.drop_index(op.f('ix_tempi_produzione_id'), table_name='tempi_produzione')
    op.drop_index(op.f('ix_tempi_produzione_categoria'), table_name='tempi_produzione')
    op.drop_index('idx_part_number_categoria', table_name='tempi_produzione')
    op.drop_index('idx_categoria_sotto_categoria', table_name='tempi_produzione')
    op.drop_table('tempi_produzione')
    op.drop_index(op.f('ix_reports_report_type'), table_name='reports')
    op.drop_index(op.f('ix_reports_id'), table_name='reports')
    op.drop_index(op.f('ix_reports_generated_for_user_id'), table_name='reports')
    op.drop_index(op.f('ix_reports_filename'), table_name='reports')
    op.drop_table('reports')
    # ### end Alembic commands ###
