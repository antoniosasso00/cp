# CarbonPilot - Schema Summary
Generato il: 2025-06-05 18:41:17

📊 STATISTICHE
====================
• Modelli SQLAlchemy: 19
• Schemi Pydantic: 91
• Totale componenti: 110

📊 MODELLI SQLALCHEMY (19 trovati)
==================================================

🏗️  Autoclave (tabella: autoclavi)
   📝 Modello che rappresenta le autoclavi utilizzate per la cura delle parti
   🔗 Relazioni (3):
      • nesting_results → NestingResult (back_populates: autoclave)
      • batch_nesting → BatchNesting (back_populates: autoclave)
      • schedule_entries → ScheduleEntry (back_populates: autoclave)

🏗️  User (tabella: users)
   📝 Modello utente - predisposto per autenticazione futura

🏗️  BatchHistory (tabella: batch_history)
   📝 Modello per tracciare lo storico completo dei batch terminati.
Salva informazioni dettagliate quando un batch passa allo stato "cured".
   🔗 Relazioni (1):
      • batch → BatchNesting (back_populates: history_records)

🏗️  BatchNesting (tabella: batch_nesting)
   📝 Modello per salvare i batch di nesting con configurazioni e parametri.
Un batch raggruppa più nesting results e mantiene i parametri di generazione.
   🔗 Relazioni (3):
      • autoclave → Autoclave (back_populates: batch_nesting)
      • nesting_results → NestingResult (back_populates: batch)
      • history_records → BatchHistory (back_populates: batch)

🏗️  Catalogo (tabella: cataloghi)
   📝 Modello che identifica univocamente i Part Number (PN) prodotti dall'azienda
   🔗 Relazioni (2):
      • parti → Parte (back_populates: catalogo)
      • standard_times → StandardTime (back_populates: catalogo)

🏗️  CicloCura (tabella: cicli_cura)
   📝 Modello che rappresenta i cicli di cura applicabili in autoclave
   🔗 Relazioni (1):
      • parti → Parte (back_populates: ciclo_cura)

🏗️  NestingResult (tabella: nesting_results)
   📝 Modello per salvare i risultati delle operazioni di nesting.
   🔗 Relazioni (4):
      • autoclave → Autoclave (back_populates: nesting_results)
      • batch → BatchNesting (back_populates: nesting_results)
      • odl_list → ODL
      • report → Report (back_populates: nesting_results)

🏗️  ODL (tabella: odl)
   📝 Modello che rappresenta gli Ordini di Lavoro (ODL)
   🔗 Relazioni (7):
      • parte → Parte (back_populates: odl)
      • tool → Tool (back_populates: odl)
      • tempo_fasi → TempoFase (back_populates: odl)
      • nesting_results → NestingResult (back_populates: odl_list)
      • logs → ODLLog (back_populates: odl)
      • state_logs → StateLog (back_populates: odl)
      • schedule_entries → ScheduleEntry (back_populates: odl)

🏗️  ODLLog (tabella: odl_logs)
   📝 Modello per tracciare i log di avanzamento degli ODL
   🔗 Relazioni (4):
      • odl → ODL (back_populates: logs)
      • nesting → NestingResult
      • autoclave → Autoclave
      • schedule_entry → ScheduleEntry

🏗️  Parte (tabella: parti)
   📝 Modello che rappresenta le parti prodotte associate a un PN del Catalogo
   🔗 Relazioni (4):
      • ciclo_cura → CicloCura (back_populates: parti)
      • tools → Tool (back_populates: parti)
      • odl → ODL (back_populates: parte)
      • catalogo → Catalogo (back_populates: parti)

🏗️  Report (tabella: reports)
   📝 Modello per i report PDF generati
   🔗 Relazioni (1):
      • nesting_results → NestingResult (back_populates: report)

🏗️  ScheduleEntry (tabella: schedule_entries)
   📝 Modello che rappresenta le schedulazioni degli ODL nelle autoclavi
   🔗 Relazioni (2):
      • odl → ODL (back_populates: schedule_entries)
      • autoclave → Autoclave (back_populates: schedule_entries)

🏗️  StandardTime (tabella: standard_times)
   📝 Modello per i tempi standard di produzione per fase.
Utilizzato per benchmarking e controllo delle performance.
   🔗 Relazioni (1):
      • catalogo → Catalogo (back_populates: standard_times)

🏗️  StateLog (tabella: state_logs)
   📝 Modello per tracciare specificamente i cambi di stato degli ODL con timestamp precisi
   🔗 Relazioni (1):
      • odl → ODL (back_populates: state_logs)

🏗️  SystemLog (tabella: system_logs)
   📝 Modello per tracciare tutti gli eventi del sistema

🏗️  TempoFase (tabella: tempo_fasi)
   📝 Modello che rappresenta i tempi di lavorazione per le diverse fasi di produzione
   🔗 Relazioni (1):
      • odl → ODL (back_populates: tempo_fasi)

🏗️  TempoProduzione (tabella: tempi_produzione)
   📝 Modello che rappresenta i tempi di produzione storici per part number, categoria e sotto-categoria

🏗️  Tool (tabella: tools)
   📝 Modello che rappresenta gli stampi (tool) utilizzati per la laminazione
   🔗 Relazioni (2):
      • parti → Parte (back_populates: tools)
      • odl → ODL (back_populates: tool)

🏗️  ToolSimple (tabella: tools)
   📝 Modello Tool semplificato che corrisponde alla struttura del database attuale
   🔗 Relazioni (1):

📋 SCHEMI PYDANTIC (91 trovati)
==================================================

📄 AutoclaveBase
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (11):
      • nome: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Nome identificativo dell'autoclave
      • codice: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Codice univoco dell'autoclave
      • lunghezza: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Lunghezza interna in mm
      • larghezza_piano: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Larghezza utile del piano di carico
      • num_linee_vuoto: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Numero di linee vuoto disponibili
      • temperatura_max: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Temperatura massima in gradi Celsius
      • pressione_max: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Pressione massima in bar
      • max_load_kg: typing.Optional[float] (opzionale)
        💬 Carico massimo supportato dall'autoclave in kg
      • produttore: typing.Optional[str] (opzionale)
        💬 Nome del produttore dell'autoclave
      • anno_produzione: typing.Optional[int] (opzionale)
        💬 Anno di produzione dell'autoclave
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sull'autoclave

📄 AutoclaveCreate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (12):
      • nome: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Nome identificativo dell'autoclave
      • codice: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Codice univoco dell'autoclave
      • lunghezza: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Lunghezza interna in mm
      • larghezza_piano: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Larghezza utile del piano di carico
      • num_linee_vuoto: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Numero di linee vuoto disponibili
      • temperatura_max: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Temperatura massima in gradi Celsius
      • pressione_max: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Pressione massima in bar
      • max_load_kg: typing.Optional[float] (opzionale)
        💬 Carico massimo supportato dall'autoclave in kg
      • produttore: typing.Optional[str] (opzionale)
        💬 Nome del produttore dell'autoclave
      • anno_produzione: typing.Optional[int] (opzionale)
        💬 Anno di produzione dell'autoclave
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sull'autoclave
      • stato: <enum 'StatoAutoclaveEnum'> (opzionale, default=StatoAutoclaveEnum.DISPONIBILE)
        💬 Stato attuale dell'autoclave

📄 AutoclaveResponse
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (16):
      • nome: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Nome identificativo dell'autoclave
      • codice: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Codice univoco dell'autoclave
      • lunghezza: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Lunghezza interna in mm
      • larghezza_piano: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Larghezza utile del piano di carico
      • num_linee_vuoto: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Numero di linee vuoto disponibili
      • temperatura_max: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Temperatura massima in gradi Celsius
      • pressione_max: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Pressione massima in bar
      • max_load_kg: typing.Optional[float] (opzionale)
        💬 Carico massimo supportato dall'autoclave in kg
      • produttore: typing.Optional[str] (opzionale)
        💬 Nome del produttore dell'autoclave
      • anno_produzione: typing.Optional[int] (opzionale)
        💬 Anno di produzione dell'autoclave
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sull'autoclave
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco dell'autoclave
      • stato: <enum 'StatoAutoclaveEnum'> (obbligatorio, default=PydanticUndefined)
        💬 Stato attuale dell'autoclave
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora di creazione del record
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora dell'ultimo aggiornamento
      • area_piano: typing.Optional[float] (opzionale)
        💬 Area del piano dell'autoclave in cm² (calcolata)

📄 AutoclaveUpdate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (12):
      • nome: typing.Optional[str] (opzionale)
        💬 Nome identificativo dell'autoclave
      • codice: typing.Optional[str] (opzionale)
        💬 Codice univoco dell'autoclave
      • lunghezza: typing.Optional[float] (opzionale)
        💬 Lunghezza interna in mm
      • larghezza_piano: typing.Optional[float] (opzionale)
        💬 Larghezza utile del piano di carico
      • num_linee_vuoto: typing.Optional[int] (opzionale)
        💬 Numero di linee vuoto disponibili
      • temperatura_max: typing.Optional[float] (opzionale)
        💬 Temperatura massima in gradi Celsius
      • pressione_max: typing.Optional[float] (opzionale)
        💬 Pressione massima in bar
      • max_load_kg: typing.Optional[float] (opzionale)
        💬 Carico massimo supportato dall'autoclave in kg
      • stato: typing.Optional[schemas.autoclave.StatoAutoclaveEnum] (opzionale)
        💬 Stato attuale dell'autoclave
      • produttore: typing.Optional[str] (opzionale)
        💬 Nome del produttore dell'autoclave
      • anno_produzione: typing.Optional[int] (opzionale)
        💬 Anno di produzione dell'autoclave
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sull'autoclave

📄 BatchNestingBase
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (7):
      • nome: typing.Optional[str] (opzionale)
        💬 Nome opzionale del batch
      • stato: <enum 'StatoBatchNestingEnum'> (opzionale, default=StatoBatchNestingEnum.SOSPESO)
        💬 Stato corrente del batch
      • autoclave_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID dell'autoclave
      • odl_ids: typing.List[int] (opzionale, default=[])
        💬 Lista degli ID ODL inclusi
      • parametri: typing.Optional[schemas.batch_nesting.ParametriNesting] (opzionale)
        💬 Parametri utilizzati per il nesting
      • configurazione_json: typing.Optional[schemas.batch_nesting.ConfigurazioneLayout] (opzionale)
        💬 Configurazione layout
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive

📄 BatchNestingCreate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (9):
      • nome: typing.Optional[str] (opzionale)
        💬 Nome opzionale del batch
      • stato: <enum 'StatoBatchNestingEnum'> (opzionale, default=StatoBatchNestingEnum.SOSPESO)
        💬 Stato corrente del batch
      • autoclave_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID dell'autoclave
      • odl_ids: typing.List[int] (opzionale, default=[])
        💬 Lista degli ID ODL inclusi
      • parametri: typing.Optional[schemas.batch_nesting.ParametriNesting] (opzionale)
        💬 Parametri utilizzati per il nesting
      • configurazione_json: typing.Optional[schemas.batch_nesting.ConfigurazioneLayout] (opzionale)
        💬 Configurazione layout
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive
      • creato_da_utente: typing.Optional[str] (opzionale)
        💬 ID dell'utente creatore
      • creato_da_ruolo: typing.Optional[str] (opzionale)
        💬 Ruolo dell'utente creatore

📄 BatchNestingList
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (8):
      • id: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • nome: typing.Optional[str] (obbligatorio, default=PydanticUndefined)
      • stato: <enum 'StatoBatchNestingEnum'> (obbligatorio, default=PydanticUndefined)
      • autoclave_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • numero_nesting: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • peso_totale_kg: <class 'float'> (obbligatorio, default=PydanticUndefined)
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)

📄 BatchNestingResponse
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (28):
      • nome: typing.Optional[str] (opzionale)
        💬 Nome opzionale del batch
      • stato: <enum 'StatoBatchNestingEnum'> (opzionale, default=StatoBatchNestingEnum.SOSPESO)
        💬 Stato corrente del batch
      • autoclave_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID dell'autoclave
      • odl_ids: typing.List[int] (opzionale, default=[])
        💬 Lista degli ID ODL inclusi
      • parametri: typing.Optional[schemas.batch_nesting.ParametriNesting] (opzionale)
        💬 Parametri utilizzati per il nesting
      • configurazione_json: typing.Optional[schemas.batch_nesting.ConfigurazioneLayout] (opzionale)
        💬 Configurazione layout
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive
      • id: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 ID UUID del batch
      • numero_nesting: <class 'int'> (opzionale, default=0)
        💬 Numero di nesting nel batch
      • peso_totale_kg: <class 'float'> (opzionale, default=0)
        💬 Peso totale in kg
      • area_totale_utilizzata: <class 'float'> (opzionale, default=0)
        💬 Area totale utilizzata in cm²
      • valvole_totali_utilizzate: <class 'int'> (opzionale, default=0)
        💬 Valvole totali utilizzate
      • efficiency: <class 'float'> (opzionale, default=0.0)
        💬 Efficienza complessiva del batch
      • area_pct: typing.Optional[float] (opzionale)
        💬 Percentuale di area utilizzata
      • vacuum_util_pct: typing.Optional[float] (opzionale)
        💬 Percentuale di utilizzo linee vuoto
      • efficiency_score: typing.Optional[float] (opzionale)
        💬 Score di efficienza: 0.7·area + 0.3·vacuum
      • efficiency_level: typing.Optional[str] (opzionale)
        💬 Livello di efficienza: green/yellow/red
      • efficiency_color_class: typing.Optional[str] (opzionale)
        💬 Classe CSS per il badge di efficienza
      • creato_da_utente: typing.Optional[str] (opzionale)
      • creato_da_ruolo: typing.Optional[str] (opzionale)
      • confermato_da_utente: typing.Optional[str] (opzionale)
      • confermato_da_ruolo: typing.Optional[str] (opzionale)
      • data_conferma: typing.Optional[datetime.datetime] (opzionale)
      • data_completamento: typing.Optional[datetime.datetime] (opzionale)
        💬 Data e ora di completamento del ciclo
      • durata_ciclo_minuti: typing.Optional[int] (opzionale)
        💬 Durata del ciclo di cura in minuti
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
      • stato_descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione testuale dello stato

📄 BatchNestingUpdate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (8):
      • nome: typing.Optional[str] (opzionale)
      • stato: typing.Optional[schemas.batch_nesting.StatoBatchNestingEnum] (opzionale)
      • odl_ids: typing.Optional[typing.List[int]] (opzionale)
      • parametri: typing.Optional[schemas.batch_nesting.ParametriNesting] (opzionale)
      • configurazione_json: typing.Optional[schemas.batch_nesting.ConfigurazioneLayout] (opzionale)
      • note: typing.Optional[str] (opzionale)
      • confermato_da_utente: typing.Optional[str] (opzionale)
      • confermato_da_ruolo: typing.Optional[str] (opzionale)

📄 ConfigurazioneLayout
   📝 Schema per la configurazione del layout generato dal frontend
   🏷️  Campi (5):
      • canvas_width: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Larghezza del canvas in pixel
      • canvas_height: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Altezza del canvas in pixel
      • scale_factor: <class 'float'> (opzionale, default=1.0)
        💬 Fattore di scala del canvas
      • tool_positions: typing.List[typing.Dict[str, typing.Any]] (opzionale, default=[])
        💬 Posizioni dei tool sul canvas
      • plane_assignments: typing.Dict[str, int] (opzionale, default={})
        💬 Assegnazione dei tool ai piani

📄 NestingExcludedODL
   📝 Schema per ODL esclusi dal nesting
   🏷️  Campi (4):
      • odl_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID dell'ODL escluso
      • reason: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Motivo esclusione
      • part_number: typing.Optional[str] (opzionale)
        💬 Part number della parte
      • tool_dimensions: typing.Optional[str] (opzionale)
        💬 Dimensioni tool

📄 NestingMetricsResponse
   📝 Schema per le metriche del nesting v1.4.17-DEMO
   🏷️  Campi (15):
      • area_utilization_pct: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Percentuale utilizzo area
      • vacuum_util_pct: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Percentuale utilizzo linee vuoto
      • efficiency_score: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Score efficienza: 0.8·area + 0.2·vacuum
      • weight_utilization_pct: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Percentuale utilizzo peso
      • time_solver_ms: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Tempo risoluzione solver in ms
      • fallback_used: <class 'bool'> (obbligatorio, default=PydanticUndefined)
        💬 Se è stato usato algoritmo fallback
      • heuristic_iters: <class 'int'> (opzionale, default=0)
        💬 Numero iterazioni euristica RRGH
      • algorithm_status: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Stato algoritmo (CP-SAT_OPTIMAL, BL_FFD_FALLBACK, etc.)
      • invalid: <class 'bool'> (opzionale, default=False)
        💬 True se ci sono sovrapposizioni non risolte nel layout
      • rotation_used: <class 'bool'> (opzionale, default=False)
        💬 True se è stata utilizzata rotazione 90° nel layout
      • total_area_cm2: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Area totale utilizzata in cm²
      • total_weight_kg: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Peso totale in kg
      • vacuum_lines_used: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Linee vuoto utilizzate
      • pieces_positioned: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Numero pezzi posizionati
      • pieces_excluded: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Numero pezzi esclusi

📄 NestingSolveRequest
   📝 Schema per la richiesta di risoluzione nesting v1.4.12-DEMO
   🏷️  Campi (8):
      • autoclave_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID dell'autoclave da utilizzare
      • odl_ids: typing.Optional[typing.List[int]] (opzionale)
        💬 Lista specifica di ODL (se None, usa tutti quelli disponibili)
      • padding_mm: <class 'float'> (opzionale, default=20.0)
        💬 Padding tra tool in mm
      • min_distance_mm: <class 'float'> (opzionale, default=15.0)
        💬 Distanza minima dai bordi in mm
      • vacuum_lines_capacity: <class 'int'> (opzionale, default=10)
        💬 Capacità massima linee vuoto
      • allow_heuristic: <class 'bool'> (opzionale, default=False)
        💬 Abilita euristica RRGH
      • timeout_override: typing.Optional[int] (opzionale)
        💬 Override timeout in secondi
      • heavy_piece_threshold_kg: <class 'float'> (opzionale, default=50.0)
        💬 Soglia peso per constraint posizionamento

📄 NestingSolveResponse
   📝 Schema per la risposta dell'endpoint solve v1.4.12-DEMO
   🏷️  Campi (9):
      • success: <class 'bool'> (obbligatorio, default=PydanticUndefined)
        💬 Se il nesting è stato risolto con successo
      • message: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Messaggio descrittivo del risultato
      • positioned_tools: typing.List[schemas.batch_nesting.NestingToolPosition] (opzionale, default=[])
        💬 Tool posizionati
      • excluded_odls: typing.List[schemas.batch_nesting.NestingExcludedODL] (opzionale, default=[])
        💬 ODL esclusi
      • excluded_reasons: typing.Dict[str, int] (opzionale, default={})
        💬 Riassunto motivi esclusione: {motivo: count}
      • overlaps: typing.Optional[typing.List[typing.Dict[str, typing.Any]]] (opzionale)
        💬 Dettagli sovrapposizioni rilevate nel layout
      • metrics: <class 'schemas.batch_nesting.NestingMetricsResponse'> (obbligatorio, default=PydanticUndefined)
        💬 Metriche dettagliate del nesting
      • autoclave_info: typing.Dict[str, typing.Any] (obbligatorio, default=PydanticUndefined)
        💬 Informazioni autoclave utilizzata
      • solved_at: <class 'datetime.datetime'> (opzionale, default=PydanticUndefined)
        💬 Timestamp risoluzione

📄 NestingToolPosition
   📝 Schema per la posizione di un tool nel nesting
   🏷️  Campi (9):
      • odl_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID dell'ODL
      • tool_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID del tool
      • x: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Posizione X in mm
      • y: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Posizione Y in mm
      • width: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Larghezza in mm
      • height: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Altezza in mm
      • rotated: <class 'bool'> (opzionale, default=False)
        💬 Se il tool è ruotato
      • plane: <class 'int'> (opzionale, default=1)
        💬 Piano di posizionamento (1 o 2)
      • weight_kg: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Peso del tool in kg

📄 ParametriNesting
   📝 Schema per validare i parametri utilizzati nella generazione del nesting
   🏷️  Campi (6):
      • padding_mm: <class 'float'> (opzionale, default=20.0)
        💬 Padding in millimetri tra i tool
      • min_distance_mm: <class 'float'> (opzionale, default=15.0)
        💬 Distanza minima tra i tool in millimetri
      • priorita_area: <class 'bool'> (opzionale, default=True)
        💬 Priorità alla massimizzazione dell'area utilizzata
      • accorpamento_odl: <class 'bool'> (opzionale, default=False)
        💬 Permette di accorpare ODL simili
      • use_secondary_plane: <class 'bool'> (opzionale, default=False)
        💬 Utilizza il piano secondario se disponibile
      • max_weight_per_plane_kg: typing.Optional[float] (opzionale)
        💬 Peso massimo per piano in kg

📄 CatalogoBase
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (5):
      • descrizione: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Descrizione dettagliata del part number
      • categoria: typing.Optional[str] (opzionale)
        💬 Categoria del prodotto
      • sotto_categoria: typing.Optional[str] (opzionale)
        💬 Sotto-categoria del prodotto
      • attivo: <class 'bool'> (opzionale, default=True)
        💬 Indica se il part number è ancora attivo nel catalogo
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sul part number

📄 CatalogoCreate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (6):
      • descrizione: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Descrizione dettagliata del part number
      • categoria: typing.Optional[str] (opzionale)
        💬 Categoria del prodotto
      • sotto_categoria: typing.Optional[str] (opzionale)
        💬 Sotto-categoria del prodotto
      • attivo: <class 'bool'> (opzionale, default=True)
        💬 Indica se il part number è ancora attivo nel catalogo
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sul part number
      • part_number: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Codice Part Number univoco

📄 CatalogoResponse
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (8):
      • descrizione: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Descrizione dettagliata del part number
      • categoria: typing.Optional[str] (opzionale)
        💬 Categoria del prodotto
      • sotto_categoria: typing.Optional[str] (opzionale)
        💬 Sotto-categoria del prodotto
      • attivo: <class 'bool'> (opzionale, default=True)
        💬 Indica se il part number è ancora attivo nel catalogo
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sul part number
      • part_number: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Codice Part Number univoco
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora di creazione del record
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora dell'ultimo aggiornamento

📄 CatalogoUpdate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (5):
      • descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione dettagliata del part number
      • categoria: typing.Optional[str] (opzionale)
        💬 Categoria del prodotto
      • sotto_categoria: typing.Optional[str] (opzionale)
        💬 Sotto-categoria del prodotto
      • attivo: typing.Optional[bool] (opzionale)
        💬 Indica se il part number è ancora attivo
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sul part number

📄 CicloCuraBase
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (9):
      • nome: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Nome identificativo del ciclo di cura
      • temperatura_stasi1: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Temperatura della prima stasi in gradi Celsius
      • pressione_stasi1: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Pressione della prima stasi in bar
      • durata_stasi1: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Durata della prima stasi in minuti
      • attiva_stasi2: <class 'bool'> (opzionale, default=False)
        💬 Indica se è presente la seconda stasi
      • temperatura_stasi2: typing.Optional[float] (opzionale)
        💬 Temperatura della seconda stasi in gradi Celsius
      • pressione_stasi2: typing.Optional[float] (opzionale)
        💬 Pressione della seconda stasi in bar
      • durata_stasi2: typing.Optional[int] (opzionale)
        💬 Durata della seconda stasi in minuti
      • descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione dettagliata del ciclo di cura

📄 CicloCuraCreate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (9):
      • nome: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Nome identificativo del ciclo di cura
      • temperatura_stasi1: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Temperatura della prima stasi in gradi Celsius
      • pressione_stasi1: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Pressione della prima stasi in bar
      • durata_stasi1: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Durata della prima stasi in minuti
      • attiva_stasi2: <class 'bool'> (opzionale, default=False)
        💬 Indica se è presente la seconda stasi
      • temperatura_stasi2: typing.Optional[float] (opzionale)
        💬 Temperatura della seconda stasi in gradi Celsius
      • pressione_stasi2: typing.Optional[float] (opzionale)
        💬 Pressione della seconda stasi in bar
      • durata_stasi2: typing.Optional[int] (opzionale)
        💬 Durata della seconda stasi in minuti
      • descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione dettagliata del ciclo di cura

📄 CicloCuraResponse
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (14):
      • nome: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Nome identificativo del ciclo di cura
      • temperatura_stasi1: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Temperatura della prima stasi in gradi Celsius
      • pressione_stasi1: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Pressione della prima stasi in bar
      • durata_stasi1: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Durata della prima stasi in minuti
      • attiva_stasi2: <class 'bool'> (opzionale, default=False)
        💬 Indica se è presente la seconda stasi
      • temperatura_stasi2: typing.Optional[float] (opzionale)
        💬 Temperatura della seconda stasi in gradi Celsius
      • pressione_stasi2: typing.Optional[float] (opzionale)
        💬 Pressione della seconda stasi in bar
      • durata_stasi2: typing.Optional[int] (opzionale)
        💬 Durata della seconda stasi in minuti
      • descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione dettagliata del ciclo di cura
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco del ciclo di cura
      • temperatura_max: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Temperatura massima in gradi Celsius
      • pressione_max: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Pressione massima in bar
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora di creazione del record
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora dell'ultimo aggiornamento

📄 CicloCuraUpdate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (9):
      • nome: typing.Optional[str] (opzionale)
        💬 Nome identificativo del ciclo di cura
      • temperatura_stasi1: typing.Optional[float] (opzionale)
        💬 Temperatura della prima stasi in gradi Celsius
      • pressione_stasi1: typing.Optional[float] (opzionale)
        💬 Pressione della prima stasi in bar
      • durata_stasi1: typing.Optional[int] (opzionale)
        💬 Durata della prima stasi in minuti
      • attiva_stasi2: typing.Optional[bool] (opzionale)
        💬 Indica se è presente la seconda stasi
      • temperatura_stasi2: typing.Optional[float] (opzionale)
        💬 Temperatura della seconda stasi in gradi Celsius
      • pressione_stasi2: typing.Optional[float] (opzionale)
        💬 Pressione della seconda stasi in bar
      • durata_stasi2: typing.Optional[int] (opzionale)
        💬 Durata della seconda stasi in minuti
      • descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione dettagliata del ciclo di cura

📄 ODLBase
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (7):
      • parte_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID della parte associata all'ordine di lavoro
      • tool_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID del tool utilizzato per l'ordine di lavoro
      • priorita: <class 'int'> (opzionale, default=1)
        💬 Priorità dell'ordine di lavoro (numero più alto = priorità maggiore)
      • status: typing.Literal['Preparazione', 'Laminazione', 'In Coda', 'Attesa Cura', 'Cura', 'Finito'] (opzionale, default=Preparazione)
        💬 Stato corrente dell'ordine di lavoro
      • include_in_std: <class 'bool'> (opzionale, default=True)
        💬 Indica se includere questo ODL nel calcolo dei tempi standard
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sull'ordine di lavoro
      • motivo_blocco: typing.Optional[str] (opzionale)
        💬 Motivo per cui l'ODL è bloccato

📄 ODLCreate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (7):
      • parte_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID della parte associata all'ordine di lavoro
      • tool_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID del tool utilizzato per l'ordine di lavoro
      • priorita: <class 'int'> (opzionale, default=1)
        💬 Priorità dell'ordine di lavoro (numero più alto = priorità maggiore)
      • status: typing.Literal['Preparazione', 'Laminazione', 'In Coda', 'Attesa Cura', 'Cura', 'Finito'] (opzionale, default=Preparazione)
        💬 Stato corrente dell'ordine di lavoro
      • include_in_std: <class 'bool'> (opzionale, default=True)
        💬 Indica se includere questo ODL nel calcolo dei tempi standard
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sull'ordine di lavoro
      • motivo_blocco: typing.Optional[str] (opzionale)
        💬 Motivo per cui l'ODL è bloccato

📄 ODLRead
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (12):
      • parte_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID della parte associata all'ordine di lavoro
      • tool_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID del tool utilizzato per l'ordine di lavoro
      • priorita: <class 'int'> (opzionale, default=1)
        💬 Priorità dell'ordine di lavoro (numero più alto = priorità maggiore)
      • status: typing.Literal['Preparazione', 'Laminazione', 'In Coda', 'Attesa Cura', 'Cura', 'Finito'] (opzionale, default=Preparazione)
        💬 Stato corrente dell'ordine di lavoro
      • include_in_std: <class 'bool'> (opzionale, default=True)
        💬 Indica se includere questo ODL nel calcolo dei tempi standard
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sull'ordine di lavoro
      • motivo_blocco: typing.Optional[str] (opzionale)
        💬 Motivo per cui l'ODL è bloccato
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco dell'ordine di lavoro
      • parte: <class 'schemas.odl.ParteInODLResponse'> (obbligatorio, default=PydanticUndefined)
        💬 Informazioni sulla parte associata
      • tool: <class 'schemas.odl.ToolInODLResponse'> (obbligatorio, default=PydanticUndefined)
        💬 Informazioni sul tool utilizzato
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora di creazione del record
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora dell'ultimo aggiornamento

📄 ODLReadBasic
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (10):
      • parte_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID della parte associata all'ordine di lavoro
      • tool_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID del tool utilizzato per l'ordine di lavoro
      • priorita: <class 'int'> (opzionale, default=1)
        💬 Priorità dell'ordine di lavoro (numero più alto = priorità maggiore)
      • status: typing.Literal['Preparazione', 'Laminazione', 'In Coda', 'Attesa Cura', 'Cura', 'Finito'] (opzionale, default=Preparazione)
        💬 Stato corrente dell'ordine di lavoro
      • include_in_std: <class 'bool'> (opzionale, default=True)
        💬 Indica se includere questo ODL nel calcolo dei tempi standard
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sull'ordine di lavoro
      • motivo_blocco: typing.Optional[str] (opzionale)
        💬 Motivo per cui l'ODL è bloccato
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco dell'ordine di lavoro
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora di creazione del record
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora dell'ultimo aggiornamento

📄 ODLUpdate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (7):
      • parte_id: typing.Optional[int] (opzionale)
        💬 ID della parte associata all'ordine di lavoro
      • tool_id: typing.Optional[int] (opzionale)
        💬 ID del tool utilizzato per l'ordine di lavoro
      • priorita: typing.Optional[int] (opzionale)
        💬 Priorità dell'ordine di lavoro (numero più alto = priorità maggiore)
      • status: typing.Optional[typing.Literal['Preparazione', 'Laminazione', 'In Coda', 'Attesa Cura', 'Cura', 'Finito']] (opzionale)
        💬 Stato corrente dell'ordine di lavoro
      • include_in_std: typing.Optional[bool] (opzionale)
        💬 Indica se includere questo ODL nel calcolo dei tempi standard
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sull'ordine di lavoro
      • motivo_blocco: typing.Optional[str] (opzionale)
        💬 Motivo per cui l'ODL è bloccato

📄 ParteInODLResponse
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (4):
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco della parte
      • part_number: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Part Number associato dal catalogo
      • descrizione_breve: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Descrizione breve della parte
      • num_valvole_richieste: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Numero di valvole richieste per questa parte

📄 ToolInODLResponse
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (3):
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco dello stampo
      • part_number_tool: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Part Number Tool identificativo univoco dello stampo
      • descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione dettagliata dello stampo

📄 ODLAlertBase
   📝 Schema base per gli alert ODL
   🏷️  Campi (5):
      • odl_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID dell'ODL associato
      • tipo: typing.Literal['ritardo', 'blocco', 'warning', 'critico'] (obbligatorio, default=PydanticUndefined)
        💬 Tipo di alert
      • titolo: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Titolo dell'alert
      • descrizione: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Descrizione dettagliata
      • azione_suggerita: typing.Optional[str] (opzionale)
        💬 Azione suggerita per risolvere

📄 ODLAlertCreate
   📝 Schema per la creazione di un alert ODL
   🏷️  Campi (5):
      • odl_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID dell'ODL associato
      • tipo: typing.Literal['ritardo', 'blocco', 'warning', 'critico'] (obbligatorio, default=PydanticUndefined)
        💬 Tipo di alert
      • titolo: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Titolo dell'alert
      • descrizione: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Descrizione dettagliata
      • azione_suggerita: typing.Optional[str] (opzionale)
        💬 Azione suggerita per risolvere

📄 ODLAlertRead
   📝 Schema per la lettura di un alert ODL
   🏷️  Campi (10):
      • odl_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID dell'ODL associato
      • tipo: typing.Literal['ritardo', 'blocco', 'warning', 'critico'] (obbligatorio, default=PydanticUndefined)
        💬 Tipo di alert
      • titolo: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Titolo dell'alert
      • descrizione: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Descrizione dettagliata
      • azione_suggerita: typing.Optional[str] (opzionale)
        💬 Azione suggerita per risolvere
      • id: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco dell'alert
      • timestamp: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Timestamp di creazione
      • parte_nome: typing.Optional[str] (opzionale)
        💬 Nome della parte
      • tool_nome: typing.Optional[str] (opzionale)
        💬 Nome del tool
      • tempo_in_stato: typing.Optional[int] (opzionale)
        💬 Tempo nello stato corrente (minuti)

📄 ODLAlertsResponse
   📝 Schema per la risposta con lista di alert
   🏷️  Campi (3):
      • alerts: typing.List[schemas.odl_alerts.ODLAlertRead] (obbligatorio, default=PydanticUndefined)
        💬 Lista degli alert
      • totale: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Numero totale di alert
      • per_tipo: <class 'dict'> (obbligatorio, default=PydanticUndefined)
        💬 Conteggio per tipo di alert

📄 ODLLogBase
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (8):
      • evento: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Tipo di evento
      • stato_precedente: typing.Optional[str] (opzionale)
        💬 Stato precedente dell'ODL
      • stato_nuovo: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Nuovo stato dell'ODL
      • descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione dettagliata dell'evento
      • responsabile: typing.Optional[str] (opzionale)
        💬 Responsabile dell'evento
      • nesting_id: typing.Optional[int] (opzionale)
        💬 ID del nesting associato
      • autoclave_id: typing.Optional[int] (opzionale)
        💬 ID dell'autoclave utilizzata
      • schedule_entry_id: typing.Optional[int] (opzionale)
        💬 ID della schedulazione associata

📄 ODLLogCreate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (9):
      • evento: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Tipo di evento
      • stato_precedente: typing.Optional[str] (opzionale)
        💬 Stato precedente dell'ODL
      • stato_nuovo: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Nuovo stato dell'ODL
      • descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione dettagliata dell'evento
      • responsabile: typing.Optional[str] (opzionale)
        💬 Responsabile dell'evento
      • nesting_id: typing.Optional[int] (opzionale)
        💬 ID del nesting associato
      • autoclave_id: typing.Optional[int] (opzionale)
        💬 ID dell'autoclave utilizzata
      • schedule_entry_id: typing.Optional[int] (opzionale)
        💬 ID della schedulazione associata
      • odl_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID dell'ODL

📄 ODLLogRead
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (13):
      • evento: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Tipo di evento
      • stato_precedente: typing.Optional[str] (opzionale)
        💬 Stato precedente dell'ODL
      • stato_nuovo: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Nuovo stato dell'ODL
      • descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione dettagliata dell'evento
      • responsabile: typing.Optional[str] (opzionale)
        💬 Responsabile dell'evento
      • nesting_id: typing.Optional[int] (opzionale)
        💬 ID del nesting associato
      • autoclave_id: typing.Optional[int] (opzionale)
        💬 ID dell'autoclave utilizzata
      • schedule_entry_id: typing.Optional[int] (opzionale)
        💬 ID della schedulazione associata
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • odl_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • timestamp: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
      • nesting_stato: typing.Optional[str] (opzionale)
        💬 Stato del nesting associato
      • autoclave_nome: typing.Optional[str] (opzionale)
        💬 Nome dell'autoclave

📄 ODLMonitoringRead
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (26):
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • parte_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • tool_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • priorita: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • status: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • note: typing.Optional[str] (obbligatorio, default=PydanticUndefined)
      • motivo_blocco: typing.Optional[str] (obbligatorio, default=PydanticUndefined)
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
      • parte_nome: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Nome della parte
      • parte_categoria: typing.Optional[str] (opzionale)
        💬 Categoria della parte
      • tool_nome: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Nome del tool
      • nesting_id: typing.Optional[int] (opzionale)
        💬 ID del nesting corrente
      • nesting_stato: typing.Optional[str] (opzionale)
        💬 Stato del nesting
      • nesting_created_at: typing.Optional[datetime.datetime] (opzionale)
        💬 Data creazione nesting
      • autoclave_id: typing.Optional[int] (opzionale)
        💬 ID dell'autoclave assegnata
      • autoclave_nome: typing.Optional[str] (opzionale)
        💬 Nome dell'autoclave
      • ciclo_cura_id: typing.Optional[int] (opzionale)
        💬 ID del ciclo di cura
      • ciclo_cura_nome: typing.Optional[str] (opzionale)
        💬 Nome del ciclo di cura
      • schedule_entry_id: typing.Optional[int] (opzionale)
        💬 ID della schedulazione
      • schedule_start: typing.Optional[datetime.datetime] (opzionale)
        💬 Inizio schedulazione
      • schedule_end: typing.Optional[datetime.datetime] (opzionale)
        💬 Fine schedulazione
      • schedule_status: typing.Optional[str] (opzionale)
        💬 Stato schedulazione
      • logs: typing.List[schemas.odl_monitoring.ODLLogRead] (opzionale, default=PydanticUndefined)
        💬 Log di avanzamento
      • tempo_in_stato_corrente: typing.Optional[int] (opzionale)
        💬 Minuti nello stato corrente
      • tempo_totale_produzione: typing.Optional[int] (opzionale)
        💬 Minuti totali in produzione

📄 ODLMonitoringStats
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (5):
      • totale_odl: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Numero totale di ODL
      • per_stato: <class 'dict'> (obbligatorio, default=PydanticUndefined)
        💬 Conteggio ODL per stato
      • in_ritardo: <class 'int'> (opzionale, default=0)
        💬 ODL in ritardo
      • completati_oggi: <class 'int'> (opzionale, default=0)
        💬 ODL completati oggi
      • media_tempo_completamento: typing.Optional[float] (opzionale)
        💬 Tempo medio di completamento in ore

📄 ODLMonitoringSummary
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (12):
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • parte_nome: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • tool_nome: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • status: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • priorita: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
      • nesting_stato: typing.Optional[str] (opzionale)
      • autoclave_nome: typing.Optional[str] (opzionale)
      • ultimo_evento: typing.Optional[str] (opzionale)
      • ultimo_evento_timestamp: typing.Optional[datetime.datetime] (opzionale)
      • tempo_in_stato_corrente: typing.Optional[int] (opzionale)

📄 CatalogoInParteResponse
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (3):
      • part_number: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Codice Part Number univoco
      • descrizione: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Descrizione dettagliata del part number
      • categoria: typing.Optional[str] (opzionale)
        💬 Categoria del prodotto

📄 CicloCuraInParteResponse
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (2):
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco del ciclo di cura
      • nome: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Nome identificativo del ciclo di cura

📄 ParteBase
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (4):
      • part_number: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Part Number associato dal catalogo
      • descrizione_breve: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Descrizione breve della parte
      • num_valvole_richieste: <class 'int'> (opzionale, default=1)
        💬 Numero di valvole richieste per la cura
      • note_produzione: typing.Optional[str] (opzionale)
        💬 Note specifiche per la produzione

📄 ParteCreate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (6):
      • part_number: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Part Number associato dal catalogo
      • descrizione_breve: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Descrizione breve della parte
      • num_valvole_richieste: <class 'int'> (opzionale, default=1)
        💬 Numero di valvole richieste per la cura
      • note_produzione: typing.Optional[str] (opzionale)
        💬 Note specifiche per la produzione
      • ciclo_cura_id: typing.Optional[int] (opzionale)
        💬 ID del ciclo di cura associato
      • tool_ids: typing.List[int] (opzionale, default=[])
        💬 Lista di ID degli stampi associati alla parte

📄 ParteResponse
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (10):
      • part_number: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Part Number associato dal catalogo
      • descrizione_breve: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Descrizione breve della parte
      • num_valvole_richieste: <class 'int'> (opzionale, default=1)
        💬 Numero di valvole richieste per la cura
      • note_produzione: typing.Optional[str] (opzionale)
        💬 Note specifiche per la produzione
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco della parte
      • ciclo_cura: typing.Optional[schemas.parte.CicloCuraInParteResponse] (opzionale)
        💬 Ciclo di cura associato
      • tools: typing.List[schemas.parte.ToolInParteResponse] (opzionale, default=[])
        💬 Stampi associati alla parte
      • catalogo: typing.Optional[schemas.parte.CatalogoInParteResponse] (opzionale)
        💬 Informazioni dal catalogo
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora di creazione del record
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora dell'ultimo aggiornamento

📄 ParteUpdate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (6):
      • part_number: typing.Optional[str] (opzionale)
        💬 Part Number associato dal catalogo
      • descrizione_breve: typing.Optional[str] (opzionale)
        💬 Descrizione breve della parte
      • num_valvole_richieste: typing.Optional[int] (opzionale)
        💬 Numero di valvole richieste per la cura
      • note_produzione: typing.Optional[str] (opzionale)
        💬 Note specifiche per la produzione
      • ciclo_cura_id: typing.Optional[int] (opzionale)
        💬 ID del ciclo di cura associato
      • tool_ids: typing.Optional[typing.List[int]] (opzionale)
        💬 Lista di ID degli stampi associati alla parte

📄 ToolInParteResponse
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (3):
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco dello stampo
      • part_number_tool: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Part Number Tool identificativo univoco dello stampo
      • descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione dettagliata dello stampo

📄 AutoclaveStats
   📝 Schema per le statistiche delle autoclavi
   🏷️  Campi (3):
      • disponibili: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • occupate: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • totali: <class 'int'> (obbligatorio, default=PydanticUndefined)

📄 BatchNestingStats
   📝 Schema per le statistiche dei batch nesting
   🏷️  Campi (1):
      • attivi: <class 'int'> (obbligatorio, default=PydanticUndefined)

📄 HealthCheckResponse
   📝 Schema per la risposta dell'endpoint /produzione/health
   🏷️  Campi (5):
      • status: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • database: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • odl_totali: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • autoclavi_totali: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • timestamp: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)

📄 ODLProduzioneRead
   📝 Schema per ODL nell'API di produzione con informazioni essenziali
   🏷️  Campi (11):
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • parte_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • tool_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • priorita: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • status: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • note: typing.Optional[str] (opzionale)
      • motivo_blocco: typing.Optional[str] (opzionale)
      • created_at: typing.Optional[datetime.datetime] (opzionale)
      • updated_at: typing.Optional[datetime.datetime] (opzionale)
      • parte: typing.Optional[schemas.produzione.ParteProduzioneRead] (opzionale)
      • tool: typing.Optional[schemas.produzione.ToolProduzioneRead] (opzionale)

📄 ParteProduzioneRead
   📝 Schema per le informazioni della parte nell'API di produzione
   🏷️  Campi (4):
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • part_number: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • descrizione_breve: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • num_valvole_richieste: <class 'int'> (obbligatorio, default=PydanticUndefined)

📄 ProduzioneGiornaliera
   📝 Schema per la produzione giornaliera
   🏷️  Campi (2):
      • odl_completati_oggi: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • data: <class 'str'> (obbligatorio, default=PydanticUndefined)

📄 ProduzioneODLResponse
   📝 Schema per la risposta dell'endpoint /produzione/odl
   🏷️  Campi (3):
      • attesa_cura: typing.List[schemas.produzione.ODLProduzioneRead] (obbligatorio, default=PydanticUndefined)
      • in_cura: typing.List[schemas.produzione.ODLProduzioneRead] (obbligatorio, default=PydanticUndefined)
      • statistiche: <class 'schemas.produzione.StatisticheProduzione'> (obbligatorio, default=PydanticUndefined)

📄 StatisticheGeneraliResponse
   📝 Schema per la risposta dell'endpoint /produzione/statistiche
   🏷️  Campi (5):
      • odl_per_stato: typing.Dict[str, int] (obbligatorio, default=PydanticUndefined)
      • autoclavi: <class 'schemas.produzione.AutoclaveStats'> (obbligatorio, default=PydanticUndefined)
      • batch_nesting: <class 'schemas.produzione.BatchNestingStats'> (obbligatorio, default=PydanticUndefined)
      • produzione_giornaliera: <class 'schemas.produzione.ProduzioneGiornaliera'> (obbligatorio, default=PydanticUndefined)
      • timestamp: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)

📄 StatisticheProduzione
   📝 Schema per le statistiche di produzione
   🏷️  Campi (3):
      • totale_attesa_cura: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • totale_in_cura: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • ultima_sincronizzazione: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)

📄 ToolProduzioneRead
   📝 Schema per le informazioni del tool nell'API di produzione
   🏷️  Campi (3):
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • part_number_tool: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • descrizione: typing.Optional[str] (opzionale)

📄 ReportFileInfo
   📝 Schema per le informazioni di un file report
   🏷️  Campi (11):
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • filename: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • file_path: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • report_type: <enum 'ReportTypeEnum'> (obbligatorio, default=PydanticUndefined)
      • generated_for_user_id: typing.Optional[int] (obbligatorio, default=PydanticUndefined)
      • period_start: typing.Optional[datetime.datetime] (obbligatorio, default=PydanticUndefined)
      • period_end: typing.Optional[datetime.datetime] (obbligatorio, default=PydanticUndefined)
      • include_sections: typing.Optional[str] (obbligatorio, default=PydanticUndefined)
      • file_size_bytes: typing.Optional[int] (obbligatorio, default=PydanticUndefined)
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)

📄 ReportFilterRequest
   📝 Schema per i filtri di ricerca report
   🏷️  Campi (7):
      • report_type: typing.Optional[schemas.reports.ReportTypeEnum] (opzionale)
        💬 Filtra per tipo di report
      • start_date: typing.Optional[datetime.datetime] (opzionale)
        💬 Data di inizio per il filtro
      • end_date: typing.Optional[datetime.datetime] (opzionale)
        💬 Data di fine per il filtro
      • odl_filter: typing.Optional[str] (opzionale)
        💬 Filtro per ODL o PN
      • user_id: typing.Optional[int] (opzionale)
        💬 Filtra per utente
      • limit: typing.Optional[int] (opzionale, default=50)
        💬 Numero massimo di risultati
      • offset: typing.Optional[int] (opzionale, default=0)
        💬 Offset per la paginazione

📄 ReportGenerateRequest
   📝 Schema per la richiesta di generazione report
   🏷️  Campi (8):
      • report_type: <enum 'ReportTypeEnum'> (obbligatorio, default=PydanticUndefined)
        💬 Tipo di report da generare
      • range_type: typing.Optional[schemas.reports.ReportRangeType] (opzionale)
        💬 Tipo di periodo per il report
      • start_date: typing.Optional[datetime.datetime] (opzionale)
        💬 Data di inizio personalizzata
      • end_date: typing.Optional[datetime.datetime] (opzionale)
        💬 Data di fine personalizzata
      • include_sections: typing.Optional[typing.List[schemas.reports.ReportIncludeSection]] (opzionale, default=[])
        💬 Sezioni opzionali da includere nel report
      • odl_filter: typing.Optional[str] (opzionale)
        💬 Filtro per ODL o PN specifico
      • user_id: typing.Optional[int] (opzionale)
        💬 ID utente per cui generare il report
      • download: typing.Optional[bool] (opzionale, default=True)
        💬 Se true, restituisce il file per download diretto

📄 ReportGenerateResponse
   📝 Schema per la risposta di generazione report
   🏷️  Campi (4):
      • message: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • file_path: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • file_name: <class 'str'> (obbligatorio, default=PydanticUndefined)
      • report_id: <class 'int'> (obbligatorio, default=PydanticUndefined)

📄 ReportListResponse
   📝 Schema per la risposta della lista report
   🏷️  Campi (1):
      • reports: typing.List[schemas.reports.ReportFileInfo] (obbligatorio, default=PydanticUndefined)

📄 AutoScheduleResponse
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (3):
      • schedules: typing.List[schemas.schedule.ScheduleEntryRead] (obbligatorio, default=PydanticUndefined)
        💬 Lista delle schedulazioni generate
      • message: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Messaggio informativo sul risultato dell'operazione
      • count: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Numero di schedulazioni generate

📄 AutoclaveInScheduleResponse
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (4):
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco dell'autoclave
      • nome: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Nome identificativo dell'autoclave
      • codice: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Codice univoco dell'autoclave
      • num_linee_vuoto: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Numero di linee vuoto disponibili

📄 ODLInScheduleResponse
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (5):
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco dell'ordine di lavoro
      • priorita: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Priorità dell'ordine di lavoro
      • status: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Stato corrente dell'ordine di lavoro
      • parte_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID della parte associata all'ordine di lavoro
      • tool_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID del tool utilizzato per l'ordine di lavoro

📄 RecurringScheduleCreate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (8):
      • schedule_type: <enum 'ScheduleEntryTypeEnum'> (obbligatorio, default=PydanticUndefined)
        💬 Tipo di schedulazione
      • autoclave_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID dell'autoclave
      • categoria: typing.Optional[str] (opzionale)
        💬 Categoria (se tipo CATEGORIA)
      • sotto_categoria: typing.Optional[str] (opzionale)
        💬 Sotto-categoria (se tipo SOTTO_CATEGORIA)
      • pieces_per_month: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 Numero di pezzi da produrre al mese
      • start_date: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Data di inizio (YYYY-MM-DD)
      • end_date: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Data di fine (YYYY-MM-DD)
      • created_by: typing.Optional[str] (opzionale)
        💬 Utente che ha creato la schedulazione

📄 ScheduleEntryAutoCreate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (1):
      • date: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Data per cui generare lo scheduling (YYYY-MM-DD)

📄 ScheduleEntryBase
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (5):
      • autoclave_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID dell'autoclave per cui è schedulato
      • start_datetime: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora di inizio della schedulazione
      • end_datetime: typing.Optional[datetime.datetime] (opzionale)
        💬 Data e ora di fine della schedulazione (calcolata automaticamente se disponibili dati storici)
      • priority_override: <class 'bool'> (opzionale, default=False)
        💬 Indica se la priorità è stata sovrascritta manualmente
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sulla schedulazione

📄 ScheduleEntryCreate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (14):
      • autoclave_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID dell'autoclave per cui è schedulato
      • start_datetime: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora di inizio della schedulazione
      • end_datetime: typing.Optional[datetime.datetime] (opzionale)
        💬 Data e ora di fine della schedulazione (calcolata automaticamente se disponibili dati storici)
      • priority_override: <class 'bool'> (opzionale, default=False)
        💬 Indica se la priorità è stata sovrascritta manualmente
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sulla schedulazione
      • schedule_type: <enum 'ScheduleEntryTypeEnum'> (opzionale, default=ScheduleEntryTypeEnum.ODL_SPECIFICO)
        💬 Tipo di schedulazione
      • odl_id: typing.Optional[int] (opzionale)
        💬 ID dell'ODL schedulato (opzionale per schedulazioni per categoria)
      • categoria: typing.Optional[str] (opzionale)
        💬 Categoria per schedulazioni per categoria
      • sotto_categoria: typing.Optional[str] (opzionale)
        💬 Sotto-categoria per schedulazioni per sotto-categoria
      • status: <enum 'ScheduleEntryStatusEnum'> (opzionale, default=ScheduleEntryStatusEnum.MANUAL)
        💬 Stato corrente della schedulazione
      • created_by: typing.Optional[str] (opzionale)
        💬 Utente che ha creato la schedulazione
      • is_recurring: <class 'bool'> (opzionale, default=False)
        💬 Indica se è una schedulazione ricorrente
      • recurring_frequency: typing.Optional[str] (opzionale)
        💬 Frequenza ricorrenza (monthly, weekly, etc.)
      • pieces_per_month: typing.Optional[int] (opzionale)
        💬 Numero di pezzi da produrre al mese (per schedulazioni ricorrenti)

📄 ScheduleEntryRead
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (19):
      • autoclave_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID dell'autoclave per cui è schedulato
      • start_datetime: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora di inizio della schedulazione
      • end_datetime: typing.Optional[datetime.datetime] (opzionale)
        💬 Data e ora di fine della schedulazione (calcolata automaticamente se disponibili dati storici)
      • priority_override: <class 'bool'> (opzionale, default=False)
        💬 Indica se la priorità è stata sovrascritta manualmente
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sulla schedulazione
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco della schedulazione
      • schedule_type: <enum 'ScheduleEntryTypeEnum'> (obbligatorio, default=PydanticUndefined)
        💬 Tipo di schedulazione
      • odl_id: typing.Optional[int] (opzionale)
        💬 ID dell'ODL schedulato
      • categoria: typing.Optional[str] (opzionale)
        💬 Categoria
      • sotto_categoria: typing.Optional[str] (opzionale)
        💬 Sotto-categoria
      • status: <enum 'ScheduleEntryStatusEnum'> (obbligatorio, default=PydanticUndefined)
        💬 Stato corrente della schedulazione
      • created_by: typing.Optional[str] (opzionale)
        💬 Utente che ha creato la schedulazione
      • is_recurring: <class 'bool'> (opzionale, default=False)
        💬 Indica se è una schedulazione ricorrente
      • pieces_per_month: typing.Optional[int] (opzionale)
        💬 Numero di pezzi da produrre al mese
      • estimated_duration_minutes: typing.Optional[int] (opzionale)
        💬 Durata stimata in minuti
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora di creazione del record
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora dell'ultimo aggiornamento
      • odl: typing.Optional[schemas.schedule.ODLInScheduleResponse] (opzionale)
        💬 Informazioni sull'ODL schedulato
      • autoclave: <class 'schemas.schedule.AutoclaveInScheduleResponse'> (obbligatorio, default=PydanticUndefined)
        💬 Informazioni sull'autoclave

📄 ScheduleEntryUpdate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (11):
      • schedule_type: typing.Optional[schemas.schedule.ScheduleEntryTypeEnum] (opzionale)
        💬 Tipo di schedulazione
      • odl_id: typing.Optional[int] (opzionale)
        💬 ID dell'ODL schedulato
      • autoclave_id: typing.Optional[int] (opzionale)
        💬 ID dell'autoclave
      • categoria: typing.Optional[str] (opzionale)
        💬 Categoria
      • sotto_categoria: typing.Optional[str] (opzionale)
        💬 Sotto-categoria
      • start_datetime: typing.Optional[datetime.datetime] (opzionale)
        💬 Data e ora di inizio della schedulazione
      • end_datetime: typing.Optional[datetime.datetime] (opzionale)
        💬 Data e ora di fine della schedulazione
      • status: typing.Optional[schemas.schedule.ScheduleEntryStatusEnum] (opzionale)
        💬 Stato corrente della schedulazione
      • priority_override: typing.Optional[bool] (opzionale)
        💬 Indica se la priorità è stata sovrascritta manualmente
      • created_by: typing.Optional[str] (opzionale)
        💬 Utente che ha creato la schedulazione
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive

📄 ScheduleOperatorAction
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (3):
      • action: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Azione da eseguire: 'avvia', 'posticipa', 'completa'
      • new_datetime: typing.Optional[datetime.datetime] (opzionale)
        💬 Nuova data/ora (per azione 'posticipa')
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive

📄 TempoProduzioneBase
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (8):
      • part_number: typing.Optional[str] (opzionale)
        💬 Part number specifico
      • categoria: typing.Optional[str] (opzionale)
        💬 Categoria del prodotto
      • sotto_categoria: typing.Optional[str] (opzionale)
        💬 Sotto-categoria del prodotto
      • tempo_medio_minuti: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Tempo medio di produzione in minuti
      • tempo_minimo_minuti: typing.Optional[float] (opzionale)
        💬 Tempo minimo registrato
      • tempo_massimo_minuti: typing.Optional[float] (opzionale)
        💬 Tempo massimo registrato
      • numero_osservazioni: <class 'int'> (opzionale, default=1)
        💬 Numero di osservazioni
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive

📄 TempoProduzioneCreate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (8):
      • part_number: typing.Optional[str] (opzionale)
        💬 Part number specifico
      • categoria: typing.Optional[str] (opzionale)
        💬 Categoria del prodotto
      • sotto_categoria: typing.Optional[str] (opzionale)
        💬 Sotto-categoria del prodotto
      • tempo_medio_minuti: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Tempo medio di produzione in minuti
      • tempo_minimo_minuti: typing.Optional[float] (opzionale)
        💬 Tempo minimo registrato
      • tempo_massimo_minuti: typing.Optional[float] (opzionale)
        💬 Tempo massimo registrato
      • numero_osservazioni: <class 'int'> (opzionale, default=1)
        💬 Numero di osservazioni
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive

📄 TempoProduzioneRead
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (12):
      • part_number: typing.Optional[str] (opzionale)
        💬 Part number specifico
      • categoria: typing.Optional[str] (opzionale)
        💬 Categoria del prodotto
      • sotto_categoria: typing.Optional[str] (opzionale)
        💬 Sotto-categoria del prodotto
      • tempo_medio_minuti: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Tempo medio di produzione in minuti
      • tempo_minimo_minuti: typing.Optional[float] (opzionale)
        💬 Tempo minimo registrato
      • tempo_massimo_minuti: typing.Optional[float] (opzionale)
        💬 Tempo massimo registrato
      • numero_osservazioni: <class 'int'> (opzionale, default=1)
        💬 Numero di osservazioni
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco
      • ultima_osservazione: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data dell'ultima osservazione
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data di creazione
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data di aggiornamento

📄 SystemLogBase
   📝 Schema base per i log di sistema
   🏷️  Campi (11):
      • level: <enum 'LogLevel'> (opzionale, default=LogLevel.INFO)
      • event_type: <enum 'EventType'> (obbligatorio, default=PydanticUndefined)
      • user_role: <enum 'UserRole'> (obbligatorio, default=PydanticUndefined)
      • user_id: typing.Optional[str] (opzionale)
      • action: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Descrizione breve dell'azione
      • entity_type: typing.Optional[str] (opzionale)
        💬 Tipo di entità (odl, tool, etc.)
      • entity_id: typing.Optional[int] (opzionale)
      • details: typing.Optional[str] (opzionale)
      • old_value: typing.Optional[str] (opzionale)
      • new_value: typing.Optional[str] (opzionale)
      • ip_address: typing.Optional[str] (opzionale)

📄 SystemLogCreate
   📝 Schema per la creazione di un log
   🏷️  Campi (11):
      • level: <enum 'LogLevel'> (opzionale, default=LogLevel.INFO)
      • event_type: <enum 'EventType'> (obbligatorio, default=PydanticUndefined)
      • user_role: <enum 'UserRole'> (obbligatorio, default=PydanticUndefined)
      • user_id: typing.Optional[str] (opzionale)
      • action: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Descrizione breve dell'azione
      • entity_type: typing.Optional[str] (opzionale)
        💬 Tipo di entità (odl, tool, etc.)
      • entity_id: typing.Optional[int] (opzionale)
      • details: typing.Optional[str] (opzionale)
      • old_value: typing.Optional[str] (opzionale)
      • new_value: typing.Optional[str] (opzionale)
      • ip_address: typing.Optional[str] (opzionale)

📄 SystemLogFilter
   📝 Schema per filtrare i log
   🏷️  Campi (9):
      • event_type: typing.Optional[models.system_log.EventType] (opzionale)
      • user_role: typing.Optional[models.system_log.UserRole] (opzionale)
      • level: typing.Optional[models.system_log.LogLevel] (opzionale)
      • entity_type: typing.Optional[str] (opzionale)
      • entity_id: typing.Optional[int] (opzionale)
      • start_date: typing.Optional[datetime.datetime] (opzionale)
      • end_date: typing.Optional[datetime.datetime] (opzionale)
      • limit: typing.Optional[int] (opzionale, default=100)
      • offset: typing.Optional[int] (opzionale, default=0)

📄 SystemLogResponse
   📝 Schema per la risposta di un log
   🏷️  Campi (13):
      • level: <enum 'LogLevel'> (opzionale, default=LogLevel.INFO)
      • event_type: <enum 'EventType'> (obbligatorio, default=PydanticUndefined)
      • user_role: <enum 'UserRole'> (obbligatorio, default=PydanticUndefined)
      • user_id: typing.Optional[str] (opzionale)
      • action: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Descrizione breve dell'azione
      • entity_type: typing.Optional[str] (opzionale)
        💬 Tipo di entità (odl, tool, etc.)
      • entity_id: typing.Optional[int] (opzionale)
      • details: typing.Optional[str] (opzionale)
      • old_value: typing.Optional[str] (opzionale)
      • new_value: typing.Optional[str] (opzionale)
      • ip_address: typing.Optional[str] (opzionale)
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • timestamp: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)

📄 SystemLogStats
   📝 Schema per le statistiche dei log
   🏷️  Campi (5):
      • total_logs: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • logs_by_type: <class 'dict'> (obbligatorio, default=PydanticUndefined)
      • logs_by_role: <class 'dict'> (obbligatorio, default=PydanticUndefined)
      • logs_by_level: <class 'dict'> (obbligatorio, default=PydanticUndefined)
      • recent_errors: typing.List[schemas.system_log.SystemLogResponse] (obbligatorio, default=PydanticUndefined)

📄 PrevisioneTempo
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (3):
      • fase: <enum 'TipoFase'> (obbligatorio, default=PydanticUndefined)
      • media_minuti: <class 'float'> (obbligatorio, default=PydanticUndefined)
      • numero_osservazioni: <class 'int'> (obbligatorio, default=PydanticUndefined)

📄 TempoFaseBase
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (6):
      • odl_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • fase: <enum 'TipoFase'> (obbligatorio, default=PydanticUndefined)
      • inizio_fase: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
      • fine_fase: typing.Optional[datetime.datetime] (opzionale)
      • durata_minuti: typing.Optional[int] (opzionale)
      • note: typing.Optional[str] (opzionale)

📄 TempoFaseCreate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (6):
      • odl_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • fase: <enum 'TipoFase'> (obbligatorio, default=PydanticUndefined)
      • inizio_fase: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
      • fine_fase: typing.Optional[datetime.datetime] (opzionale)
      • durata_minuti: typing.Optional[int] (opzionale)
      • note: typing.Optional[str] (opzionale)

📄 TempoFaseInDB
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (9):
      • odl_id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • fase: <enum 'TipoFase'> (obbligatorio, default=PydanticUndefined)
      • inizio_fase: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
      • fine_fase: typing.Optional[datetime.datetime] (opzionale)
      • durata_minuti: typing.Optional[int] (opzionale)
      • note: typing.Optional[str] (opzionale)
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)

📄 TempoFaseStatistiche
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (5):
      • fase: <enum 'TipoFase'> (obbligatorio, default=PydanticUndefined)
      • media_minuti: <class 'float'> (obbligatorio, default=PydanticUndefined)
      • numero_osservazioni: <class 'int'> (obbligatorio, default=PydanticUndefined)
      • tempo_minimo_minuti: typing.Optional[float] (opzionale)
      • tempo_massimo_minuti: typing.Optional[float] (opzionale)

📄 TempoFaseUpdate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (4):
      • fase: typing.Optional[schemas.tempo_fase.TipoFase] (opzionale)
      • inizio_fase: typing.Optional[datetime.datetime] (opzionale)
      • fine_fase: typing.Optional[datetime.datetime] (opzionale)
      • note: typing.Optional[str] (opzionale)

📄 ToolBase
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (7):
      • part_number_tool: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Part Number Tool identificativo univoco dello stampo
      • descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione dettagliata dello stampo
      • lunghezza_piano: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Lunghezza utile del tool
      • larghezza_piano: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Larghezza utile del tool
      • peso: typing.Optional[float] (opzionale)
        💬 Peso del tool in kg
      • materiale: typing.Optional[str] (opzionale)
        💬 Materiale del tool (es. Alluminio, Acciaio, etc.)
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sullo stampo

📄 ToolCreate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (8):
      • part_number_tool: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Part Number Tool identificativo univoco dello stampo
      • descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione dettagliata dello stampo
      • lunghezza_piano: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Lunghezza utile del tool
      • larghezza_piano: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Larghezza utile del tool
      • peso: typing.Optional[float] (opzionale)
        💬 Peso del tool in kg
      • materiale: typing.Optional[str] (opzionale)
        💬 Materiale del tool (es. Alluminio, Acciaio, etc.)
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sullo stampo
      • disponibile: <class 'bool'> (opzionale, default=True)
        💬 Indica se lo stampo è attualmente disponibile

📄 ToolResponse
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (12):
      • part_number_tool: <class 'str'> (obbligatorio, default=PydanticUndefined)
        💬 Part Number Tool identificativo univoco dello stampo
      • descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione dettagliata dello stampo
      • lunghezza_piano: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Lunghezza utile del tool
      • larghezza_piano: <class 'float'> (obbligatorio, default=PydanticUndefined)
        💬 Larghezza utile del tool
      • peso: typing.Optional[float] (opzionale)
        💬 Peso del tool in kg
      • materiale: typing.Optional[str] (opzionale)
        💬 Materiale del tool (es. Alluminio, Acciaio, etc.)
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sullo stampo
      • id: <class 'int'> (obbligatorio, default=PydanticUndefined)
        💬 ID univoco dello stampo
      • disponibile: <class 'bool'> (obbligatorio, default=PydanticUndefined)
        💬 Indica se lo stampo è attualmente disponibile
      • created_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora di creazione del record
      • updated_at: <class 'datetime.datetime'> (obbligatorio, default=PydanticUndefined)
        💬 Data e ora dell'ultimo aggiornamento
      • area: typing.Optional[float] (opzionale)
        💬 Area del tool in cm² (calcolata)

📄 ToolUpdate
   📝 !!! abstract "Usage Documentation"
    [Models](../concepts/models.md)

A base class for creating Pydantic models.

Attributes:
    __class_vars__: The names of the class variables defined on the model.
    __private_attributes__: Metadata about the private attributes of the model.
    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
    __pydantic_core_schema__: The core schema of the model.
    __pydantic_custom_init__: Whether the model has a custom `__init__` function.
    __pydantic_decorators__: Metadata containing the decorators defined on the model.
        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
    __pydantic_post_init__: The name of the post-init method for the model, if defined.
    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
        is set to `'allow'`.
    __pydantic_fields_set__: The names of fields explicitly set during instantiation.
    __pydantic_private__: Values of private attributes set on the model instance.
   🏷️  Campi (8):
      • part_number_tool: typing.Optional[str] (opzionale)
        💬 Part Number Tool identificativo univoco dello stampo
      • descrizione: typing.Optional[str] (opzionale)
        💬 Descrizione dettagliata dello stampo
      • lunghezza_piano: typing.Optional[float] (opzionale)
        💬 Lunghezza utile del tool
      • larghezza_piano: typing.Optional[float] (opzionale)
        💬 Larghezza utile del tool
      • peso: typing.Optional[float] (opzionale)
        💬 Peso del tool in kg
      • materiale: typing.Optional[str] (opzionale)
        💬 Materiale del tool
      • disponibile: typing.Optional[bool] (opzionale)
        💬 Indica se lo stampo è attualmente disponibile
      • note: typing.Optional[str] (opzionale)
        💬 Note aggiuntive sullo stampo

